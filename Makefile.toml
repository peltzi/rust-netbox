[env]
NETBOX_VERSION = "2.7"
NETBOX_DOCKER_VERSION = "0.23.0"
NETBOX_DOCKER_REPO_URL = "https://github.com/netbox-community/netbox-docker.git"
OPENAPI_GENERATOR_DOCKER_IMAGE = "openapitools/openapi-generator-cli:v4.3.0"

# Tasks

# Generate the client code, see ${PWD}/build for results
[tasks.generate-client]
run_task = [
  { name = ["generate_spec_with_netbox_docker", "generate_code", "check_generated"], fork = true }
]

# Clean the build depris from client code generation
[tasks.clean-generated]
run_task = [
  { name = ["clean_build_generated_client", "clean_build_netbox_docker"] }
]

# Copy the genereted code over repo
[tasks.copy-generated-code]
dependencies = ["check_generated_code"]
condition = { fail_message = "Generated code doesn't exist!" }
condition_script = [
    "test ${PWD}/build/src/lib.rs"
]
script = [
  "cp -TRv ${PWD}/build/src ${PWD}/",
  "git diff --stat"
  "cp ${PWD}/build/swagger.json ${PWD}/swagger.json"
]

# Copy the genereted code over repo
[tasks.copy-generated-spec]
condition = { fail_message = "Generated swagger.json doesn't exist!" }
condition_script = [
    "test ${PWD}/build/swagger.json"
]
script = [
  "cp ${PWD}/build/swagger.json ${PWD}/swagger.json",
  "git diff --stat"
]


## Private tasks

# Clean the build dir for generated code
[tasks.clean_build_generated_client]
private = true
condition = { fail_message = "Nothing to clean, client builddir doesn't exist." }
condition_script = [
    "test -d ${PWD}/build/client"
]
script = ["rm -rf ${PWD}/build/client"]

# Cleanup Netbox docker-compose
[tasks.clean_build_netbox_docker_compose]
private = true
condition = { fail_message = "Nothing to clean, netbox-docker builddir doesn't exist." }
condition_script = [
    "test -d ${PWD}/build/netbox-docker"
]
script = [
  "cd ${PWD}/build/netbox-docker",
  "docker-compose rm -f"
]

# Clean Netbox docker build directory
[tasks.clean_build_netbox_docker]
private = true
dependencies = ["clean_build_netbox_docker_compose"]
script = [
  "rm -rf ${PWD}/build/netbox-docker",
  "rm -f ${PWD}/build/swagger.json"
]

# Setup Netbox docker and fetch swagger.json
[tasks.generate_spec_with_netbox_docker]
private = true
dependencies = ["clean_build_netbox_docker"]
script = [
  "mkdir -p ${PWD}/build/netbox-docker",
  "git clone --branch ${NETBOX_DOCKER_VERSION} ${NETBOX_DOCKER_REPO_URL} ${PWD}/build/netbox-docker",
  "cd ${PWD}/build/netbox-docker",
  "VERSION=v${NETBOX_VERSION} docker-compose pull",
  "VERSION=v${NETBOX_VERSION} docker-compose up --detach",
  "curl --connect-timeout 30 --retry 6 --retry-delay 10 --retry-connrefused http://127.0.0.1:$(docker-compose port nginx 8080 | cut -d':' -f 2)/api/swagger.json -o ../swagger.json",
  "docker-compose stop",
  "grep -E \"version.*${NETBOX_VERSION}\" ../swagger.json"
]

# Generate new client code from spec
[tasks.generate_code]
private = true
dependencies = ["clean_build_generated_client"]
script = [
  "export RUNUSER_UID=$(id -u); export RUNUSER_GID=$(id -g)",
  "mkdir -p ${PWD}/build/client",
  "${GEN_DOCKER_CMDLINE} --user ${RUNUSER_UID}:${RUNUSER_GID} ${GEN_DOCKER_VOLUMES} ${OPENAPI_GENERATOR_DOCKER_IMAGE} ${GEN_CMDLINE}"
]

  [tasks.generate_code.env]
  "GEN_DOCKER_VOLUMES" = "-v ${PWD}/build/client:/build -v ${PWD}/build/swagger.json:/swagger.json"
  "GEN_DOCKER_CMDLINE" = "docker run --rm"
  "GEN_CMDLINE" = "generate -i /swagger.json -g rust --library reqwest --package-name ${CARGO_MAKE_PROJECT_NAME} --additional-properties=packageVersion=${CARGO_MAKE_PROJECT_VERSION} -o /build"

# Rustfmt the generate code
[tasks.format_generated_code]
private = true
command = "rustfmt"
args = ["-v", "build/client/src/lib.rs"]

# Check the generated client code
[tasks.check_generated_code]
private = true
dependencies = ["format_generated_code"]
script = [
  "cd ${PWD}/build/client",
  "cargo check",
  "echo '[OK] Cargo check on generated code completed!'"
]
