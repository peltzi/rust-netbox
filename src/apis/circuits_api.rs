/*
 * NetBox API
 *
 * API to access NetBox
 *
 * The version of the OpenAPI document: 2.7
 *
 * Generated by: https://openapi-generator.tech
 */

use reqwest;

use super::{configuration, Error};
use crate::apis::ResponseContent;

/// struct for typed errors of method `circuits_choices_list`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CircuitsChoicesListError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `circuits_choices_read`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CircuitsChoicesReadError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `circuits_circuit_terminations_create`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CircuitsCircuitTerminationsCreateError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `circuits_circuit_terminations_delete`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CircuitsCircuitTerminationsDeleteError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `circuits_circuit_terminations_list`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CircuitsCircuitTerminationsListError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `circuits_circuit_terminations_partial_update`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CircuitsCircuitTerminationsPartialUpdateError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `circuits_circuit_terminations_read`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CircuitsCircuitTerminationsReadError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `circuits_circuit_terminations_update`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CircuitsCircuitTerminationsUpdateError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `circuits_circuit_types_create`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CircuitsCircuitTypesCreateError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `circuits_circuit_types_delete`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CircuitsCircuitTypesDeleteError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `circuits_circuit_types_list`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CircuitsCircuitTypesListError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `circuits_circuit_types_partial_update`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CircuitsCircuitTypesPartialUpdateError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `circuits_circuit_types_read`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CircuitsCircuitTypesReadError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `circuits_circuit_types_update`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CircuitsCircuitTypesUpdateError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `circuits_circuits_create`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CircuitsCircuitsCreateError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `circuits_circuits_delete`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CircuitsCircuitsDeleteError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `circuits_circuits_list`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CircuitsCircuitsListError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `circuits_circuits_partial_update`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CircuitsCircuitsPartialUpdateError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `circuits_circuits_read`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CircuitsCircuitsReadError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `circuits_circuits_update`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CircuitsCircuitsUpdateError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `circuits_providers_create`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CircuitsProvidersCreateError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `circuits_providers_delete`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CircuitsProvidersDeleteError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `circuits_providers_graphs`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CircuitsProvidersGraphsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `circuits_providers_list`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CircuitsProvidersListError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `circuits_providers_partial_update`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CircuitsProvidersPartialUpdateError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `circuits_providers_read`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CircuitsProvidersReadError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `circuits_providers_update`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CircuitsProvidersUpdateError {
    UnknownValue(serde_json::Value),
}

pub async fn circuits_choices_list(
    configuration: &configuration::Configuration,
) -> Result<(), Error<CircuitsChoicesListError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/circuits/_choices/", configuration.base_path);
    let mut local_var_req_builder = local_var_client.get(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<CircuitsChoicesListError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn circuits_choices_read(
    configuration: &configuration::Configuration,
    id: &str,
) -> Result<(), Error<CircuitsChoicesReadError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!(
        "{}/circuits/_choices/{id}/",
        configuration.base_path,
        id = crate::apis::urlencode(id)
    );
    let mut local_var_req_builder = local_var_client.get(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<CircuitsChoicesReadError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn circuits_circuit_terminations_create(
    configuration: &configuration::Configuration,
    data: crate::models::WritableCircuitTermination,
) -> Result<crate::models::CircuitTermination, Error<CircuitsCircuitTerminationsCreateError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/circuits/circuit-terminations/", configuration.base_path);
    let mut local_var_req_builder = local_var_client.post(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<CircuitsCircuitTerminationsCreateError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn circuits_circuit_terminations_delete(
    configuration: &configuration::Configuration,
    id: i32,
) -> Result<(), Error<CircuitsCircuitTerminationsDeleteError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!(
        "{}/circuits/circuit-terminations/{id}/",
        configuration.base_path,
        id = id
    );
    let mut local_var_req_builder = local_var_client.delete(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<CircuitsCircuitTerminationsDeleteError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Call to super to allow for caching
pub async fn circuits_circuit_terminations_list(
    configuration: &configuration::Configuration,
    term_side: Option<&str>,
    port_speed: Option<&str>,
    upstream_speed: Option<&str>,
    xconnect_id: Option<&str>,
    q: Option<&str>,
    circuit_id: Option<&str>,
    site_id: Option<&str>,
    site: Option<&str>,
    term_side__n: Option<&str>,
    port_speed__n: Option<&str>,
    port_speed__lte: Option<&str>,
    port_speed__lt: Option<&str>,
    port_speed__gte: Option<&str>,
    port_speed__gt: Option<&str>,
    upstream_speed__n: Option<&str>,
    upstream_speed__lte: Option<&str>,
    upstream_speed__lt: Option<&str>,
    upstream_speed__gte: Option<&str>,
    upstream_speed__gt: Option<&str>,
    xconnect_id__n: Option<&str>,
    xconnect_id__ic: Option<&str>,
    xconnect_id__nic: Option<&str>,
    xconnect_id__iew: Option<&str>,
    xconnect_id__niew: Option<&str>,
    xconnect_id__isw: Option<&str>,
    xconnect_id__nisw: Option<&str>,
    xconnect_id__ie: Option<&str>,
    xconnect_id__nie: Option<&str>,
    circuit_id__n: Option<&str>,
    site_id__n: Option<&str>,
    site__n: Option<&str>,
    limit: Option<i32>,
    offset: Option<i32>,
) -> Result<crate::models::InlineResponse200, Error<CircuitsCircuitTerminationsListError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/circuits/circuit-terminations/", configuration.base_path);
    let mut local_var_req_builder = local_var_client.get(local_var_uri_str.as_str());

    if let Some(ref local_var_str) = term_side {
        local_var_req_builder =
            local_var_req_builder.query(&[("term_side", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = port_speed {
        local_var_req_builder =
            local_var_req_builder.query(&[("port_speed", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = upstream_speed {
        local_var_req_builder =
            local_var_req_builder.query(&[("upstream_speed", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = xconnect_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("xconnect_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = q {
        local_var_req_builder = local_var_req_builder.query(&[("q", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = circuit_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("circuit_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("site_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site {
        local_var_req_builder =
            local_var_req_builder.query(&[("site", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = term_side__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("term_side__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = port_speed__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("port_speed__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = port_speed__lte {
        local_var_req_builder =
            local_var_req_builder.query(&[("port_speed__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = port_speed__lt {
        local_var_req_builder =
            local_var_req_builder.query(&[("port_speed__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = port_speed__gte {
        local_var_req_builder =
            local_var_req_builder.query(&[("port_speed__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = port_speed__gt {
        local_var_req_builder =
            local_var_req_builder.query(&[("port_speed__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = upstream_speed__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("upstream_speed__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = upstream_speed__lte {
        local_var_req_builder =
            local_var_req_builder.query(&[("upstream_speed__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = upstream_speed__lt {
        local_var_req_builder =
            local_var_req_builder.query(&[("upstream_speed__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = upstream_speed__gte {
        local_var_req_builder =
            local_var_req_builder.query(&[("upstream_speed__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = upstream_speed__gt {
        local_var_req_builder =
            local_var_req_builder.query(&[("upstream_speed__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = xconnect_id__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("xconnect_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = xconnect_id__ic {
        local_var_req_builder =
            local_var_req_builder.query(&[("xconnect_id__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = xconnect_id__nic {
        local_var_req_builder =
            local_var_req_builder.query(&[("xconnect_id__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = xconnect_id__iew {
        local_var_req_builder =
            local_var_req_builder.query(&[("xconnect_id__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = xconnect_id__niew {
        local_var_req_builder =
            local_var_req_builder.query(&[("xconnect_id__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = xconnect_id__isw {
        local_var_req_builder =
            local_var_req_builder.query(&[("xconnect_id__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = xconnect_id__nisw {
        local_var_req_builder =
            local_var_req_builder.query(&[("xconnect_id__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = xconnect_id__ie {
        local_var_req_builder =
            local_var_req_builder.query(&[("xconnect_id__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = xconnect_id__nie {
        local_var_req_builder =
            local_var_req_builder.query(&[("xconnect_id__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = circuit_id__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("circuit_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site_id__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("site_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("site__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder =
            local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = offset {
        local_var_req_builder =
            local_var_req_builder.query(&[("offset", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<CircuitsCircuitTerminationsListError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn circuits_circuit_terminations_partial_update(
    configuration: &configuration::Configuration,
    id: i32,
    data: crate::models::WritableCircuitTermination,
) -> Result<crate::models::CircuitTermination, Error<CircuitsCircuitTerminationsPartialUpdateError>>
{
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!(
        "{}/circuits/circuit-terminations/{id}/",
        configuration.base_path,
        id = id
    );
    let mut local_var_req_builder = local_var_client.patch(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<CircuitsCircuitTerminationsPartialUpdateError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Call to super to allow for caching
pub async fn circuits_circuit_terminations_read(
    configuration: &configuration::Configuration,
    id: i32,
) -> Result<crate::models::CircuitTermination, Error<CircuitsCircuitTerminationsReadError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!(
        "{}/circuits/circuit-terminations/{id}/",
        configuration.base_path,
        id = id
    );
    let mut local_var_req_builder = local_var_client.get(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<CircuitsCircuitTerminationsReadError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn circuits_circuit_terminations_update(
    configuration: &configuration::Configuration,
    id: i32,
    data: crate::models::WritableCircuitTermination,
) -> Result<crate::models::CircuitTermination, Error<CircuitsCircuitTerminationsUpdateError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!(
        "{}/circuits/circuit-terminations/{id}/",
        configuration.base_path,
        id = id
    );
    let mut local_var_req_builder = local_var_client.put(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<CircuitsCircuitTerminationsUpdateError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn circuits_circuit_types_create(
    configuration: &configuration::Configuration,
    data: crate::models::CircuitType,
) -> Result<crate::models::CircuitType, Error<CircuitsCircuitTypesCreateError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/circuits/circuit-types/", configuration.base_path);
    let mut local_var_req_builder = local_var_client.post(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<CircuitsCircuitTypesCreateError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn circuits_circuit_types_delete(
    configuration: &configuration::Configuration,
    id: i32,
) -> Result<(), Error<CircuitsCircuitTypesDeleteError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!(
        "{}/circuits/circuit-types/{id}/",
        configuration.base_path,
        id = id
    );
    let mut local_var_req_builder = local_var_client.delete(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<CircuitsCircuitTypesDeleteError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Call to super to allow for caching
pub async fn circuits_circuit_types_list(
    configuration: &configuration::Configuration,
    id: Option<&str>,
    name: Option<&str>,
    slug: Option<&str>,
    q: Option<&str>,
    id__n: Option<&str>,
    id__lte: Option<&str>,
    id__lt: Option<&str>,
    id__gte: Option<&str>,
    id__gt: Option<&str>,
    name__n: Option<&str>,
    name__ic: Option<&str>,
    name__nic: Option<&str>,
    name__iew: Option<&str>,
    name__niew: Option<&str>,
    name__isw: Option<&str>,
    name__nisw: Option<&str>,
    name__ie: Option<&str>,
    name__nie: Option<&str>,
    slug__n: Option<&str>,
    slug__ic: Option<&str>,
    slug__nic: Option<&str>,
    slug__iew: Option<&str>,
    slug__niew: Option<&str>,
    slug__isw: Option<&str>,
    slug__nisw: Option<&str>,
    slug__ie: Option<&str>,
    slug__nie: Option<&str>,
    limit: Option<i32>,
    offset: Option<i32>,
) -> Result<crate::models::InlineResponse2001, Error<CircuitsCircuitTypesListError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/circuits/circuit-types/", configuration.base_path);
    let mut local_var_req_builder = local_var_client.get(local_var_uri_str.as_str());

    if let Some(ref local_var_str) = id {
        local_var_req_builder = local_var_req_builder.query(&[("id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name {
        local_var_req_builder =
            local_var_req_builder.query(&[("name", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug {
        local_var_req_builder =
            local_var_req_builder.query(&[("slug", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = q {
        local_var_req_builder = local_var_req_builder.query(&[("q", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lte {
        local_var_req_builder =
            local_var_req_builder.query(&[("id__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lt {
        local_var_req_builder =
            local_var_req_builder.query(&[("id__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gte {
        local_var_req_builder =
            local_var_req_builder.query(&[("id__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gt {
        local_var_req_builder =
            local_var_req_builder.query(&[("id__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("name__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__ic {
        local_var_req_builder =
            local_var_req_builder.query(&[("name__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nic {
        local_var_req_builder =
            local_var_req_builder.query(&[("name__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__iew {
        local_var_req_builder =
            local_var_req_builder.query(&[("name__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__niew {
        local_var_req_builder =
            local_var_req_builder.query(&[("name__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__isw {
        local_var_req_builder =
            local_var_req_builder.query(&[("name__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nisw {
        local_var_req_builder =
            local_var_req_builder.query(&[("name__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__ie {
        local_var_req_builder =
            local_var_req_builder.query(&[("name__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nie {
        local_var_req_builder =
            local_var_req_builder.query(&[("name__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("slug__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__ic {
        local_var_req_builder =
            local_var_req_builder.query(&[("slug__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__nic {
        local_var_req_builder =
            local_var_req_builder.query(&[("slug__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__iew {
        local_var_req_builder =
            local_var_req_builder.query(&[("slug__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__niew {
        local_var_req_builder =
            local_var_req_builder.query(&[("slug__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__isw {
        local_var_req_builder =
            local_var_req_builder.query(&[("slug__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__nisw {
        local_var_req_builder =
            local_var_req_builder.query(&[("slug__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__ie {
        local_var_req_builder =
            local_var_req_builder.query(&[("slug__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__nie {
        local_var_req_builder =
            local_var_req_builder.query(&[("slug__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder =
            local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = offset {
        local_var_req_builder =
            local_var_req_builder.query(&[("offset", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<CircuitsCircuitTypesListError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn circuits_circuit_types_partial_update(
    configuration: &configuration::Configuration,
    id: i32,
    data: crate::models::CircuitType,
) -> Result<crate::models::CircuitType, Error<CircuitsCircuitTypesPartialUpdateError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!(
        "{}/circuits/circuit-types/{id}/",
        configuration.base_path,
        id = id
    );
    let mut local_var_req_builder = local_var_client.patch(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<CircuitsCircuitTypesPartialUpdateError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Call to super to allow for caching
pub async fn circuits_circuit_types_read(
    configuration: &configuration::Configuration,
    id: i32,
) -> Result<crate::models::CircuitType, Error<CircuitsCircuitTypesReadError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!(
        "{}/circuits/circuit-types/{id}/",
        configuration.base_path,
        id = id
    );
    let mut local_var_req_builder = local_var_client.get(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<CircuitsCircuitTypesReadError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn circuits_circuit_types_update(
    configuration: &configuration::Configuration,
    id: i32,
    data: crate::models::CircuitType,
) -> Result<crate::models::CircuitType, Error<CircuitsCircuitTypesUpdateError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!(
        "{}/circuits/circuit-types/{id}/",
        configuration.base_path,
        id = id
    );
    let mut local_var_req_builder = local_var_client.put(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<CircuitsCircuitTypesUpdateError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn circuits_circuits_create(
    configuration: &configuration::Configuration,
    data: crate::models::WritableCircuit,
) -> Result<crate::models::Circuit, Error<CircuitsCircuitsCreateError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/circuits/circuits/", configuration.base_path);
    let mut local_var_req_builder = local_var_client.post(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<CircuitsCircuitsCreateError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn circuits_circuits_delete(
    configuration: &configuration::Configuration,
    id: i32,
) -> Result<(), Error<CircuitsCircuitsDeleteError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!(
        "{}/circuits/circuits/{id}/",
        configuration.base_path,
        id = id
    );
    let mut local_var_req_builder = local_var_client.delete(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<CircuitsCircuitsDeleteError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Call to super to allow for caching
pub async fn circuits_circuits_list(
    configuration: &configuration::Configuration,
    cid: Option<&str>,
    install_date: Option<&str>,
    commit_rate: Option<&str>,
    tenant_group_id: Option<&str>,
    tenant_group: Option<&str>,
    tenant_id: Option<&str>,
    tenant: Option<&str>,
    created: Option<&str>,
    created__gte: Option<&str>,
    created__lte: Option<&str>,
    last_updated: Option<&str>,
    last_updated__gte: Option<&str>,
    last_updated__lte: Option<&str>,
    id__in: Option<&str>,
    q: Option<&str>,
    provider_id: Option<&str>,
    provider: Option<&str>,
    type_id: Option<&str>,
    _type: Option<&str>,
    status: Option<&str>,
    site_id: Option<&str>,
    site: Option<&str>,
    region_id: Option<&str>,
    region: Option<&str>,
    tag: Option<&str>,
    cid__n: Option<&str>,
    cid__ic: Option<&str>,
    cid__nic: Option<&str>,
    cid__iew: Option<&str>,
    cid__niew: Option<&str>,
    cid__isw: Option<&str>,
    cid__nisw: Option<&str>,
    cid__ie: Option<&str>,
    cid__nie: Option<&str>,
    install_date__n: Option<&str>,
    install_date__lte: Option<&str>,
    install_date__lt: Option<&str>,
    install_date__gte: Option<&str>,
    install_date__gt: Option<&str>,
    commit_rate__n: Option<&str>,
    commit_rate__lte: Option<&str>,
    commit_rate__lt: Option<&str>,
    commit_rate__gte: Option<&str>,
    commit_rate__gt: Option<&str>,
    tenant_group_id__n: Option<&str>,
    tenant_group__n: Option<&str>,
    tenant_id__n: Option<&str>,
    tenant__n: Option<&str>,
    provider_id__n: Option<&str>,
    provider__n: Option<&str>,
    type_id__n: Option<&str>,
    type__n: Option<&str>,
    status__n: Option<&str>,
    site_id__n: Option<&str>,
    site__n: Option<&str>,
    region_id__n: Option<&str>,
    region__n: Option<&str>,
    tag__n: Option<&str>,
    limit: Option<i32>,
    offset: Option<i32>,
) -> Result<crate::models::InlineResponse2002, Error<CircuitsCircuitsListError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/circuits/circuits/", configuration.base_path);
    let mut local_var_req_builder = local_var_client.get(local_var_uri_str.as_str());

    if let Some(ref local_var_str) = cid {
        local_var_req_builder = local_var_req_builder.query(&[("cid", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = install_date {
        local_var_req_builder =
            local_var_req_builder.query(&[("install_date", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = commit_rate {
        local_var_req_builder =
            local_var_req_builder.query(&[("commit_rate", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tenant_group_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("tenant_group_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tenant_group {
        local_var_req_builder =
            local_var_req_builder.query(&[("tenant_group", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tenant_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("tenant_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tenant {
        local_var_req_builder =
            local_var_req_builder.query(&[("tenant", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created {
        local_var_req_builder =
            local_var_req_builder.query(&[("created", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__gte {
        local_var_req_builder =
            local_var_req_builder.query(&[("created__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__lte {
        local_var_req_builder =
            local_var_req_builder.query(&[("created__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated {
        local_var_req_builder =
            local_var_req_builder.query(&[("last_updated", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__gte {
        local_var_req_builder =
            local_var_req_builder.query(&[("last_updated__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__lte {
        local_var_req_builder =
            local_var_req_builder.query(&[("last_updated__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__in {
        local_var_req_builder =
            local_var_req_builder.query(&[("id__in", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = q {
        local_var_req_builder = local_var_req_builder.query(&[("q", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = provider_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("provider_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = provider {
        local_var_req_builder =
            local_var_req_builder.query(&[("provider", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = type_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("type_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = _type {
        local_var_req_builder =
            local_var_req_builder.query(&[("type", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = status {
        local_var_req_builder =
            local_var_req_builder.query(&[("status", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("site_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site {
        local_var_req_builder =
            local_var_req_builder.query(&[("site", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = region_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("region_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = region {
        local_var_req_builder =
            local_var_req_builder.query(&[("region", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tag {
        local_var_req_builder = local_var_req_builder.query(&[("tag", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = cid__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("cid__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = cid__ic {
        local_var_req_builder =
            local_var_req_builder.query(&[("cid__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = cid__nic {
        local_var_req_builder =
            local_var_req_builder.query(&[("cid__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = cid__iew {
        local_var_req_builder =
            local_var_req_builder.query(&[("cid__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = cid__niew {
        local_var_req_builder =
            local_var_req_builder.query(&[("cid__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = cid__isw {
        local_var_req_builder =
            local_var_req_builder.query(&[("cid__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = cid__nisw {
        local_var_req_builder =
            local_var_req_builder.query(&[("cid__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = cid__ie {
        local_var_req_builder =
            local_var_req_builder.query(&[("cid__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = cid__nie {
        local_var_req_builder =
            local_var_req_builder.query(&[("cid__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = install_date__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("install_date__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = install_date__lte {
        local_var_req_builder =
            local_var_req_builder.query(&[("install_date__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = install_date__lt {
        local_var_req_builder =
            local_var_req_builder.query(&[("install_date__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = install_date__gte {
        local_var_req_builder =
            local_var_req_builder.query(&[("install_date__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = install_date__gt {
        local_var_req_builder =
            local_var_req_builder.query(&[("install_date__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = commit_rate__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("commit_rate__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = commit_rate__lte {
        local_var_req_builder =
            local_var_req_builder.query(&[("commit_rate__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = commit_rate__lt {
        local_var_req_builder =
            local_var_req_builder.query(&[("commit_rate__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = commit_rate__gte {
        local_var_req_builder =
            local_var_req_builder.query(&[("commit_rate__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = commit_rate__gt {
        local_var_req_builder =
            local_var_req_builder.query(&[("commit_rate__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tenant_group_id__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("tenant_group_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tenant_group__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("tenant_group__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tenant_id__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("tenant_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tenant__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("tenant__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = provider_id__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("provider_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = provider__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("provider__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = type_id__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("type_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = type__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("type__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = status__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("status__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site_id__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("site_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("site__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = region_id__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("region_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = region__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("region__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tag__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("tag__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder =
            local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = offset {
        local_var_req_builder =
            local_var_req_builder.query(&[("offset", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<CircuitsCircuitsListError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn circuits_circuits_partial_update(
    configuration: &configuration::Configuration,
    id: i32,
    data: crate::models::WritableCircuit,
) -> Result<crate::models::Circuit, Error<CircuitsCircuitsPartialUpdateError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!(
        "{}/circuits/circuits/{id}/",
        configuration.base_path,
        id = id
    );
    let mut local_var_req_builder = local_var_client.patch(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<CircuitsCircuitsPartialUpdateError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Call to super to allow for caching
pub async fn circuits_circuits_read(
    configuration: &configuration::Configuration,
    id: i32,
) -> Result<crate::models::Circuit, Error<CircuitsCircuitsReadError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!(
        "{}/circuits/circuits/{id}/",
        configuration.base_path,
        id = id
    );
    let mut local_var_req_builder = local_var_client.get(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<CircuitsCircuitsReadError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn circuits_circuits_update(
    configuration: &configuration::Configuration,
    id: i32,
    data: crate::models::WritableCircuit,
) -> Result<crate::models::Circuit, Error<CircuitsCircuitsUpdateError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!(
        "{}/circuits/circuits/{id}/",
        configuration.base_path,
        id = id
    );
    let mut local_var_req_builder = local_var_client.put(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<CircuitsCircuitsUpdateError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn circuits_providers_create(
    configuration: &configuration::Configuration,
    data: crate::models::Provider,
) -> Result<crate::models::Provider, Error<CircuitsProvidersCreateError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/circuits/providers/", configuration.base_path);
    let mut local_var_req_builder = local_var_client.post(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<CircuitsProvidersCreateError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn circuits_providers_delete(
    configuration: &configuration::Configuration,
    id: i32,
) -> Result<(), Error<CircuitsProvidersDeleteError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!(
        "{}/circuits/providers/{id}/",
        configuration.base_path,
        id = id
    );
    let mut local_var_req_builder = local_var_client.delete(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<CircuitsProvidersDeleteError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// A convenience method for rendering graphs for a particular provider.
pub async fn circuits_providers_graphs(
    configuration: &configuration::Configuration,
    id: i32,
) -> Result<crate::models::Provider, Error<CircuitsProvidersGraphsError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!(
        "{}/circuits/providers/{id}/graphs/",
        configuration.base_path,
        id = id
    );
    let mut local_var_req_builder = local_var_client.get(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<CircuitsProvidersGraphsError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Call to super to allow for caching
pub async fn circuits_providers_list(
    configuration: &configuration::Configuration,
    name: Option<&str>,
    slug: Option<&str>,
    asn: Option<&str>,
    account: Option<&str>,
    created: Option<&str>,
    created__gte: Option<&str>,
    created__lte: Option<&str>,
    last_updated: Option<&str>,
    last_updated__gte: Option<&str>,
    last_updated__lte: Option<&str>,
    id__in: Option<&str>,
    q: Option<&str>,
    region_id: Option<&str>,
    region: Option<&str>,
    site_id: Option<&str>,
    site: Option<&str>,
    tag: Option<&str>,
    name__n: Option<&str>,
    name__ic: Option<&str>,
    name__nic: Option<&str>,
    name__iew: Option<&str>,
    name__niew: Option<&str>,
    name__isw: Option<&str>,
    name__nisw: Option<&str>,
    name__ie: Option<&str>,
    name__nie: Option<&str>,
    slug__n: Option<&str>,
    slug__ic: Option<&str>,
    slug__nic: Option<&str>,
    slug__iew: Option<&str>,
    slug__niew: Option<&str>,
    slug__isw: Option<&str>,
    slug__nisw: Option<&str>,
    slug__ie: Option<&str>,
    slug__nie: Option<&str>,
    asn__n: Option<&str>,
    asn__lte: Option<&str>,
    asn__lt: Option<&str>,
    asn__gte: Option<&str>,
    asn__gt: Option<&str>,
    account__n: Option<&str>,
    account__ic: Option<&str>,
    account__nic: Option<&str>,
    account__iew: Option<&str>,
    account__niew: Option<&str>,
    account__isw: Option<&str>,
    account__nisw: Option<&str>,
    account__ie: Option<&str>,
    account__nie: Option<&str>,
    region_id__n: Option<&str>,
    region__n: Option<&str>,
    site_id__n: Option<&str>,
    site__n: Option<&str>,
    tag__n: Option<&str>,
    limit: Option<i32>,
    offset: Option<i32>,
) -> Result<crate::models::InlineResponse2003, Error<CircuitsProvidersListError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/circuits/providers/", configuration.base_path);
    let mut local_var_req_builder = local_var_client.get(local_var_uri_str.as_str());

    if let Some(ref local_var_str) = name {
        local_var_req_builder =
            local_var_req_builder.query(&[("name", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug {
        local_var_req_builder =
            local_var_req_builder.query(&[("slug", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = asn {
        local_var_req_builder = local_var_req_builder.query(&[("asn", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = account {
        local_var_req_builder =
            local_var_req_builder.query(&[("account", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created {
        local_var_req_builder =
            local_var_req_builder.query(&[("created", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__gte {
        local_var_req_builder =
            local_var_req_builder.query(&[("created__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__lte {
        local_var_req_builder =
            local_var_req_builder.query(&[("created__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated {
        local_var_req_builder =
            local_var_req_builder.query(&[("last_updated", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__gte {
        local_var_req_builder =
            local_var_req_builder.query(&[("last_updated__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__lte {
        local_var_req_builder =
            local_var_req_builder.query(&[("last_updated__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__in {
        local_var_req_builder =
            local_var_req_builder.query(&[("id__in", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = q {
        local_var_req_builder = local_var_req_builder.query(&[("q", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = region_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("region_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = region {
        local_var_req_builder =
            local_var_req_builder.query(&[("region", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("site_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site {
        local_var_req_builder =
            local_var_req_builder.query(&[("site", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tag {
        local_var_req_builder = local_var_req_builder.query(&[("tag", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("name__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__ic {
        local_var_req_builder =
            local_var_req_builder.query(&[("name__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nic {
        local_var_req_builder =
            local_var_req_builder.query(&[("name__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__iew {
        local_var_req_builder =
            local_var_req_builder.query(&[("name__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__niew {
        local_var_req_builder =
            local_var_req_builder.query(&[("name__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__isw {
        local_var_req_builder =
            local_var_req_builder.query(&[("name__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nisw {
        local_var_req_builder =
            local_var_req_builder.query(&[("name__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__ie {
        local_var_req_builder =
            local_var_req_builder.query(&[("name__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nie {
        local_var_req_builder =
            local_var_req_builder.query(&[("name__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("slug__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__ic {
        local_var_req_builder =
            local_var_req_builder.query(&[("slug__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__nic {
        local_var_req_builder =
            local_var_req_builder.query(&[("slug__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__iew {
        local_var_req_builder =
            local_var_req_builder.query(&[("slug__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__niew {
        local_var_req_builder =
            local_var_req_builder.query(&[("slug__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__isw {
        local_var_req_builder =
            local_var_req_builder.query(&[("slug__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__nisw {
        local_var_req_builder =
            local_var_req_builder.query(&[("slug__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__ie {
        local_var_req_builder =
            local_var_req_builder.query(&[("slug__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__nie {
        local_var_req_builder =
            local_var_req_builder.query(&[("slug__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = asn__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("asn__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = asn__lte {
        local_var_req_builder =
            local_var_req_builder.query(&[("asn__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = asn__lt {
        local_var_req_builder =
            local_var_req_builder.query(&[("asn__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = asn__gte {
        local_var_req_builder =
            local_var_req_builder.query(&[("asn__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = asn__gt {
        local_var_req_builder =
            local_var_req_builder.query(&[("asn__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = account__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("account__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = account__ic {
        local_var_req_builder =
            local_var_req_builder.query(&[("account__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = account__nic {
        local_var_req_builder =
            local_var_req_builder.query(&[("account__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = account__iew {
        local_var_req_builder =
            local_var_req_builder.query(&[("account__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = account__niew {
        local_var_req_builder =
            local_var_req_builder.query(&[("account__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = account__isw {
        local_var_req_builder =
            local_var_req_builder.query(&[("account__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = account__nisw {
        local_var_req_builder =
            local_var_req_builder.query(&[("account__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = account__ie {
        local_var_req_builder =
            local_var_req_builder.query(&[("account__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = account__nie {
        local_var_req_builder =
            local_var_req_builder.query(&[("account__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = region_id__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("region_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = region__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("region__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site_id__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("site_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("site__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tag__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("tag__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder =
            local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = offset {
        local_var_req_builder =
            local_var_req_builder.query(&[("offset", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<CircuitsProvidersListError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn circuits_providers_partial_update(
    configuration: &configuration::Configuration,
    id: i32,
    data: crate::models::Provider,
) -> Result<crate::models::Provider, Error<CircuitsProvidersPartialUpdateError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!(
        "{}/circuits/providers/{id}/",
        configuration.base_path,
        id = id
    );
    let mut local_var_req_builder = local_var_client.patch(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<CircuitsProvidersPartialUpdateError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Call to super to allow for caching
pub async fn circuits_providers_read(
    configuration: &configuration::Configuration,
    id: i32,
) -> Result<crate::models::Provider, Error<CircuitsProvidersReadError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!(
        "{}/circuits/providers/{id}/",
        configuration.base_path,
        id = id
    );
    let mut local_var_req_builder = local_var_client.get(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<CircuitsProvidersReadError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn circuits_providers_update(
    configuration: &configuration::Configuration,
    id: i32,
    data: crate::models::Provider,
) -> Result<crate::models::Provider, Error<CircuitsProvidersUpdateError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!(
        "{}/circuits/providers/{id}/",
        configuration.base_path,
        id = id
    );
    let mut local_var_req_builder = local_var_client.put(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<CircuitsProvidersUpdateError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}
