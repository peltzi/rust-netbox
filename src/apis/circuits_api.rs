/*
 * NetBox API
 *
 * API to access NetBox
 *
 * The version of the OpenAPI document: 2.7
 *
 * Generated by: https://openapi-generator.tech
 */

use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;
use std::rc::Rc;

use reqwest;

use super::{configuration, Error};

pub struct CircuitsApiClient {
    configuration: Rc<configuration::Configuration>,
}

impl CircuitsApiClient {
    pub fn new(configuration: Rc<configuration::Configuration>) -> CircuitsApiClient {
        CircuitsApiClient { configuration }
    }
}

pub trait CircuitsApi {
    fn circuits_choices_list(&self) -> Result<(), Error>;
    fn circuits_choices_read(&self, id: &str) -> Result<(), Error>;
    fn circuits_circuit_terminations_create(
        &self,
        data: crate::models::WritableCircuitTermination,
    ) -> Result<crate::models::CircuitTermination, Error>;
    fn circuits_circuit_terminations_delete(&self, id: i32) -> Result<(), Error>;
    fn circuits_circuit_terminations_list(
        &self,
        term_side: Option<&str>,
        port_speed: Option<&str>,
        upstream_speed: Option<&str>,
        xconnect_id: Option<&str>,
        q: Option<&str>,
        circuit_id: Option<&str>,
        site_id: Option<&str>,
        site: Option<&str>,
        term_side__n: Option<&str>,
        port_speed__n: Option<&str>,
        port_speed__lte: Option<&str>,
        port_speed__lt: Option<&str>,
        port_speed__gte: Option<&str>,
        port_speed__gt: Option<&str>,
        upstream_speed__n: Option<&str>,
        upstream_speed__lte: Option<&str>,
        upstream_speed__lt: Option<&str>,
        upstream_speed__gte: Option<&str>,
        upstream_speed__gt: Option<&str>,
        xconnect_id__n: Option<&str>,
        xconnect_id__ic: Option<&str>,
        xconnect_id__nic: Option<&str>,
        xconnect_id__iew: Option<&str>,
        xconnect_id__niew: Option<&str>,
        xconnect_id__isw: Option<&str>,
        xconnect_id__nisw: Option<&str>,
        xconnect_id__ie: Option<&str>,
        xconnect_id__nie: Option<&str>,
        circuit_id__n: Option<&str>,
        site_id__n: Option<&str>,
        site__n: Option<&str>,
        limit: Option<i32>,
        offset: Option<i32>,
    ) -> Result<crate::models::InlineResponse200, Error>;
    fn circuits_circuit_terminations_partial_update(
        &self,
        id: i32,
        data: crate::models::WritableCircuitTermination,
    ) -> Result<crate::models::CircuitTermination, Error>;
    fn circuits_circuit_terminations_read(
        &self,
        id: i32,
    ) -> Result<crate::models::CircuitTermination, Error>;
    fn circuits_circuit_terminations_update(
        &self,
        id: i32,
        data: crate::models::WritableCircuitTermination,
    ) -> Result<crate::models::CircuitTermination, Error>;
    fn circuits_circuit_types_create(
        &self,
        data: crate::models::CircuitType,
    ) -> Result<crate::models::CircuitType, Error>;
    fn circuits_circuit_types_delete(&self, id: i32) -> Result<(), Error>;
    fn circuits_circuit_types_list(
        &self,
        id: Option<&str>,
        name: Option<&str>,
        slug: Option<&str>,
        q: Option<&str>,
        id__n: Option<&str>,
        id__lte: Option<&str>,
        id__lt: Option<&str>,
        id__gte: Option<&str>,
        id__gt: Option<&str>,
        name__n: Option<&str>,
        name__ic: Option<&str>,
        name__nic: Option<&str>,
        name__iew: Option<&str>,
        name__niew: Option<&str>,
        name__isw: Option<&str>,
        name__nisw: Option<&str>,
        name__ie: Option<&str>,
        name__nie: Option<&str>,
        slug__n: Option<&str>,
        slug__ic: Option<&str>,
        slug__nic: Option<&str>,
        slug__iew: Option<&str>,
        slug__niew: Option<&str>,
        slug__isw: Option<&str>,
        slug__nisw: Option<&str>,
        slug__ie: Option<&str>,
        slug__nie: Option<&str>,
        limit: Option<i32>,
        offset: Option<i32>,
    ) -> Result<crate::models::InlineResponse2001, Error>;
    fn circuits_circuit_types_partial_update(
        &self,
        id: i32,
        data: crate::models::CircuitType,
    ) -> Result<crate::models::CircuitType, Error>;
    fn circuits_circuit_types_read(&self, id: i32) -> Result<crate::models::CircuitType, Error>;
    fn circuits_circuit_types_update(
        &self,
        id: i32,
        data: crate::models::CircuitType,
    ) -> Result<crate::models::CircuitType, Error>;
    fn circuits_circuits_create(
        &self,
        data: crate::models::WritableCircuit,
    ) -> Result<crate::models::Circuit, Error>;
    fn circuits_circuits_delete(&self, id: i32) -> Result<(), Error>;
    fn circuits_circuits_list(
        &self,
        cid: Option<&str>,
        install_date: Option<&str>,
        commit_rate: Option<&str>,
        tenant_group_id: Option<&str>,
        tenant_group: Option<&str>,
        tenant_id: Option<&str>,
        tenant: Option<&str>,
        created: Option<&str>,
        created__gte: Option<&str>,
        created__lte: Option<&str>,
        last_updated: Option<&str>,
        last_updated__gte: Option<&str>,
        last_updated__lte: Option<&str>,
        id__in: Option<&str>,
        q: Option<&str>,
        provider_id: Option<&str>,
        provider: Option<&str>,
        type_id: Option<&str>,
        _type: Option<&str>,
        status: Option<&str>,
        site_id: Option<&str>,
        site: Option<&str>,
        region_id: Option<&str>,
        region: Option<&str>,
        tag: Option<&str>,
        cid__n: Option<&str>,
        cid__ic: Option<&str>,
        cid__nic: Option<&str>,
        cid__iew: Option<&str>,
        cid__niew: Option<&str>,
        cid__isw: Option<&str>,
        cid__nisw: Option<&str>,
        cid__ie: Option<&str>,
        cid__nie: Option<&str>,
        install_date__n: Option<&str>,
        install_date__lte: Option<&str>,
        install_date__lt: Option<&str>,
        install_date__gte: Option<&str>,
        install_date__gt: Option<&str>,
        commit_rate__n: Option<&str>,
        commit_rate__lte: Option<&str>,
        commit_rate__lt: Option<&str>,
        commit_rate__gte: Option<&str>,
        commit_rate__gt: Option<&str>,
        tenant_group_id__n: Option<&str>,
        tenant_group__n: Option<&str>,
        tenant_id__n: Option<&str>,
        tenant__n: Option<&str>,
        provider_id__n: Option<&str>,
        provider__n: Option<&str>,
        type_id__n: Option<&str>,
        type__n: Option<&str>,
        status__n: Option<&str>,
        site_id__n: Option<&str>,
        site__n: Option<&str>,
        region_id__n: Option<&str>,
        region__n: Option<&str>,
        tag__n: Option<&str>,
        limit: Option<i32>,
        offset: Option<i32>,
    ) -> Result<crate::models::InlineResponse2002, Error>;
    fn circuits_circuits_partial_update(
        &self,
        id: i32,
        data: crate::models::WritableCircuit,
    ) -> Result<crate::models::Circuit, Error>;
    fn circuits_circuits_read(&self, id: i32) -> Result<crate::models::Circuit, Error>;
    fn circuits_circuits_update(
        &self,
        id: i32,
        data: crate::models::WritableCircuit,
    ) -> Result<crate::models::Circuit, Error>;
    fn circuits_providers_create(
        &self,
        data: crate::models::Provider,
    ) -> Result<crate::models::Provider, Error>;
    fn circuits_providers_delete(&self, id: i32) -> Result<(), Error>;
    fn circuits_providers_graphs(&self, id: i32) -> Result<crate::models::Provider, Error>;
    fn circuits_providers_list(
        &self,
        name: Option<&str>,
        slug: Option<&str>,
        asn: Option<&str>,
        account: Option<&str>,
        created: Option<&str>,
        created__gte: Option<&str>,
        created__lte: Option<&str>,
        last_updated: Option<&str>,
        last_updated__gte: Option<&str>,
        last_updated__lte: Option<&str>,
        id__in: Option<&str>,
        q: Option<&str>,
        region_id: Option<&str>,
        region: Option<&str>,
        site_id: Option<&str>,
        site: Option<&str>,
        tag: Option<&str>,
        name__n: Option<&str>,
        name__ic: Option<&str>,
        name__nic: Option<&str>,
        name__iew: Option<&str>,
        name__niew: Option<&str>,
        name__isw: Option<&str>,
        name__nisw: Option<&str>,
        name__ie: Option<&str>,
        name__nie: Option<&str>,
        slug__n: Option<&str>,
        slug__ic: Option<&str>,
        slug__nic: Option<&str>,
        slug__iew: Option<&str>,
        slug__niew: Option<&str>,
        slug__isw: Option<&str>,
        slug__nisw: Option<&str>,
        slug__ie: Option<&str>,
        slug__nie: Option<&str>,
        asn__n: Option<&str>,
        asn__lte: Option<&str>,
        asn__lt: Option<&str>,
        asn__gte: Option<&str>,
        asn__gt: Option<&str>,
        account__n: Option<&str>,
        account__ic: Option<&str>,
        account__nic: Option<&str>,
        account__iew: Option<&str>,
        account__niew: Option<&str>,
        account__isw: Option<&str>,
        account__nisw: Option<&str>,
        account__ie: Option<&str>,
        account__nie: Option<&str>,
        region_id__n: Option<&str>,
        region__n: Option<&str>,
        site_id__n: Option<&str>,
        site__n: Option<&str>,
        tag__n: Option<&str>,
        limit: Option<i32>,
        offset: Option<i32>,
    ) -> Result<crate::models::InlineResponse2003, Error>;
    fn circuits_providers_partial_update(
        &self,
        id: i32,
        data: crate::models::Provider,
    ) -> Result<crate::models::Provider, Error>;
    fn circuits_providers_read(&self, id: i32) -> Result<crate::models::Provider, Error>;
    fn circuits_providers_update(
        &self,
        id: i32,
        data: crate::models::Provider,
    ) -> Result<crate::models::Provider, Error>;
}

impl CircuitsApi for CircuitsApiClient {
    fn circuits_choices_list(&self) -> Result<(), Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/circuits/_choices/", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        client.execute(req)?.error_for_status()?;
        Ok(())
    }

    fn circuits_choices_read(&self, id: &str) -> Result<(), Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/circuits/_choices/{id}/",
            configuration.base_path,
            id = crate::apis::urlencode(id)
        );
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        client.execute(req)?.error_for_status()?;
        Ok(())
    }

    fn circuits_circuit_terminations_create(
        &self,
        data: crate::models::WritableCircuitTermination,
    ) -> Result<crate::models::CircuitTermination, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/circuits/circuit-terminations/", configuration.base_path);
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn circuits_circuit_terminations_delete(&self, id: i32) -> Result<(), Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/circuits/circuit-terminations/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.delete(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        client.execute(req)?.error_for_status()?;
        Ok(())
    }

    fn circuits_circuit_terminations_list(
        &self,
        term_side: Option<&str>,
        port_speed: Option<&str>,
        upstream_speed: Option<&str>,
        xconnect_id: Option<&str>,
        q: Option<&str>,
        circuit_id: Option<&str>,
        site_id: Option<&str>,
        site: Option<&str>,
        term_side__n: Option<&str>,
        port_speed__n: Option<&str>,
        port_speed__lte: Option<&str>,
        port_speed__lt: Option<&str>,
        port_speed__gte: Option<&str>,
        port_speed__gt: Option<&str>,
        upstream_speed__n: Option<&str>,
        upstream_speed__lte: Option<&str>,
        upstream_speed__lt: Option<&str>,
        upstream_speed__gte: Option<&str>,
        upstream_speed__gt: Option<&str>,
        xconnect_id__n: Option<&str>,
        xconnect_id__ic: Option<&str>,
        xconnect_id__nic: Option<&str>,
        xconnect_id__iew: Option<&str>,
        xconnect_id__niew: Option<&str>,
        xconnect_id__isw: Option<&str>,
        xconnect_id__nisw: Option<&str>,
        xconnect_id__ie: Option<&str>,
        xconnect_id__nie: Option<&str>,
        circuit_id__n: Option<&str>,
        site_id__n: Option<&str>,
        site__n: Option<&str>,
        limit: Option<i32>,
        offset: Option<i32>,
    ) -> Result<crate::models::InlineResponse200, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/circuits/circuit-terminations/", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = term_side {
            req_builder = req_builder.query(&[("term_side", &s.to_string())]);
        }
        if let Some(ref s) = port_speed {
            req_builder = req_builder.query(&[("port_speed", &s.to_string())]);
        }
        if let Some(ref s) = upstream_speed {
            req_builder = req_builder.query(&[("upstream_speed", &s.to_string())]);
        }
        if let Some(ref s) = xconnect_id {
            req_builder = req_builder.query(&[("xconnect_id", &s.to_string())]);
        }
        if let Some(ref s) = q {
            req_builder = req_builder.query(&[("q", &s.to_string())]);
        }
        if let Some(ref s) = circuit_id {
            req_builder = req_builder.query(&[("circuit_id", &s.to_string())]);
        }
        if let Some(ref s) = site_id {
            req_builder = req_builder.query(&[("site_id", &s.to_string())]);
        }
        if let Some(ref s) = site {
            req_builder = req_builder.query(&[("site", &s.to_string())]);
        }
        if let Some(ref s) = term_side__n {
            req_builder = req_builder.query(&[("term_side__n", &s.to_string())]);
        }
        if let Some(ref s) = port_speed__n {
            req_builder = req_builder.query(&[("port_speed__n", &s.to_string())]);
        }
        if let Some(ref s) = port_speed__lte {
            req_builder = req_builder.query(&[("port_speed__lte", &s.to_string())]);
        }
        if let Some(ref s) = port_speed__lt {
            req_builder = req_builder.query(&[("port_speed__lt", &s.to_string())]);
        }
        if let Some(ref s) = port_speed__gte {
            req_builder = req_builder.query(&[("port_speed__gte", &s.to_string())]);
        }
        if let Some(ref s) = port_speed__gt {
            req_builder = req_builder.query(&[("port_speed__gt", &s.to_string())]);
        }
        if let Some(ref s) = upstream_speed__n {
            req_builder = req_builder.query(&[("upstream_speed__n", &s.to_string())]);
        }
        if let Some(ref s) = upstream_speed__lte {
            req_builder = req_builder.query(&[("upstream_speed__lte", &s.to_string())]);
        }
        if let Some(ref s) = upstream_speed__lt {
            req_builder = req_builder.query(&[("upstream_speed__lt", &s.to_string())]);
        }
        if let Some(ref s) = upstream_speed__gte {
            req_builder = req_builder.query(&[("upstream_speed__gte", &s.to_string())]);
        }
        if let Some(ref s) = upstream_speed__gt {
            req_builder = req_builder.query(&[("upstream_speed__gt", &s.to_string())]);
        }
        if let Some(ref s) = xconnect_id__n {
            req_builder = req_builder.query(&[("xconnect_id__n", &s.to_string())]);
        }
        if let Some(ref s) = xconnect_id__ic {
            req_builder = req_builder.query(&[("xconnect_id__ic", &s.to_string())]);
        }
        if let Some(ref s) = xconnect_id__nic {
            req_builder = req_builder.query(&[("xconnect_id__nic", &s.to_string())]);
        }
        if let Some(ref s) = xconnect_id__iew {
            req_builder = req_builder.query(&[("xconnect_id__iew", &s.to_string())]);
        }
        if let Some(ref s) = xconnect_id__niew {
            req_builder = req_builder.query(&[("xconnect_id__niew", &s.to_string())]);
        }
        if let Some(ref s) = xconnect_id__isw {
            req_builder = req_builder.query(&[("xconnect_id__isw", &s.to_string())]);
        }
        if let Some(ref s) = xconnect_id__nisw {
            req_builder = req_builder.query(&[("xconnect_id__nisw", &s.to_string())]);
        }
        if let Some(ref s) = xconnect_id__ie {
            req_builder = req_builder.query(&[("xconnect_id__ie", &s.to_string())]);
        }
        if let Some(ref s) = xconnect_id__nie {
            req_builder = req_builder.query(&[("xconnect_id__nie", &s.to_string())]);
        }
        if let Some(ref s) = circuit_id__n {
            req_builder = req_builder.query(&[("circuit_id__n", &s.to_string())]);
        }
        if let Some(ref s) = site_id__n {
            req_builder = req_builder.query(&[("site_id__n", &s.to_string())]);
        }
        if let Some(ref s) = site__n {
            req_builder = req_builder.query(&[("site__n", &s.to_string())]);
        }
        if let Some(ref s) = limit {
            req_builder = req_builder.query(&[("limit", &s.to_string())]);
        }
        if let Some(ref s) = offset {
            req_builder = req_builder.query(&[("offset", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn circuits_circuit_terminations_partial_update(
        &self,
        id: i32,
        data: crate::models::WritableCircuitTermination,
    ) -> Result<crate::models::CircuitTermination, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/circuits/circuit-terminations/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.patch(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn circuits_circuit_terminations_read(
        &self,
        id: i32,
    ) -> Result<crate::models::CircuitTermination, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/circuits/circuit-terminations/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn circuits_circuit_terminations_update(
        &self,
        id: i32,
        data: crate::models::WritableCircuitTermination,
    ) -> Result<crate::models::CircuitTermination, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/circuits/circuit-terminations/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.put(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn circuits_circuit_types_create(
        &self,
        data: crate::models::CircuitType,
    ) -> Result<crate::models::CircuitType, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/circuits/circuit-types/", configuration.base_path);
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn circuits_circuit_types_delete(&self, id: i32) -> Result<(), Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/circuits/circuit-types/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.delete(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        client.execute(req)?.error_for_status()?;
        Ok(())
    }

    fn circuits_circuit_types_list(
        &self,
        id: Option<&str>,
        name: Option<&str>,
        slug: Option<&str>,
        q: Option<&str>,
        id__n: Option<&str>,
        id__lte: Option<&str>,
        id__lt: Option<&str>,
        id__gte: Option<&str>,
        id__gt: Option<&str>,
        name__n: Option<&str>,
        name__ic: Option<&str>,
        name__nic: Option<&str>,
        name__iew: Option<&str>,
        name__niew: Option<&str>,
        name__isw: Option<&str>,
        name__nisw: Option<&str>,
        name__ie: Option<&str>,
        name__nie: Option<&str>,
        slug__n: Option<&str>,
        slug__ic: Option<&str>,
        slug__nic: Option<&str>,
        slug__iew: Option<&str>,
        slug__niew: Option<&str>,
        slug__isw: Option<&str>,
        slug__nisw: Option<&str>,
        slug__ie: Option<&str>,
        slug__nie: Option<&str>,
        limit: Option<i32>,
        offset: Option<i32>,
    ) -> Result<crate::models::InlineResponse2001, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/circuits/circuit-types/", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = id {
            req_builder = req_builder.query(&[("id", &s.to_string())]);
        }
        if let Some(ref s) = name {
            req_builder = req_builder.query(&[("name", &s.to_string())]);
        }
        if let Some(ref s) = slug {
            req_builder = req_builder.query(&[("slug", &s.to_string())]);
        }
        if let Some(ref s) = q {
            req_builder = req_builder.query(&[("q", &s.to_string())]);
        }
        if let Some(ref s) = id__n {
            req_builder = req_builder.query(&[("id__n", &s.to_string())]);
        }
        if let Some(ref s) = id__lte {
            req_builder = req_builder.query(&[("id__lte", &s.to_string())]);
        }
        if let Some(ref s) = id__lt {
            req_builder = req_builder.query(&[("id__lt", &s.to_string())]);
        }
        if let Some(ref s) = id__gte {
            req_builder = req_builder.query(&[("id__gte", &s.to_string())]);
        }
        if let Some(ref s) = id__gt {
            req_builder = req_builder.query(&[("id__gt", &s.to_string())]);
        }
        if let Some(ref s) = name__n {
            req_builder = req_builder.query(&[("name__n", &s.to_string())]);
        }
        if let Some(ref s) = name__ic {
            req_builder = req_builder.query(&[("name__ic", &s.to_string())]);
        }
        if let Some(ref s) = name__nic {
            req_builder = req_builder.query(&[("name__nic", &s.to_string())]);
        }
        if let Some(ref s) = name__iew {
            req_builder = req_builder.query(&[("name__iew", &s.to_string())]);
        }
        if let Some(ref s) = name__niew {
            req_builder = req_builder.query(&[("name__niew", &s.to_string())]);
        }
        if let Some(ref s) = name__isw {
            req_builder = req_builder.query(&[("name__isw", &s.to_string())]);
        }
        if let Some(ref s) = name__nisw {
            req_builder = req_builder.query(&[("name__nisw", &s.to_string())]);
        }
        if let Some(ref s) = name__ie {
            req_builder = req_builder.query(&[("name__ie", &s.to_string())]);
        }
        if let Some(ref s) = name__nie {
            req_builder = req_builder.query(&[("name__nie", &s.to_string())]);
        }
        if let Some(ref s) = slug__n {
            req_builder = req_builder.query(&[("slug__n", &s.to_string())]);
        }
        if let Some(ref s) = slug__ic {
            req_builder = req_builder.query(&[("slug__ic", &s.to_string())]);
        }
        if let Some(ref s) = slug__nic {
            req_builder = req_builder.query(&[("slug__nic", &s.to_string())]);
        }
        if let Some(ref s) = slug__iew {
            req_builder = req_builder.query(&[("slug__iew", &s.to_string())]);
        }
        if let Some(ref s) = slug__niew {
            req_builder = req_builder.query(&[("slug__niew", &s.to_string())]);
        }
        if let Some(ref s) = slug__isw {
            req_builder = req_builder.query(&[("slug__isw", &s.to_string())]);
        }
        if let Some(ref s) = slug__nisw {
            req_builder = req_builder.query(&[("slug__nisw", &s.to_string())]);
        }
        if let Some(ref s) = slug__ie {
            req_builder = req_builder.query(&[("slug__ie", &s.to_string())]);
        }
        if let Some(ref s) = slug__nie {
            req_builder = req_builder.query(&[("slug__nie", &s.to_string())]);
        }
        if let Some(ref s) = limit {
            req_builder = req_builder.query(&[("limit", &s.to_string())]);
        }
        if let Some(ref s) = offset {
            req_builder = req_builder.query(&[("offset", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn circuits_circuit_types_partial_update(
        &self,
        id: i32,
        data: crate::models::CircuitType,
    ) -> Result<crate::models::CircuitType, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/circuits/circuit-types/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.patch(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn circuits_circuit_types_read(&self, id: i32) -> Result<crate::models::CircuitType, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/circuits/circuit-types/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn circuits_circuit_types_update(
        &self,
        id: i32,
        data: crate::models::CircuitType,
    ) -> Result<crate::models::CircuitType, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/circuits/circuit-types/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.put(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn circuits_circuits_create(
        &self,
        data: crate::models::WritableCircuit,
    ) -> Result<crate::models::Circuit, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/circuits/circuits/", configuration.base_path);
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn circuits_circuits_delete(&self, id: i32) -> Result<(), Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/circuits/circuits/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.delete(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        client.execute(req)?.error_for_status()?;
        Ok(())
    }

    fn circuits_circuits_list(
        &self,
        cid: Option<&str>,
        install_date: Option<&str>,
        commit_rate: Option<&str>,
        tenant_group_id: Option<&str>,
        tenant_group: Option<&str>,
        tenant_id: Option<&str>,
        tenant: Option<&str>,
        created: Option<&str>,
        created__gte: Option<&str>,
        created__lte: Option<&str>,
        last_updated: Option<&str>,
        last_updated__gte: Option<&str>,
        last_updated__lte: Option<&str>,
        id__in: Option<&str>,
        q: Option<&str>,
        provider_id: Option<&str>,
        provider: Option<&str>,
        type_id: Option<&str>,
        _type: Option<&str>,
        status: Option<&str>,
        site_id: Option<&str>,
        site: Option<&str>,
        region_id: Option<&str>,
        region: Option<&str>,
        tag: Option<&str>,
        cid__n: Option<&str>,
        cid__ic: Option<&str>,
        cid__nic: Option<&str>,
        cid__iew: Option<&str>,
        cid__niew: Option<&str>,
        cid__isw: Option<&str>,
        cid__nisw: Option<&str>,
        cid__ie: Option<&str>,
        cid__nie: Option<&str>,
        install_date__n: Option<&str>,
        install_date__lte: Option<&str>,
        install_date__lt: Option<&str>,
        install_date__gte: Option<&str>,
        install_date__gt: Option<&str>,
        commit_rate__n: Option<&str>,
        commit_rate__lte: Option<&str>,
        commit_rate__lt: Option<&str>,
        commit_rate__gte: Option<&str>,
        commit_rate__gt: Option<&str>,
        tenant_group_id__n: Option<&str>,
        tenant_group__n: Option<&str>,
        tenant_id__n: Option<&str>,
        tenant__n: Option<&str>,
        provider_id__n: Option<&str>,
        provider__n: Option<&str>,
        type_id__n: Option<&str>,
        type__n: Option<&str>,
        status__n: Option<&str>,
        site_id__n: Option<&str>,
        site__n: Option<&str>,
        region_id__n: Option<&str>,
        region__n: Option<&str>,
        tag__n: Option<&str>,
        limit: Option<i32>,
        offset: Option<i32>,
    ) -> Result<crate::models::InlineResponse2002, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/circuits/circuits/", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = cid {
            req_builder = req_builder.query(&[("cid", &s.to_string())]);
        }
        if let Some(ref s) = install_date {
            req_builder = req_builder.query(&[("install_date", &s.to_string())]);
        }
        if let Some(ref s) = commit_rate {
            req_builder = req_builder.query(&[("commit_rate", &s.to_string())]);
        }
        if let Some(ref s) = tenant_group_id {
            req_builder = req_builder.query(&[("tenant_group_id", &s.to_string())]);
        }
        if let Some(ref s) = tenant_group {
            req_builder = req_builder.query(&[("tenant_group", &s.to_string())]);
        }
        if let Some(ref s) = tenant_id {
            req_builder = req_builder.query(&[("tenant_id", &s.to_string())]);
        }
        if let Some(ref s) = tenant {
            req_builder = req_builder.query(&[("tenant", &s.to_string())]);
        }
        if let Some(ref s) = created {
            req_builder = req_builder.query(&[("created", &s.to_string())]);
        }
        if let Some(ref s) = created__gte {
            req_builder = req_builder.query(&[("created__gte", &s.to_string())]);
        }
        if let Some(ref s) = created__lte {
            req_builder = req_builder.query(&[("created__lte", &s.to_string())]);
        }
        if let Some(ref s) = last_updated {
            req_builder = req_builder.query(&[("last_updated", &s.to_string())]);
        }
        if let Some(ref s) = last_updated__gte {
            req_builder = req_builder.query(&[("last_updated__gte", &s.to_string())]);
        }
        if let Some(ref s) = last_updated__lte {
            req_builder = req_builder.query(&[("last_updated__lte", &s.to_string())]);
        }
        if let Some(ref s) = id__in {
            req_builder = req_builder.query(&[("id__in", &s.to_string())]);
        }
        if let Some(ref s) = q {
            req_builder = req_builder.query(&[("q", &s.to_string())]);
        }
        if let Some(ref s) = provider_id {
            req_builder = req_builder.query(&[("provider_id", &s.to_string())]);
        }
        if let Some(ref s) = provider {
            req_builder = req_builder.query(&[("provider", &s.to_string())]);
        }
        if let Some(ref s) = type_id {
            req_builder = req_builder.query(&[("type_id", &s.to_string())]);
        }
        if let Some(ref s) = _type {
            req_builder = req_builder.query(&[("type", &s.to_string())]);
        }
        if let Some(ref s) = status {
            req_builder = req_builder.query(&[("status", &s.to_string())]);
        }
        if let Some(ref s) = site_id {
            req_builder = req_builder.query(&[("site_id", &s.to_string())]);
        }
        if let Some(ref s) = site {
            req_builder = req_builder.query(&[("site", &s.to_string())]);
        }
        if let Some(ref s) = region_id {
            req_builder = req_builder.query(&[("region_id", &s.to_string())]);
        }
        if let Some(ref s) = region {
            req_builder = req_builder.query(&[("region", &s.to_string())]);
        }
        if let Some(ref s) = tag {
            req_builder = req_builder.query(&[("tag", &s.to_string())]);
        }
        if let Some(ref s) = cid__n {
            req_builder = req_builder.query(&[("cid__n", &s.to_string())]);
        }
        if let Some(ref s) = cid__ic {
            req_builder = req_builder.query(&[("cid__ic", &s.to_string())]);
        }
        if let Some(ref s) = cid__nic {
            req_builder = req_builder.query(&[("cid__nic", &s.to_string())]);
        }
        if let Some(ref s) = cid__iew {
            req_builder = req_builder.query(&[("cid__iew", &s.to_string())]);
        }
        if let Some(ref s) = cid__niew {
            req_builder = req_builder.query(&[("cid__niew", &s.to_string())]);
        }
        if let Some(ref s) = cid__isw {
            req_builder = req_builder.query(&[("cid__isw", &s.to_string())]);
        }
        if let Some(ref s) = cid__nisw {
            req_builder = req_builder.query(&[("cid__nisw", &s.to_string())]);
        }
        if let Some(ref s) = cid__ie {
            req_builder = req_builder.query(&[("cid__ie", &s.to_string())]);
        }
        if let Some(ref s) = cid__nie {
            req_builder = req_builder.query(&[("cid__nie", &s.to_string())]);
        }
        if let Some(ref s) = install_date__n {
            req_builder = req_builder.query(&[("install_date__n", &s.to_string())]);
        }
        if let Some(ref s) = install_date__lte {
            req_builder = req_builder.query(&[("install_date__lte", &s.to_string())]);
        }
        if let Some(ref s) = install_date__lt {
            req_builder = req_builder.query(&[("install_date__lt", &s.to_string())]);
        }
        if let Some(ref s) = install_date__gte {
            req_builder = req_builder.query(&[("install_date__gte", &s.to_string())]);
        }
        if let Some(ref s) = install_date__gt {
            req_builder = req_builder.query(&[("install_date__gt", &s.to_string())]);
        }
        if let Some(ref s) = commit_rate__n {
            req_builder = req_builder.query(&[("commit_rate__n", &s.to_string())]);
        }
        if let Some(ref s) = commit_rate__lte {
            req_builder = req_builder.query(&[("commit_rate__lte", &s.to_string())]);
        }
        if let Some(ref s) = commit_rate__lt {
            req_builder = req_builder.query(&[("commit_rate__lt", &s.to_string())]);
        }
        if let Some(ref s) = commit_rate__gte {
            req_builder = req_builder.query(&[("commit_rate__gte", &s.to_string())]);
        }
        if let Some(ref s) = commit_rate__gt {
            req_builder = req_builder.query(&[("commit_rate__gt", &s.to_string())]);
        }
        if let Some(ref s) = tenant_group_id__n {
            req_builder = req_builder.query(&[("tenant_group_id__n", &s.to_string())]);
        }
        if let Some(ref s) = tenant_group__n {
            req_builder = req_builder.query(&[("tenant_group__n", &s.to_string())]);
        }
        if let Some(ref s) = tenant_id__n {
            req_builder = req_builder.query(&[("tenant_id__n", &s.to_string())]);
        }
        if let Some(ref s) = tenant__n {
            req_builder = req_builder.query(&[("tenant__n", &s.to_string())]);
        }
        if let Some(ref s) = provider_id__n {
            req_builder = req_builder.query(&[("provider_id__n", &s.to_string())]);
        }
        if let Some(ref s) = provider__n {
            req_builder = req_builder.query(&[("provider__n", &s.to_string())]);
        }
        if let Some(ref s) = type_id__n {
            req_builder = req_builder.query(&[("type_id__n", &s.to_string())]);
        }
        if let Some(ref s) = type__n {
            req_builder = req_builder.query(&[("type__n", &s.to_string())]);
        }
        if let Some(ref s) = status__n {
            req_builder = req_builder.query(&[("status__n", &s.to_string())]);
        }
        if let Some(ref s) = site_id__n {
            req_builder = req_builder.query(&[("site_id__n", &s.to_string())]);
        }
        if let Some(ref s) = site__n {
            req_builder = req_builder.query(&[("site__n", &s.to_string())]);
        }
        if let Some(ref s) = region_id__n {
            req_builder = req_builder.query(&[("region_id__n", &s.to_string())]);
        }
        if let Some(ref s) = region__n {
            req_builder = req_builder.query(&[("region__n", &s.to_string())]);
        }
        if let Some(ref s) = tag__n {
            req_builder = req_builder.query(&[("tag__n", &s.to_string())]);
        }
        if let Some(ref s) = limit {
            req_builder = req_builder.query(&[("limit", &s.to_string())]);
        }
        if let Some(ref s) = offset {
            req_builder = req_builder.query(&[("offset", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn circuits_circuits_partial_update(
        &self,
        id: i32,
        data: crate::models::WritableCircuit,
    ) -> Result<crate::models::Circuit, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/circuits/circuits/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.patch(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn circuits_circuits_read(&self, id: i32) -> Result<crate::models::Circuit, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/circuits/circuits/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn circuits_circuits_update(
        &self,
        id: i32,
        data: crate::models::WritableCircuit,
    ) -> Result<crate::models::Circuit, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/circuits/circuits/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.put(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn circuits_providers_create(
        &self,
        data: crate::models::Provider,
    ) -> Result<crate::models::Provider, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/circuits/providers/", configuration.base_path);
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn circuits_providers_delete(&self, id: i32) -> Result<(), Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/circuits/providers/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.delete(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        client.execute(req)?.error_for_status()?;
        Ok(())
    }

    fn circuits_providers_graphs(&self, id: i32) -> Result<crate::models::Provider, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/circuits/providers/{id}/graphs/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn circuits_providers_list(
        &self,
        name: Option<&str>,
        slug: Option<&str>,
        asn: Option<&str>,
        account: Option<&str>,
        created: Option<&str>,
        created__gte: Option<&str>,
        created__lte: Option<&str>,
        last_updated: Option<&str>,
        last_updated__gte: Option<&str>,
        last_updated__lte: Option<&str>,
        id__in: Option<&str>,
        q: Option<&str>,
        region_id: Option<&str>,
        region: Option<&str>,
        site_id: Option<&str>,
        site: Option<&str>,
        tag: Option<&str>,
        name__n: Option<&str>,
        name__ic: Option<&str>,
        name__nic: Option<&str>,
        name__iew: Option<&str>,
        name__niew: Option<&str>,
        name__isw: Option<&str>,
        name__nisw: Option<&str>,
        name__ie: Option<&str>,
        name__nie: Option<&str>,
        slug__n: Option<&str>,
        slug__ic: Option<&str>,
        slug__nic: Option<&str>,
        slug__iew: Option<&str>,
        slug__niew: Option<&str>,
        slug__isw: Option<&str>,
        slug__nisw: Option<&str>,
        slug__ie: Option<&str>,
        slug__nie: Option<&str>,
        asn__n: Option<&str>,
        asn__lte: Option<&str>,
        asn__lt: Option<&str>,
        asn__gte: Option<&str>,
        asn__gt: Option<&str>,
        account__n: Option<&str>,
        account__ic: Option<&str>,
        account__nic: Option<&str>,
        account__iew: Option<&str>,
        account__niew: Option<&str>,
        account__isw: Option<&str>,
        account__nisw: Option<&str>,
        account__ie: Option<&str>,
        account__nie: Option<&str>,
        region_id__n: Option<&str>,
        region__n: Option<&str>,
        site_id__n: Option<&str>,
        site__n: Option<&str>,
        tag__n: Option<&str>,
        limit: Option<i32>,
        offset: Option<i32>,
    ) -> Result<crate::models::InlineResponse2003, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/circuits/providers/", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = name {
            req_builder = req_builder.query(&[("name", &s.to_string())]);
        }
        if let Some(ref s) = slug {
            req_builder = req_builder.query(&[("slug", &s.to_string())]);
        }
        if let Some(ref s) = asn {
            req_builder = req_builder.query(&[("asn", &s.to_string())]);
        }
        if let Some(ref s) = account {
            req_builder = req_builder.query(&[("account", &s.to_string())]);
        }
        if let Some(ref s) = created {
            req_builder = req_builder.query(&[("created", &s.to_string())]);
        }
        if let Some(ref s) = created__gte {
            req_builder = req_builder.query(&[("created__gte", &s.to_string())]);
        }
        if let Some(ref s) = created__lte {
            req_builder = req_builder.query(&[("created__lte", &s.to_string())]);
        }
        if let Some(ref s) = last_updated {
            req_builder = req_builder.query(&[("last_updated", &s.to_string())]);
        }
        if let Some(ref s) = last_updated__gte {
            req_builder = req_builder.query(&[("last_updated__gte", &s.to_string())]);
        }
        if let Some(ref s) = last_updated__lte {
            req_builder = req_builder.query(&[("last_updated__lte", &s.to_string())]);
        }
        if let Some(ref s) = id__in {
            req_builder = req_builder.query(&[("id__in", &s.to_string())]);
        }
        if let Some(ref s) = q {
            req_builder = req_builder.query(&[("q", &s.to_string())]);
        }
        if let Some(ref s) = region_id {
            req_builder = req_builder.query(&[("region_id", &s.to_string())]);
        }
        if let Some(ref s) = region {
            req_builder = req_builder.query(&[("region", &s.to_string())]);
        }
        if let Some(ref s) = site_id {
            req_builder = req_builder.query(&[("site_id", &s.to_string())]);
        }
        if let Some(ref s) = site {
            req_builder = req_builder.query(&[("site", &s.to_string())]);
        }
        if let Some(ref s) = tag {
            req_builder = req_builder.query(&[("tag", &s.to_string())]);
        }
        if let Some(ref s) = name__n {
            req_builder = req_builder.query(&[("name__n", &s.to_string())]);
        }
        if let Some(ref s) = name__ic {
            req_builder = req_builder.query(&[("name__ic", &s.to_string())]);
        }
        if let Some(ref s) = name__nic {
            req_builder = req_builder.query(&[("name__nic", &s.to_string())]);
        }
        if let Some(ref s) = name__iew {
            req_builder = req_builder.query(&[("name__iew", &s.to_string())]);
        }
        if let Some(ref s) = name__niew {
            req_builder = req_builder.query(&[("name__niew", &s.to_string())]);
        }
        if let Some(ref s) = name__isw {
            req_builder = req_builder.query(&[("name__isw", &s.to_string())]);
        }
        if let Some(ref s) = name__nisw {
            req_builder = req_builder.query(&[("name__nisw", &s.to_string())]);
        }
        if let Some(ref s) = name__ie {
            req_builder = req_builder.query(&[("name__ie", &s.to_string())]);
        }
        if let Some(ref s) = name__nie {
            req_builder = req_builder.query(&[("name__nie", &s.to_string())]);
        }
        if let Some(ref s) = slug__n {
            req_builder = req_builder.query(&[("slug__n", &s.to_string())]);
        }
        if let Some(ref s) = slug__ic {
            req_builder = req_builder.query(&[("slug__ic", &s.to_string())]);
        }
        if let Some(ref s) = slug__nic {
            req_builder = req_builder.query(&[("slug__nic", &s.to_string())]);
        }
        if let Some(ref s) = slug__iew {
            req_builder = req_builder.query(&[("slug__iew", &s.to_string())]);
        }
        if let Some(ref s) = slug__niew {
            req_builder = req_builder.query(&[("slug__niew", &s.to_string())]);
        }
        if let Some(ref s) = slug__isw {
            req_builder = req_builder.query(&[("slug__isw", &s.to_string())]);
        }
        if let Some(ref s) = slug__nisw {
            req_builder = req_builder.query(&[("slug__nisw", &s.to_string())]);
        }
        if let Some(ref s) = slug__ie {
            req_builder = req_builder.query(&[("slug__ie", &s.to_string())]);
        }
        if let Some(ref s) = slug__nie {
            req_builder = req_builder.query(&[("slug__nie", &s.to_string())]);
        }
        if let Some(ref s) = asn__n {
            req_builder = req_builder.query(&[("asn__n", &s.to_string())]);
        }
        if let Some(ref s) = asn__lte {
            req_builder = req_builder.query(&[("asn__lte", &s.to_string())]);
        }
        if let Some(ref s) = asn__lt {
            req_builder = req_builder.query(&[("asn__lt", &s.to_string())]);
        }
        if let Some(ref s) = asn__gte {
            req_builder = req_builder.query(&[("asn__gte", &s.to_string())]);
        }
        if let Some(ref s) = asn__gt {
            req_builder = req_builder.query(&[("asn__gt", &s.to_string())]);
        }
        if let Some(ref s) = account__n {
            req_builder = req_builder.query(&[("account__n", &s.to_string())]);
        }
        if let Some(ref s) = account__ic {
            req_builder = req_builder.query(&[("account__ic", &s.to_string())]);
        }
        if let Some(ref s) = account__nic {
            req_builder = req_builder.query(&[("account__nic", &s.to_string())]);
        }
        if let Some(ref s) = account__iew {
            req_builder = req_builder.query(&[("account__iew", &s.to_string())]);
        }
        if let Some(ref s) = account__niew {
            req_builder = req_builder.query(&[("account__niew", &s.to_string())]);
        }
        if let Some(ref s) = account__isw {
            req_builder = req_builder.query(&[("account__isw", &s.to_string())]);
        }
        if let Some(ref s) = account__nisw {
            req_builder = req_builder.query(&[("account__nisw", &s.to_string())]);
        }
        if let Some(ref s) = account__ie {
            req_builder = req_builder.query(&[("account__ie", &s.to_string())]);
        }
        if let Some(ref s) = account__nie {
            req_builder = req_builder.query(&[("account__nie", &s.to_string())]);
        }
        if let Some(ref s) = region_id__n {
            req_builder = req_builder.query(&[("region_id__n", &s.to_string())]);
        }
        if let Some(ref s) = region__n {
            req_builder = req_builder.query(&[("region__n", &s.to_string())]);
        }
        if let Some(ref s) = site_id__n {
            req_builder = req_builder.query(&[("site_id__n", &s.to_string())]);
        }
        if let Some(ref s) = site__n {
            req_builder = req_builder.query(&[("site__n", &s.to_string())]);
        }
        if let Some(ref s) = tag__n {
            req_builder = req_builder.query(&[("tag__n", &s.to_string())]);
        }
        if let Some(ref s) = limit {
            req_builder = req_builder.query(&[("limit", &s.to_string())]);
        }
        if let Some(ref s) = offset {
            req_builder = req_builder.query(&[("offset", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn circuits_providers_partial_update(
        &self,
        id: i32,
        data: crate::models::Provider,
    ) -> Result<crate::models::Provider, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/circuits/providers/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.patch(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn circuits_providers_read(&self, id: i32) -> Result<crate::models::Provider, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/circuits/providers/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn circuits_providers_update(
        &self,
        id: i32,
        data: crate::models::Provider,
    ) -> Result<crate::models::Provider, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/circuits/providers/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.put(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }
}
