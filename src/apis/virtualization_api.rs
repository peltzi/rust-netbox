/*
 * NetBox API
 *
 * API to access NetBox
 *
 * The version of the OpenAPI document: 2.7
 *
 * Generated by: https://openapi-generator.tech
 */

use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;
use std::rc::Rc;

use reqwest;

use super::{configuration, Error};

pub struct VirtualizationApiClient {
    configuration: Rc<configuration::Configuration>,
}

impl VirtualizationApiClient {
    pub fn new(configuration: Rc<configuration::Configuration>) -> VirtualizationApiClient {
        VirtualizationApiClient { configuration }
    }
}

pub trait VirtualizationApi {
    fn virtualization_choices_list(&self) -> Result<(), Error>;
    fn virtualization_choices_read(&self, id: &str) -> Result<(), Error>;
    fn virtualization_cluster_groups_create(
        &self,
        data: crate::models::ClusterGroup,
    ) -> Result<crate::models::ClusterGroup, Error>;
    fn virtualization_cluster_groups_delete(&self, id: i32) -> Result<(), Error>;
    fn virtualization_cluster_groups_list(
        &self,
        id: Option<&str>,
        name: Option<&str>,
        slug: Option<&str>,
        q: Option<&str>,
        id__n: Option<&str>,
        id__lte: Option<&str>,
        id__lt: Option<&str>,
        id__gte: Option<&str>,
        id__gt: Option<&str>,
        name__n: Option<&str>,
        name__ic: Option<&str>,
        name__nic: Option<&str>,
        name__iew: Option<&str>,
        name__niew: Option<&str>,
        name__isw: Option<&str>,
        name__nisw: Option<&str>,
        name__ie: Option<&str>,
        name__nie: Option<&str>,
        slug__n: Option<&str>,
        slug__ic: Option<&str>,
        slug__nic: Option<&str>,
        slug__iew: Option<&str>,
        slug__niew: Option<&str>,
        slug__isw: Option<&str>,
        slug__nisw: Option<&str>,
        slug__ie: Option<&str>,
        slug__nie: Option<&str>,
        limit: Option<i32>,
        offset: Option<i32>,
    ) -> Result<crate::models::InlineResponse20056, Error>;
    fn virtualization_cluster_groups_partial_update(
        &self,
        id: i32,
        data: crate::models::ClusterGroup,
    ) -> Result<crate::models::ClusterGroup, Error>;
    fn virtualization_cluster_groups_read(
        &self,
        id: i32,
    ) -> Result<crate::models::ClusterGroup, Error>;
    fn virtualization_cluster_groups_update(
        &self,
        id: i32,
        data: crate::models::ClusterGroup,
    ) -> Result<crate::models::ClusterGroup, Error>;
    fn virtualization_cluster_types_create(
        &self,
        data: crate::models::ClusterType,
    ) -> Result<crate::models::ClusterType, Error>;
    fn virtualization_cluster_types_delete(&self, id: i32) -> Result<(), Error>;
    fn virtualization_cluster_types_list(
        &self,
        id: Option<&str>,
        name: Option<&str>,
        slug: Option<&str>,
        q: Option<&str>,
        id__n: Option<&str>,
        id__lte: Option<&str>,
        id__lt: Option<&str>,
        id__gte: Option<&str>,
        id__gt: Option<&str>,
        name__n: Option<&str>,
        name__ic: Option<&str>,
        name__nic: Option<&str>,
        name__iew: Option<&str>,
        name__niew: Option<&str>,
        name__isw: Option<&str>,
        name__nisw: Option<&str>,
        name__ie: Option<&str>,
        name__nie: Option<&str>,
        slug__n: Option<&str>,
        slug__ic: Option<&str>,
        slug__nic: Option<&str>,
        slug__iew: Option<&str>,
        slug__niew: Option<&str>,
        slug__isw: Option<&str>,
        slug__nisw: Option<&str>,
        slug__ie: Option<&str>,
        slug__nie: Option<&str>,
        limit: Option<i32>,
        offset: Option<i32>,
    ) -> Result<crate::models::InlineResponse20057, Error>;
    fn virtualization_cluster_types_partial_update(
        &self,
        id: i32,
        data: crate::models::ClusterType,
    ) -> Result<crate::models::ClusterType, Error>;
    fn virtualization_cluster_types_read(
        &self,
        id: i32,
    ) -> Result<crate::models::ClusterType, Error>;
    fn virtualization_cluster_types_update(
        &self,
        id: i32,
        data: crate::models::ClusterType,
    ) -> Result<crate::models::ClusterType, Error>;
    fn virtualization_clusters_create(
        &self,
        data: crate::models::WritableCluster,
    ) -> Result<crate::models::Cluster, Error>;
    fn virtualization_clusters_delete(&self, id: i32) -> Result<(), Error>;
    fn virtualization_clusters_list(
        &self,
        name: Option<&str>,
        tenant_group_id: Option<&str>,
        tenant_group: Option<&str>,
        tenant_id: Option<&str>,
        tenant: Option<&str>,
        created: Option<&str>,
        created__gte: Option<&str>,
        created__lte: Option<&str>,
        last_updated: Option<&str>,
        last_updated__gte: Option<&str>,
        last_updated__lte: Option<&str>,
        id__in: Option<&str>,
        q: Option<&str>,
        region_id: Option<&str>,
        region: Option<&str>,
        site_id: Option<&str>,
        site: Option<&str>,
        group_id: Option<&str>,
        group: Option<&str>,
        type_id: Option<&str>,
        _type: Option<&str>,
        tag: Option<&str>,
        name__n: Option<&str>,
        name__ic: Option<&str>,
        name__nic: Option<&str>,
        name__iew: Option<&str>,
        name__niew: Option<&str>,
        name__isw: Option<&str>,
        name__nisw: Option<&str>,
        name__ie: Option<&str>,
        name__nie: Option<&str>,
        tenant_group_id__n: Option<&str>,
        tenant_group__n: Option<&str>,
        tenant_id__n: Option<&str>,
        tenant__n: Option<&str>,
        region_id__n: Option<&str>,
        region__n: Option<&str>,
        site_id__n: Option<&str>,
        site__n: Option<&str>,
        group_id__n: Option<&str>,
        group__n: Option<&str>,
        type_id__n: Option<&str>,
        type__n: Option<&str>,
        tag__n: Option<&str>,
        limit: Option<i32>,
        offset: Option<i32>,
    ) -> Result<crate::models::InlineResponse20058, Error>;
    fn virtualization_clusters_partial_update(
        &self,
        id: i32,
        data: crate::models::WritableCluster,
    ) -> Result<crate::models::Cluster, Error>;
    fn virtualization_clusters_read(&self, id: i32) -> Result<crate::models::Cluster, Error>;
    fn virtualization_clusters_update(
        &self,
        id: i32,
        data: crate::models::WritableCluster,
    ) -> Result<crate::models::Cluster, Error>;
    fn virtualization_interfaces_create(
        &self,
        data: crate::models::WritableVirtualMachineInterface,
    ) -> Result<crate::models::VirtualMachineInterface, Error>;
    fn virtualization_interfaces_delete(&self, id: i32) -> Result<(), Error>;
    fn virtualization_interfaces_list(
        &self,
        id: Option<&str>,
        name: Option<&str>,
        enabled: Option<&str>,
        mtu: Option<&str>,
        q: Option<&str>,
        virtual_machine_id: Option<&str>,
        virtual_machine: Option<&str>,
        mac_address: Option<&str>,
        id__n: Option<&str>,
        id__lte: Option<&str>,
        id__lt: Option<&str>,
        id__gte: Option<&str>,
        id__gt: Option<&str>,
        name__n: Option<&str>,
        name__ic: Option<&str>,
        name__nic: Option<&str>,
        name__iew: Option<&str>,
        name__niew: Option<&str>,
        name__isw: Option<&str>,
        name__nisw: Option<&str>,
        name__ie: Option<&str>,
        name__nie: Option<&str>,
        mtu__n: Option<&str>,
        mtu__lte: Option<&str>,
        mtu__lt: Option<&str>,
        mtu__gte: Option<&str>,
        mtu__gt: Option<&str>,
        virtual_machine_id__n: Option<&str>,
        virtual_machine__n: Option<&str>,
        mac_address__n: Option<&str>,
        mac_address__ic: Option<&str>,
        mac_address__nic: Option<&str>,
        mac_address__iew: Option<&str>,
        mac_address__niew: Option<&str>,
        mac_address__isw: Option<&str>,
        mac_address__nisw: Option<&str>,
        mac_address__ie: Option<&str>,
        mac_address__nie: Option<&str>,
        limit: Option<i32>,
        offset: Option<i32>,
    ) -> Result<crate::models::InlineResponse20059, Error>;
    fn virtualization_interfaces_partial_update(
        &self,
        id: i32,
        data: crate::models::WritableVirtualMachineInterface,
    ) -> Result<crate::models::VirtualMachineInterface, Error>;
    fn virtualization_interfaces_read(
        &self,
        id: i32,
    ) -> Result<crate::models::VirtualMachineInterface, Error>;
    fn virtualization_interfaces_update(
        &self,
        id: i32,
        data: crate::models::WritableVirtualMachineInterface,
    ) -> Result<crate::models::VirtualMachineInterface, Error>;
    fn virtualization_virtual_machines_create(
        &self,
        data: crate::models::WritableVirtualMachineWithConfigContext,
    ) -> Result<crate::models::VirtualMachineWithConfigContext, Error>;
    fn virtualization_virtual_machines_delete(&self, id: i32) -> Result<(), Error>;
    fn virtualization_virtual_machines_list(
        &self,
        id: Option<&str>,
        name: Option<&str>,
        cluster: Option<&str>,
        vcpus: Option<&str>,
        memory: Option<&str>,
        disk: Option<&str>,
        local_context_data: Option<&str>,
        tenant_group_id: Option<&str>,
        tenant_group: Option<&str>,
        tenant_id: Option<&str>,
        tenant: Option<&str>,
        created: Option<&str>,
        created__gte: Option<&str>,
        created__lte: Option<&str>,
        last_updated: Option<&str>,
        last_updated__gte: Option<&str>,
        last_updated__lte: Option<&str>,
        id__in: Option<&str>,
        q: Option<&str>,
        status: Option<&str>,
        cluster_group_id: Option<&str>,
        cluster_group: Option<&str>,
        cluster_type_id: Option<&str>,
        cluster_type: Option<&str>,
        cluster_id: Option<&str>,
        region_id: Option<&str>,
        region: Option<&str>,
        site_id: Option<&str>,
        site: Option<&str>,
        role_id: Option<&str>,
        role: Option<&str>,
        platform_id: Option<&str>,
        platform: Option<&str>,
        mac_address: Option<&str>,
        tag: Option<&str>,
        id__n: Option<&str>,
        id__lte: Option<&str>,
        id__lt: Option<&str>,
        id__gte: Option<&str>,
        id__gt: Option<&str>,
        name__n: Option<&str>,
        name__ic: Option<&str>,
        name__nic: Option<&str>,
        name__iew: Option<&str>,
        name__niew: Option<&str>,
        name__isw: Option<&str>,
        name__nisw: Option<&str>,
        name__ie: Option<&str>,
        name__nie: Option<&str>,
        cluster__n: Option<&str>,
        vcpus__n: Option<&str>,
        vcpus__lte: Option<&str>,
        vcpus__lt: Option<&str>,
        vcpus__gte: Option<&str>,
        vcpus__gt: Option<&str>,
        memory__n: Option<&str>,
        memory__lte: Option<&str>,
        memory__lt: Option<&str>,
        memory__gte: Option<&str>,
        memory__gt: Option<&str>,
        disk__n: Option<&str>,
        disk__lte: Option<&str>,
        disk__lt: Option<&str>,
        disk__gte: Option<&str>,
        disk__gt: Option<&str>,
        tenant_group_id__n: Option<&str>,
        tenant_group__n: Option<&str>,
        tenant_id__n: Option<&str>,
        tenant__n: Option<&str>,
        status__n: Option<&str>,
        cluster_group_id__n: Option<&str>,
        cluster_group__n: Option<&str>,
        cluster_type_id__n: Option<&str>,
        cluster_type__n: Option<&str>,
        cluster_id__n: Option<&str>,
        region_id__n: Option<&str>,
        region__n: Option<&str>,
        site_id__n: Option<&str>,
        site__n: Option<&str>,
        role_id__n: Option<&str>,
        role__n: Option<&str>,
        platform_id__n: Option<&str>,
        platform__n: Option<&str>,
        mac_address__n: Option<&str>,
        mac_address__ic: Option<&str>,
        mac_address__nic: Option<&str>,
        mac_address__iew: Option<&str>,
        mac_address__niew: Option<&str>,
        mac_address__isw: Option<&str>,
        mac_address__nisw: Option<&str>,
        mac_address__ie: Option<&str>,
        mac_address__nie: Option<&str>,
        tag__n: Option<&str>,
        limit: Option<i32>,
        offset: Option<i32>,
    ) -> Result<crate::models::InlineResponse20060, Error>;
    fn virtualization_virtual_machines_partial_update(
        &self,
        id: i32,
        data: crate::models::WritableVirtualMachineWithConfigContext,
    ) -> Result<crate::models::VirtualMachineWithConfigContext, Error>;
    fn virtualization_virtual_machines_read(
        &self,
        id: i32,
    ) -> Result<crate::models::VirtualMachineWithConfigContext, Error>;
    fn virtualization_virtual_machines_update(
        &self,
        id: i32,
        data: crate::models::WritableVirtualMachineWithConfigContext,
    ) -> Result<crate::models::VirtualMachineWithConfigContext, Error>;
}

impl VirtualizationApi for VirtualizationApiClient {
    fn virtualization_choices_list(&self) -> Result<(), Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/virtualization/_choices/", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        client.execute(req)?.error_for_status()?;
        Ok(())
    }

    fn virtualization_choices_read(&self, id: &str) -> Result<(), Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/virtualization/_choices/{id}/",
            configuration.base_path,
            id = crate::apis::urlencode(id)
        );
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        client.execute(req)?.error_for_status()?;
        Ok(())
    }

    fn virtualization_cluster_groups_create(
        &self,
        data: crate::models::ClusterGroup,
    ) -> Result<crate::models::ClusterGroup, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/virtualization/cluster-groups/", configuration.base_path);
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn virtualization_cluster_groups_delete(&self, id: i32) -> Result<(), Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/virtualization/cluster-groups/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.delete(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        client.execute(req)?.error_for_status()?;
        Ok(())
    }

    fn virtualization_cluster_groups_list(
        &self,
        id: Option<&str>,
        name: Option<&str>,
        slug: Option<&str>,
        q: Option<&str>,
        id__n: Option<&str>,
        id__lte: Option<&str>,
        id__lt: Option<&str>,
        id__gte: Option<&str>,
        id__gt: Option<&str>,
        name__n: Option<&str>,
        name__ic: Option<&str>,
        name__nic: Option<&str>,
        name__iew: Option<&str>,
        name__niew: Option<&str>,
        name__isw: Option<&str>,
        name__nisw: Option<&str>,
        name__ie: Option<&str>,
        name__nie: Option<&str>,
        slug__n: Option<&str>,
        slug__ic: Option<&str>,
        slug__nic: Option<&str>,
        slug__iew: Option<&str>,
        slug__niew: Option<&str>,
        slug__isw: Option<&str>,
        slug__nisw: Option<&str>,
        slug__ie: Option<&str>,
        slug__nie: Option<&str>,
        limit: Option<i32>,
        offset: Option<i32>,
    ) -> Result<crate::models::InlineResponse20056, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/virtualization/cluster-groups/", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = id {
            req_builder = req_builder.query(&[("id", &s.to_string())]);
        }
        if let Some(ref s) = name {
            req_builder = req_builder.query(&[("name", &s.to_string())]);
        }
        if let Some(ref s) = slug {
            req_builder = req_builder.query(&[("slug", &s.to_string())]);
        }
        if let Some(ref s) = q {
            req_builder = req_builder.query(&[("q", &s.to_string())]);
        }
        if let Some(ref s) = id__n {
            req_builder = req_builder.query(&[("id__n", &s.to_string())]);
        }
        if let Some(ref s) = id__lte {
            req_builder = req_builder.query(&[("id__lte", &s.to_string())]);
        }
        if let Some(ref s) = id__lt {
            req_builder = req_builder.query(&[("id__lt", &s.to_string())]);
        }
        if let Some(ref s) = id__gte {
            req_builder = req_builder.query(&[("id__gte", &s.to_string())]);
        }
        if let Some(ref s) = id__gt {
            req_builder = req_builder.query(&[("id__gt", &s.to_string())]);
        }
        if let Some(ref s) = name__n {
            req_builder = req_builder.query(&[("name__n", &s.to_string())]);
        }
        if let Some(ref s) = name__ic {
            req_builder = req_builder.query(&[("name__ic", &s.to_string())]);
        }
        if let Some(ref s) = name__nic {
            req_builder = req_builder.query(&[("name__nic", &s.to_string())]);
        }
        if let Some(ref s) = name__iew {
            req_builder = req_builder.query(&[("name__iew", &s.to_string())]);
        }
        if let Some(ref s) = name__niew {
            req_builder = req_builder.query(&[("name__niew", &s.to_string())]);
        }
        if let Some(ref s) = name__isw {
            req_builder = req_builder.query(&[("name__isw", &s.to_string())]);
        }
        if let Some(ref s) = name__nisw {
            req_builder = req_builder.query(&[("name__nisw", &s.to_string())]);
        }
        if let Some(ref s) = name__ie {
            req_builder = req_builder.query(&[("name__ie", &s.to_string())]);
        }
        if let Some(ref s) = name__nie {
            req_builder = req_builder.query(&[("name__nie", &s.to_string())]);
        }
        if let Some(ref s) = slug__n {
            req_builder = req_builder.query(&[("slug__n", &s.to_string())]);
        }
        if let Some(ref s) = slug__ic {
            req_builder = req_builder.query(&[("slug__ic", &s.to_string())]);
        }
        if let Some(ref s) = slug__nic {
            req_builder = req_builder.query(&[("slug__nic", &s.to_string())]);
        }
        if let Some(ref s) = slug__iew {
            req_builder = req_builder.query(&[("slug__iew", &s.to_string())]);
        }
        if let Some(ref s) = slug__niew {
            req_builder = req_builder.query(&[("slug__niew", &s.to_string())]);
        }
        if let Some(ref s) = slug__isw {
            req_builder = req_builder.query(&[("slug__isw", &s.to_string())]);
        }
        if let Some(ref s) = slug__nisw {
            req_builder = req_builder.query(&[("slug__nisw", &s.to_string())]);
        }
        if let Some(ref s) = slug__ie {
            req_builder = req_builder.query(&[("slug__ie", &s.to_string())]);
        }
        if let Some(ref s) = slug__nie {
            req_builder = req_builder.query(&[("slug__nie", &s.to_string())]);
        }
        if let Some(ref s) = limit {
            req_builder = req_builder.query(&[("limit", &s.to_string())]);
        }
        if let Some(ref s) = offset {
            req_builder = req_builder.query(&[("offset", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn virtualization_cluster_groups_partial_update(
        &self,
        id: i32,
        data: crate::models::ClusterGroup,
    ) -> Result<crate::models::ClusterGroup, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/virtualization/cluster-groups/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.patch(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn virtualization_cluster_groups_read(
        &self,
        id: i32,
    ) -> Result<crate::models::ClusterGroup, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/virtualization/cluster-groups/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn virtualization_cluster_groups_update(
        &self,
        id: i32,
        data: crate::models::ClusterGroup,
    ) -> Result<crate::models::ClusterGroup, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/virtualization/cluster-groups/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.put(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn virtualization_cluster_types_create(
        &self,
        data: crate::models::ClusterType,
    ) -> Result<crate::models::ClusterType, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/virtualization/cluster-types/", configuration.base_path);
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn virtualization_cluster_types_delete(&self, id: i32) -> Result<(), Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/virtualization/cluster-types/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.delete(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        client.execute(req)?.error_for_status()?;
        Ok(())
    }

    fn virtualization_cluster_types_list(
        &self,
        id: Option<&str>,
        name: Option<&str>,
        slug: Option<&str>,
        q: Option<&str>,
        id__n: Option<&str>,
        id__lte: Option<&str>,
        id__lt: Option<&str>,
        id__gte: Option<&str>,
        id__gt: Option<&str>,
        name__n: Option<&str>,
        name__ic: Option<&str>,
        name__nic: Option<&str>,
        name__iew: Option<&str>,
        name__niew: Option<&str>,
        name__isw: Option<&str>,
        name__nisw: Option<&str>,
        name__ie: Option<&str>,
        name__nie: Option<&str>,
        slug__n: Option<&str>,
        slug__ic: Option<&str>,
        slug__nic: Option<&str>,
        slug__iew: Option<&str>,
        slug__niew: Option<&str>,
        slug__isw: Option<&str>,
        slug__nisw: Option<&str>,
        slug__ie: Option<&str>,
        slug__nie: Option<&str>,
        limit: Option<i32>,
        offset: Option<i32>,
    ) -> Result<crate::models::InlineResponse20057, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/virtualization/cluster-types/", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = id {
            req_builder = req_builder.query(&[("id", &s.to_string())]);
        }
        if let Some(ref s) = name {
            req_builder = req_builder.query(&[("name", &s.to_string())]);
        }
        if let Some(ref s) = slug {
            req_builder = req_builder.query(&[("slug", &s.to_string())]);
        }
        if let Some(ref s) = q {
            req_builder = req_builder.query(&[("q", &s.to_string())]);
        }
        if let Some(ref s) = id__n {
            req_builder = req_builder.query(&[("id__n", &s.to_string())]);
        }
        if let Some(ref s) = id__lte {
            req_builder = req_builder.query(&[("id__lte", &s.to_string())]);
        }
        if let Some(ref s) = id__lt {
            req_builder = req_builder.query(&[("id__lt", &s.to_string())]);
        }
        if let Some(ref s) = id__gte {
            req_builder = req_builder.query(&[("id__gte", &s.to_string())]);
        }
        if let Some(ref s) = id__gt {
            req_builder = req_builder.query(&[("id__gt", &s.to_string())]);
        }
        if let Some(ref s) = name__n {
            req_builder = req_builder.query(&[("name__n", &s.to_string())]);
        }
        if let Some(ref s) = name__ic {
            req_builder = req_builder.query(&[("name__ic", &s.to_string())]);
        }
        if let Some(ref s) = name__nic {
            req_builder = req_builder.query(&[("name__nic", &s.to_string())]);
        }
        if let Some(ref s) = name__iew {
            req_builder = req_builder.query(&[("name__iew", &s.to_string())]);
        }
        if let Some(ref s) = name__niew {
            req_builder = req_builder.query(&[("name__niew", &s.to_string())]);
        }
        if let Some(ref s) = name__isw {
            req_builder = req_builder.query(&[("name__isw", &s.to_string())]);
        }
        if let Some(ref s) = name__nisw {
            req_builder = req_builder.query(&[("name__nisw", &s.to_string())]);
        }
        if let Some(ref s) = name__ie {
            req_builder = req_builder.query(&[("name__ie", &s.to_string())]);
        }
        if let Some(ref s) = name__nie {
            req_builder = req_builder.query(&[("name__nie", &s.to_string())]);
        }
        if let Some(ref s) = slug__n {
            req_builder = req_builder.query(&[("slug__n", &s.to_string())]);
        }
        if let Some(ref s) = slug__ic {
            req_builder = req_builder.query(&[("slug__ic", &s.to_string())]);
        }
        if let Some(ref s) = slug__nic {
            req_builder = req_builder.query(&[("slug__nic", &s.to_string())]);
        }
        if let Some(ref s) = slug__iew {
            req_builder = req_builder.query(&[("slug__iew", &s.to_string())]);
        }
        if let Some(ref s) = slug__niew {
            req_builder = req_builder.query(&[("slug__niew", &s.to_string())]);
        }
        if let Some(ref s) = slug__isw {
            req_builder = req_builder.query(&[("slug__isw", &s.to_string())]);
        }
        if let Some(ref s) = slug__nisw {
            req_builder = req_builder.query(&[("slug__nisw", &s.to_string())]);
        }
        if let Some(ref s) = slug__ie {
            req_builder = req_builder.query(&[("slug__ie", &s.to_string())]);
        }
        if let Some(ref s) = slug__nie {
            req_builder = req_builder.query(&[("slug__nie", &s.to_string())]);
        }
        if let Some(ref s) = limit {
            req_builder = req_builder.query(&[("limit", &s.to_string())]);
        }
        if let Some(ref s) = offset {
            req_builder = req_builder.query(&[("offset", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn virtualization_cluster_types_partial_update(
        &self,
        id: i32,
        data: crate::models::ClusterType,
    ) -> Result<crate::models::ClusterType, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/virtualization/cluster-types/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.patch(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn virtualization_cluster_types_read(
        &self,
        id: i32,
    ) -> Result<crate::models::ClusterType, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/virtualization/cluster-types/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn virtualization_cluster_types_update(
        &self,
        id: i32,
        data: crate::models::ClusterType,
    ) -> Result<crate::models::ClusterType, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/virtualization/cluster-types/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.put(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn virtualization_clusters_create(
        &self,
        data: crate::models::WritableCluster,
    ) -> Result<crate::models::Cluster, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/virtualization/clusters/", configuration.base_path);
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn virtualization_clusters_delete(&self, id: i32) -> Result<(), Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/virtualization/clusters/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.delete(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        client.execute(req)?.error_for_status()?;
        Ok(())
    }

    fn virtualization_clusters_list(
        &self,
        name: Option<&str>,
        tenant_group_id: Option<&str>,
        tenant_group: Option<&str>,
        tenant_id: Option<&str>,
        tenant: Option<&str>,
        created: Option<&str>,
        created__gte: Option<&str>,
        created__lte: Option<&str>,
        last_updated: Option<&str>,
        last_updated__gte: Option<&str>,
        last_updated__lte: Option<&str>,
        id__in: Option<&str>,
        q: Option<&str>,
        region_id: Option<&str>,
        region: Option<&str>,
        site_id: Option<&str>,
        site: Option<&str>,
        group_id: Option<&str>,
        group: Option<&str>,
        type_id: Option<&str>,
        _type: Option<&str>,
        tag: Option<&str>,
        name__n: Option<&str>,
        name__ic: Option<&str>,
        name__nic: Option<&str>,
        name__iew: Option<&str>,
        name__niew: Option<&str>,
        name__isw: Option<&str>,
        name__nisw: Option<&str>,
        name__ie: Option<&str>,
        name__nie: Option<&str>,
        tenant_group_id__n: Option<&str>,
        tenant_group__n: Option<&str>,
        tenant_id__n: Option<&str>,
        tenant__n: Option<&str>,
        region_id__n: Option<&str>,
        region__n: Option<&str>,
        site_id__n: Option<&str>,
        site__n: Option<&str>,
        group_id__n: Option<&str>,
        group__n: Option<&str>,
        type_id__n: Option<&str>,
        type__n: Option<&str>,
        tag__n: Option<&str>,
        limit: Option<i32>,
        offset: Option<i32>,
    ) -> Result<crate::models::InlineResponse20058, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/virtualization/clusters/", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = name {
            req_builder = req_builder.query(&[("name", &s.to_string())]);
        }
        if let Some(ref s) = tenant_group_id {
            req_builder = req_builder.query(&[("tenant_group_id", &s.to_string())]);
        }
        if let Some(ref s) = tenant_group {
            req_builder = req_builder.query(&[("tenant_group", &s.to_string())]);
        }
        if let Some(ref s) = tenant_id {
            req_builder = req_builder.query(&[("tenant_id", &s.to_string())]);
        }
        if let Some(ref s) = tenant {
            req_builder = req_builder.query(&[("tenant", &s.to_string())]);
        }
        if let Some(ref s) = created {
            req_builder = req_builder.query(&[("created", &s.to_string())]);
        }
        if let Some(ref s) = created__gte {
            req_builder = req_builder.query(&[("created__gte", &s.to_string())]);
        }
        if let Some(ref s) = created__lte {
            req_builder = req_builder.query(&[("created__lte", &s.to_string())]);
        }
        if let Some(ref s) = last_updated {
            req_builder = req_builder.query(&[("last_updated", &s.to_string())]);
        }
        if let Some(ref s) = last_updated__gte {
            req_builder = req_builder.query(&[("last_updated__gte", &s.to_string())]);
        }
        if let Some(ref s) = last_updated__lte {
            req_builder = req_builder.query(&[("last_updated__lte", &s.to_string())]);
        }
        if let Some(ref s) = id__in {
            req_builder = req_builder.query(&[("id__in", &s.to_string())]);
        }
        if let Some(ref s) = q {
            req_builder = req_builder.query(&[("q", &s.to_string())]);
        }
        if let Some(ref s) = region_id {
            req_builder = req_builder.query(&[("region_id", &s.to_string())]);
        }
        if let Some(ref s) = region {
            req_builder = req_builder.query(&[("region", &s.to_string())]);
        }
        if let Some(ref s) = site_id {
            req_builder = req_builder.query(&[("site_id", &s.to_string())]);
        }
        if let Some(ref s) = site {
            req_builder = req_builder.query(&[("site", &s.to_string())]);
        }
        if let Some(ref s) = group_id {
            req_builder = req_builder.query(&[("group_id", &s.to_string())]);
        }
        if let Some(ref s) = group {
            req_builder = req_builder.query(&[("group", &s.to_string())]);
        }
        if let Some(ref s) = type_id {
            req_builder = req_builder.query(&[("type_id", &s.to_string())]);
        }
        if let Some(ref s) = _type {
            req_builder = req_builder.query(&[("type", &s.to_string())]);
        }
        if let Some(ref s) = tag {
            req_builder = req_builder.query(&[("tag", &s.to_string())]);
        }
        if let Some(ref s) = name__n {
            req_builder = req_builder.query(&[("name__n", &s.to_string())]);
        }
        if let Some(ref s) = name__ic {
            req_builder = req_builder.query(&[("name__ic", &s.to_string())]);
        }
        if let Some(ref s) = name__nic {
            req_builder = req_builder.query(&[("name__nic", &s.to_string())]);
        }
        if let Some(ref s) = name__iew {
            req_builder = req_builder.query(&[("name__iew", &s.to_string())]);
        }
        if let Some(ref s) = name__niew {
            req_builder = req_builder.query(&[("name__niew", &s.to_string())]);
        }
        if let Some(ref s) = name__isw {
            req_builder = req_builder.query(&[("name__isw", &s.to_string())]);
        }
        if let Some(ref s) = name__nisw {
            req_builder = req_builder.query(&[("name__nisw", &s.to_string())]);
        }
        if let Some(ref s) = name__ie {
            req_builder = req_builder.query(&[("name__ie", &s.to_string())]);
        }
        if let Some(ref s) = name__nie {
            req_builder = req_builder.query(&[("name__nie", &s.to_string())]);
        }
        if let Some(ref s) = tenant_group_id__n {
            req_builder = req_builder.query(&[("tenant_group_id__n", &s.to_string())]);
        }
        if let Some(ref s) = tenant_group__n {
            req_builder = req_builder.query(&[("tenant_group__n", &s.to_string())]);
        }
        if let Some(ref s) = tenant_id__n {
            req_builder = req_builder.query(&[("tenant_id__n", &s.to_string())]);
        }
        if let Some(ref s) = tenant__n {
            req_builder = req_builder.query(&[("tenant__n", &s.to_string())]);
        }
        if let Some(ref s) = region_id__n {
            req_builder = req_builder.query(&[("region_id__n", &s.to_string())]);
        }
        if let Some(ref s) = region__n {
            req_builder = req_builder.query(&[("region__n", &s.to_string())]);
        }
        if let Some(ref s) = site_id__n {
            req_builder = req_builder.query(&[("site_id__n", &s.to_string())]);
        }
        if let Some(ref s) = site__n {
            req_builder = req_builder.query(&[("site__n", &s.to_string())]);
        }
        if let Some(ref s) = group_id__n {
            req_builder = req_builder.query(&[("group_id__n", &s.to_string())]);
        }
        if let Some(ref s) = group__n {
            req_builder = req_builder.query(&[("group__n", &s.to_string())]);
        }
        if let Some(ref s) = type_id__n {
            req_builder = req_builder.query(&[("type_id__n", &s.to_string())]);
        }
        if let Some(ref s) = type__n {
            req_builder = req_builder.query(&[("type__n", &s.to_string())]);
        }
        if let Some(ref s) = tag__n {
            req_builder = req_builder.query(&[("tag__n", &s.to_string())]);
        }
        if let Some(ref s) = limit {
            req_builder = req_builder.query(&[("limit", &s.to_string())]);
        }
        if let Some(ref s) = offset {
            req_builder = req_builder.query(&[("offset", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn virtualization_clusters_partial_update(
        &self,
        id: i32,
        data: crate::models::WritableCluster,
    ) -> Result<crate::models::Cluster, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/virtualization/clusters/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.patch(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn virtualization_clusters_read(&self, id: i32) -> Result<crate::models::Cluster, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/virtualization/clusters/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn virtualization_clusters_update(
        &self,
        id: i32,
        data: crate::models::WritableCluster,
    ) -> Result<crate::models::Cluster, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/virtualization/clusters/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.put(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn virtualization_interfaces_create(
        &self,
        data: crate::models::WritableVirtualMachineInterface,
    ) -> Result<crate::models::VirtualMachineInterface, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/virtualization/interfaces/", configuration.base_path);
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn virtualization_interfaces_delete(&self, id: i32) -> Result<(), Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/virtualization/interfaces/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.delete(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        client.execute(req)?.error_for_status()?;
        Ok(())
    }

    fn virtualization_interfaces_list(
        &self,
        id: Option<&str>,
        name: Option<&str>,
        enabled: Option<&str>,
        mtu: Option<&str>,
        q: Option<&str>,
        virtual_machine_id: Option<&str>,
        virtual_machine: Option<&str>,
        mac_address: Option<&str>,
        id__n: Option<&str>,
        id__lte: Option<&str>,
        id__lt: Option<&str>,
        id__gte: Option<&str>,
        id__gt: Option<&str>,
        name__n: Option<&str>,
        name__ic: Option<&str>,
        name__nic: Option<&str>,
        name__iew: Option<&str>,
        name__niew: Option<&str>,
        name__isw: Option<&str>,
        name__nisw: Option<&str>,
        name__ie: Option<&str>,
        name__nie: Option<&str>,
        mtu__n: Option<&str>,
        mtu__lte: Option<&str>,
        mtu__lt: Option<&str>,
        mtu__gte: Option<&str>,
        mtu__gt: Option<&str>,
        virtual_machine_id__n: Option<&str>,
        virtual_machine__n: Option<&str>,
        mac_address__n: Option<&str>,
        mac_address__ic: Option<&str>,
        mac_address__nic: Option<&str>,
        mac_address__iew: Option<&str>,
        mac_address__niew: Option<&str>,
        mac_address__isw: Option<&str>,
        mac_address__nisw: Option<&str>,
        mac_address__ie: Option<&str>,
        mac_address__nie: Option<&str>,
        limit: Option<i32>,
        offset: Option<i32>,
    ) -> Result<crate::models::InlineResponse20059, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/virtualization/interfaces/", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = id {
            req_builder = req_builder.query(&[("id", &s.to_string())]);
        }
        if let Some(ref s) = name {
            req_builder = req_builder.query(&[("name", &s.to_string())]);
        }
        if let Some(ref s) = enabled {
            req_builder = req_builder.query(&[("enabled", &s.to_string())]);
        }
        if let Some(ref s) = mtu {
            req_builder = req_builder.query(&[("mtu", &s.to_string())]);
        }
        if let Some(ref s) = q {
            req_builder = req_builder.query(&[("q", &s.to_string())]);
        }
        if let Some(ref s) = virtual_machine_id {
            req_builder = req_builder.query(&[("virtual_machine_id", &s.to_string())]);
        }
        if let Some(ref s) = virtual_machine {
            req_builder = req_builder.query(&[("virtual_machine", &s.to_string())]);
        }
        if let Some(ref s) = mac_address {
            req_builder = req_builder.query(&[("mac_address", &s.to_string())]);
        }
        if let Some(ref s) = id__n {
            req_builder = req_builder.query(&[("id__n", &s.to_string())]);
        }
        if let Some(ref s) = id__lte {
            req_builder = req_builder.query(&[("id__lte", &s.to_string())]);
        }
        if let Some(ref s) = id__lt {
            req_builder = req_builder.query(&[("id__lt", &s.to_string())]);
        }
        if let Some(ref s) = id__gte {
            req_builder = req_builder.query(&[("id__gte", &s.to_string())]);
        }
        if let Some(ref s) = id__gt {
            req_builder = req_builder.query(&[("id__gt", &s.to_string())]);
        }
        if let Some(ref s) = name__n {
            req_builder = req_builder.query(&[("name__n", &s.to_string())]);
        }
        if let Some(ref s) = name__ic {
            req_builder = req_builder.query(&[("name__ic", &s.to_string())]);
        }
        if let Some(ref s) = name__nic {
            req_builder = req_builder.query(&[("name__nic", &s.to_string())]);
        }
        if let Some(ref s) = name__iew {
            req_builder = req_builder.query(&[("name__iew", &s.to_string())]);
        }
        if let Some(ref s) = name__niew {
            req_builder = req_builder.query(&[("name__niew", &s.to_string())]);
        }
        if let Some(ref s) = name__isw {
            req_builder = req_builder.query(&[("name__isw", &s.to_string())]);
        }
        if let Some(ref s) = name__nisw {
            req_builder = req_builder.query(&[("name__nisw", &s.to_string())]);
        }
        if let Some(ref s) = name__ie {
            req_builder = req_builder.query(&[("name__ie", &s.to_string())]);
        }
        if let Some(ref s) = name__nie {
            req_builder = req_builder.query(&[("name__nie", &s.to_string())]);
        }
        if let Some(ref s) = mtu__n {
            req_builder = req_builder.query(&[("mtu__n", &s.to_string())]);
        }
        if let Some(ref s) = mtu__lte {
            req_builder = req_builder.query(&[("mtu__lte", &s.to_string())]);
        }
        if let Some(ref s) = mtu__lt {
            req_builder = req_builder.query(&[("mtu__lt", &s.to_string())]);
        }
        if let Some(ref s) = mtu__gte {
            req_builder = req_builder.query(&[("mtu__gte", &s.to_string())]);
        }
        if let Some(ref s) = mtu__gt {
            req_builder = req_builder.query(&[("mtu__gt", &s.to_string())]);
        }
        if let Some(ref s) = virtual_machine_id__n {
            req_builder = req_builder.query(&[("virtual_machine_id__n", &s.to_string())]);
        }
        if let Some(ref s) = virtual_machine__n {
            req_builder = req_builder.query(&[("virtual_machine__n", &s.to_string())]);
        }
        if let Some(ref s) = mac_address__n {
            req_builder = req_builder.query(&[("mac_address__n", &s.to_string())]);
        }
        if let Some(ref s) = mac_address__ic {
            req_builder = req_builder.query(&[("mac_address__ic", &s.to_string())]);
        }
        if let Some(ref s) = mac_address__nic {
            req_builder = req_builder.query(&[("mac_address__nic", &s.to_string())]);
        }
        if let Some(ref s) = mac_address__iew {
            req_builder = req_builder.query(&[("mac_address__iew", &s.to_string())]);
        }
        if let Some(ref s) = mac_address__niew {
            req_builder = req_builder.query(&[("mac_address__niew", &s.to_string())]);
        }
        if let Some(ref s) = mac_address__isw {
            req_builder = req_builder.query(&[("mac_address__isw", &s.to_string())]);
        }
        if let Some(ref s) = mac_address__nisw {
            req_builder = req_builder.query(&[("mac_address__nisw", &s.to_string())]);
        }
        if let Some(ref s) = mac_address__ie {
            req_builder = req_builder.query(&[("mac_address__ie", &s.to_string())]);
        }
        if let Some(ref s) = mac_address__nie {
            req_builder = req_builder.query(&[("mac_address__nie", &s.to_string())]);
        }
        if let Some(ref s) = limit {
            req_builder = req_builder.query(&[("limit", &s.to_string())]);
        }
        if let Some(ref s) = offset {
            req_builder = req_builder.query(&[("offset", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn virtualization_interfaces_partial_update(
        &self,
        id: i32,
        data: crate::models::WritableVirtualMachineInterface,
    ) -> Result<crate::models::VirtualMachineInterface, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/virtualization/interfaces/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.patch(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn virtualization_interfaces_read(
        &self,
        id: i32,
    ) -> Result<crate::models::VirtualMachineInterface, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/virtualization/interfaces/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn virtualization_interfaces_update(
        &self,
        id: i32,
        data: crate::models::WritableVirtualMachineInterface,
    ) -> Result<crate::models::VirtualMachineInterface, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/virtualization/interfaces/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.put(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn virtualization_virtual_machines_create(
        &self,
        data: crate::models::WritableVirtualMachineWithConfigContext,
    ) -> Result<crate::models::VirtualMachineWithConfigContext, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/virtualization/virtual-machines/",
            configuration.base_path
        );
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn virtualization_virtual_machines_delete(&self, id: i32) -> Result<(), Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/virtualization/virtual-machines/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.delete(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        client.execute(req)?.error_for_status()?;
        Ok(())
    }

    fn virtualization_virtual_machines_list(
        &self,
        id: Option<&str>,
        name: Option<&str>,
        cluster: Option<&str>,
        vcpus: Option<&str>,
        memory: Option<&str>,
        disk: Option<&str>,
        local_context_data: Option<&str>,
        tenant_group_id: Option<&str>,
        tenant_group: Option<&str>,
        tenant_id: Option<&str>,
        tenant: Option<&str>,
        created: Option<&str>,
        created__gte: Option<&str>,
        created__lte: Option<&str>,
        last_updated: Option<&str>,
        last_updated__gte: Option<&str>,
        last_updated__lte: Option<&str>,
        id__in: Option<&str>,
        q: Option<&str>,
        status: Option<&str>,
        cluster_group_id: Option<&str>,
        cluster_group: Option<&str>,
        cluster_type_id: Option<&str>,
        cluster_type: Option<&str>,
        cluster_id: Option<&str>,
        region_id: Option<&str>,
        region: Option<&str>,
        site_id: Option<&str>,
        site: Option<&str>,
        role_id: Option<&str>,
        role: Option<&str>,
        platform_id: Option<&str>,
        platform: Option<&str>,
        mac_address: Option<&str>,
        tag: Option<&str>,
        id__n: Option<&str>,
        id__lte: Option<&str>,
        id__lt: Option<&str>,
        id__gte: Option<&str>,
        id__gt: Option<&str>,
        name__n: Option<&str>,
        name__ic: Option<&str>,
        name__nic: Option<&str>,
        name__iew: Option<&str>,
        name__niew: Option<&str>,
        name__isw: Option<&str>,
        name__nisw: Option<&str>,
        name__ie: Option<&str>,
        name__nie: Option<&str>,
        cluster__n: Option<&str>,
        vcpus__n: Option<&str>,
        vcpus__lte: Option<&str>,
        vcpus__lt: Option<&str>,
        vcpus__gte: Option<&str>,
        vcpus__gt: Option<&str>,
        memory__n: Option<&str>,
        memory__lte: Option<&str>,
        memory__lt: Option<&str>,
        memory__gte: Option<&str>,
        memory__gt: Option<&str>,
        disk__n: Option<&str>,
        disk__lte: Option<&str>,
        disk__lt: Option<&str>,
        disk__gte: Option<&str>,
        disk__gt: Option<&str>,
        tenant_group_id__n: Option<&str>,
        tenant_group__n: Option<&str>,
        tenant_id__n: Option<&str>,
        tenant__n: Option<&str>,
        status__n: Option<&str>,
        cluster_group_id__n: Option<&str>,
        cluster_group__n: Option<&str>,
        cluster_type_id__n: Option<&str>,
        cluster_type__n: Option<&str>,
        cluster_id__n: Option<&str>,
        region_id__n: Option<&str>,
        region__n: Option<&str>,
        site_id__n: Option<&str>,
        site__n: Option<&str>,
        role_id__n: Option<&str>,
        role__n: Option<&str>,
        platform_id__n: Option<&str>,
        platform__n: Option<&str>,
        mac_address__n: Option<&str>,
        mac_address__ic: Option<&str>,
        mac_address__nic: Option<&str>,
        mac_address__iew: Option<&str>,
        mac_address__niew: Option<&str>,
        mac_address__isw: Option<&str>,
        mac_address__nisw: Option<&str>,
        mac_address__ie: Option<&str>,
        mac_address__nie: Option<&str>,
        tag__n: Option<&str>,
        limit: Option<i32>,
        offset: Option<i32>,
    ) -> Result<crate::models::InlineResponse20060, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/virtualization/virtual-machines/",
            configuration.base_path
        );
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = id {
            req_builder = req_builder.query(&[("id", &s.to_string())]);
        }
        if let Some(ref s) = name {
            req_builder = req_builder.query(&[("name", &s.to_string())]);
        }
        if let Some(ref s) = cluster {
            req_builder = req_builder.query(&[("cluster", &s.to_string())]);
        }
        if let Some(ref s) = vcpus {
            req_builder = req_builder.query(&[("vcpus", &s.to_string())]);
        }
        if let Some(ref s) = memory {
            req_builder = req_builder.query(&[("memory", &s.to_string())]);
        }
        if let Some(ref s) = disk {
            req_builder = req_builder.query(&[("disk", &s.to_string())]);
        }
        if let Some(ref s) = local_context_data {
            req_builder = req_builder.query(&[("local_context_data", &s.to_string())]);
        }
        if let Some(ref s) = tenant_group_id {
            req_builder = req_builder.query(&[("tenant_group_id", &s.to_string())]);
        }
        if let Some(ref s) = tenant_group {
            req_builder = req_builder.query(&[("tenant_group", &s.to_string())]);
        }
        if let Some(ref s) = tenant_id {
            req_builder = req_builder.query(&[("tenant_id", &s.to_string())]);
        }
        if let Some(ref s) = tenant {
            req_builder = req_builder.query(&[("tenant", &s.to_string())]);
        }
        if let Some(ref s) = created {
            req_builder = req_builder.query(&[("created", &s.to_string())]);
        }
        if let Some(ref s) = created__gte {
            req_builder = req_builder.query(&[("created__gte", &s.to_string())]);
        }
        if let Some(ref s) = created__lte {
            req_builder = req_builder.query(&[("created__lte", &s.to_string())]);
        }
        if let Some(ref s) = last_updated {
            req_builder = req_builder.query(&[("last_updated", &s.to_string())]);
        }
        if let Some(ref s) = last_updated__gte {
            req_builder = req_builder.query(&[("last_updated__gte", &s.to_string())]);
        }
        if let Some(ref s) = last_updated__lte {
            req_builder = req_builder.query(&[("last_updated__lte", &s.to_string())]);
        }
        if let Some(ref s) = id__in {
            req_builder = req_builder.query(&[("id__in", &s.to_string())]);
        }
        if let Some(ref s) = q {
            req_builder = req_builder.query(&[("q", &s.to_string())]);
        }
        if let Some(ref s) = status {
            req_builder = req_builder.query(&[("status", &s.to_string())]);
        }
        if let Some(ref s) = cluster_group_id {
            req_builder = req_builder.query(&[("cluster_group_id", &s.to_string())]);
        }
        if let Some(ref s) = cluster_group {
            req_builder = req_builder.query(&[("cluster_group", &s.to_string())]);
        }
        if let Some(ref s) = cluster_type_id {
            req_builder = req_builder.query(&[("cluster_type_id", &s.to_string())]);
        }
        if let Some(ref s) = cluster_type {
            req_builder = req_builder.query(&[("cluster_type", &s.to_string())]);
        }
        if let Some(ref s) = cluster_id {
            req_builder = req_builder.query(&[("cluster_id", &s.to_string())]);
        }
        if let Some(ref s) = region_id {
            req_builder = req_builder.query(&[("region_id", &s.to_string())]);
        }
        if let Some(ref s) = region {
            req_builder = req_builder.query(&[("region", &s.to_string())]);
        }
        if let Some(ref s) = site_id {
            req_builder = req_builder.query(&[("site_id", &s.to_string())]);
        }
        if let Some(ref s) = site {
            req_builder = req_builder.query(&[("site", &s.to_string())]);
        }
        if let Some(ref s) = role_id {
            req_builder = req_builder.query(&[("role_id", &s.to_string())]);
        }
        if let Some(ref s) = role {
            req_builder = req_builder.query(&[("role", &s.to_string())]);
        }
        if let Some(ref s) = platform_id {
            req_builder = req_builder.query(&[("platform_id", &s.to_string())]);
        }
        if let Some(ref s) = platform {
            req_builder = req_builder.query(&[("platform", &s.to_string())]);
        }
        if let Some(ref s) = mac_address {
            req_builder = req_builder.query(&[("mac_address", &s.to_string())]);
        }
        if let Some(ref s) = tag {
            req_builder = req_builder.query(&[("tag", &s.to_string())]);
        }
        if let Some(ref s) = id__n {
            req_builder = req_builder.query(&[("id__n", &s.to_string())]);
        }
        if let Some(ref s) = id__lte {
            req_builder = req_builder.query(&[("id__lte", &s.to_string())]);
        }
        if let Some(ref s) = id__lt {
            req_builder = req_builder.query(&[("id__lt", &s.to_string())]);
        }
        if let Some(ref s) = id__gte {
            req_builder = req_builder.query(&[("id__gte", &s.to_string())]);
        }
        if let Some(ref s) = id__gt {
            req_builder = req_builder.query(&[("id__gt", &s.to_string())]);
        }
        if let Some(ref s) = name__n {
            req_builder = req_builder.query(&[("name__n", &s.to_string())]);
        }
        if let Some(ref s) = name__ic {
            req_builder = req_builder.query(&[("name__ic", &s.to_string())]);
        }
        if let Some(ref s) = name__nic {
            req_builder = req_builder.query(&[("name__nic", &s.to_string())]);
        }
        if let Some(ref s) = name__iew {
            req_builder = req_builder.query(&[("name__iew", &s.to_string())]);
        }
        if let Some(ref s) = name__niew {
            req_builder = req_builder.query(&[("name__niew", &s.to_string())]);
        }
        if let Some(ref s) = name__isw {
            req_builder = req_builder.query(&[("name__isw", &s.to_string())]);
        }
        if let Some(ref s) = name__nisw {
            req_builder = req_builder.query(&[("name__nisw", &s.to_string())]);
        }
        if let Some(ref s) = name__ie {
            req_builder = req_builder.query(&[("name__ie", &s.to_string())]);
        }
        if let Some(ref s) = name__nie {
            req_builder = req_builder.query(&[("name__nie", &s.to_string())]);
        }
        if let Some(ref s) = cluster__n {
            req_builder = req_builder.query(&[("cluster__n", &s.to_string())]);
        }
        if let Some(ref s) = vcpus__n {
            req_builder = req_builder.query(&[("vcpus__n", &s.to_string())]);
        }
        if let Some(ref s) = vcpus__lte {
            req_builder = req_builder.query(&[("vcpus__lte", &s.to_string())]);
        }
        if let Some(ref s) = vcpus__lt {
            req_builder = req_builder.query(&[("vcpus__lt", &s.to_string())]);
        }
        if let Some(ref s) = vcpus__gte {
            req_builder = req_builder.query(&[("vcpus__gte", &s.to_string())]);
        }
        if let Some(ref s) = vcpus__gt {
            req_builder = req_builder.query(&[("vcpus__gt", &s.to_string())]);
        }
        if let Some(ref s) = memory__n {
            req_builder = req_builder.query(&[("memory__n", &s.to_string())]);
        }
        if let Some(ref s) = memory__lte {
            req_builder = req_builder.query(&[("memory__lte", &s.to_string())]);
        }
        if let Some(ref s) = memory__lt {
            req_builder = req_builder.query(&[("memory__lt", &s.to_string())]);
        }
        if let Some(ref s) = memory__gte {
            req_builder = req_builder.query(&[("memory__gte", &s.to_string())]);
        }
        if let Some(ref s) = memory__gt {
            req_builder = req_builder.query(&[("memory__gt", &s.to_string())]);
        }
        if let Some(ref s) = disk__n {
            req_builder = req_builder.query(&[("disk__n", &s.to_string())]);
        }
        if let Some(ref s) = disk__lte {
            req_builder = req_builder.query(&[("disk__lte", &s.to_string())]);
        }
        if let Some(ref s) = disk__lt {
            req_builder = req_builder.query(&[("disk__lt", &s.to_string())]);
        }
        if let Some(ref s) = disk__gte {
            req_builder = req_builder.query(&[("disk__gte", &s.to_string())]);
        }
        if let Some(ref s) = disk__gt {
            req_builder = req_builder.query(&[("disk__gt", &s.to_string())]);
        }
        if let Some(ref s) = tenant_group_id__n {
            req_builder = req_builder.query(&[("tenant_group_id__n", &s.to_string())]);
        }
        if let Some(ref s) = tenant_group__n {
            req_builder = req_builder.query(&[("tenant_group__n", &s.to_string())]);
        }
        if let Some(ref s) = tenant_id__n {
            req_builder = req_builder.query(&[("tenant_id__n", &s.to_string())]);
        }
        if let Some(ref s) = tenant__n {
            req_builder = req_builder.query(&[("tenant__n", &s.to_string())]);
        }
        if let Some(ref s) = status__n {
            req_builder = req_builder.query(&[("status__n", &s.to_string())]);
        }
        if let Some(ref s) = cluster_group_id__n {
            req_builder = req_builder.query(&[("cluster_group_id__n", &s.to_string())]);
        }
        if let Some(ref s) = cluster_group__n {
            req_builder = req_builder.query(&[("cluster_group__n", &s.to_string())]);
        }
        if let Some(ref s) = cluster_type_id__n {
            req_builder = req_builder.query(&[("cluster_type_id__n", &s.to_string())]);
        }
        if let Some(ref s) = cluster_type__n {
            req_builder = req_builder.query(&[("cluster_type__n", &s.to_string())]);
        }
        if let Some(ref s) = cluster_id__n {
            req_builder = req_builder.query(&[("cluster_id__n", &s.to_string())]);
        }
        if let Some(ref s) = region_id__n {
            req_builder = req_builder.query(&[("region_id__n", &s.to_string())]);
        }
        if let Some(ref s) = region__n {
            req_builder = req_builder.query(&[("region__n", &s.to_string())]);
        }
        if let Some(ref s) = site_id__n {
            req_builder = req_builder.query(&[("site_id__n", &s.to_string())]);
        }
        if let Some(ref s) = site__n {
            req_builder = req_builder.query(&[("site__n", &s.to_string())]);
        }
        if let Some(ref s) = role_id__n {
            req_builder = req_builder.query(&[("role_id__n", &s.to_string())]);
        }
        if let Some(ref s) = role__n {
            req_builder = req_builder.query(&[("role__n", &s.to_string())]);
        }
        if let Some(ref s) = platform_id__n {
            req_builder = req_builder.query(&[("platform_id__n", &s.to_string())]);
        }
        if let Some(ref s) = platform__n {
            req_builder = req_builder.query(&[("platform__n", &s.to_string())]);
        }
        if let Some(ref s) = mac_address__n {
            req_builder = req_builder.query(&[("mac_address__n", &s.to_string())]);
        }
        if let Some(ref s) = mac_address__ic {
            req_builder = req_builder.query(&[("mac_address__ic", &s.to_string())]);
        }
        if let Some(ref s) = mac_address__nic {
            req_builder = req_builder.query(&[("mac_address__nic", &s.to_string())]);
        }
        if let Some(ref s) = mac_address__iew {
            req_builder = req_builder.query(&[("mac_address__iew", &s.to_string())]);
        }
        if let Some(ref s) = mac_address__niew {
            req_builder = req_builder.query(&[("mac_address__niew", &s.to_string())]);
        }
        if let Some(ref s) = mac_address__isw {
            req_builder = req_builder.query(&[("mac_address__isw", &s.to_string())]);
        }
        if let Some(ref s) = mac_address__nisw {
            req_builder = req_builder.query(&[("mac_address__nisw", &s.to_string())]);
        }
        if let Some(ref s) = mac_address__ie {
            req_builder = req_builder.query(&[("mac_address__ie", &s.to_string())]);
        }
        if let Some(ref s) = mac_address__nie {
            req_builder = req_builder.query(&[("mac_address__nie", &s.to_string())]);
        }
        if let Some(ref s) = tag__n {
            req_builder = req_builder.query(&[("tag__n", &s.to_string())]);
        }
        if let Some(ref s) = limit {
            req_builder = req_builder.query(&[("limit", &s.to_string())]);
        }
        if let Some(ref s) = offset {
            req_builder = req_builder.query(&[("offset", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn virtualization_virtual_machines_partial_update(
        &self,
        id: i32,
        data: crate::models::WritableVirtualMachineWithConfigContext,
    ) -> Result<crate::models::VirtualMachineWithConfigContext, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/virtualization/virtual-machines/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.patch(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn virtualization_virtual_machines_read(
        &self,
        id: i32,
    ) -> Result<crate::models::VirtualMachineWithConfigContext, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/virtualization/virtual-machines/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn virtualization_virtual_machines_update(
        &self,
        id: i32,
        data: crate::models::WritableVirtualMachineWithConfigContext,
    ) -> Result<crate::models::VirtualMachineWithConfigContext, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/virtualization/virtual-machines/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.put(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }
}
