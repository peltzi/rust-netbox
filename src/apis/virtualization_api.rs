/*
 * NetBox API
 *
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.0
 *
 * Generated by: https://openapi-generator.tech
 */

use reqwest;

use super::{configuration, Error};
use crate::apis::ResponseContent;

/// struct for typed errors of method `virtualization_cluster_groups_bulk_delete`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum VirtualizationClusterGroupsBulkDeleteError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `virtualization_cluster_groups_bulk_partial_update`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum VirtualizationClusterGroupsBulkPartialUpdateError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `virtualization_cluster_groups_bulk_update`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum VirtualizationClusterGroupsBulkUpdateError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `virtualization_cluster_groups_create`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum VirtualizationClusterGroupsCreateError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `virtualization_cluster_groups_delete`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum VirtualizationClusterGroupsDeleteError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `virtualization_cluster_groups_list`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum VirtualizationClusterGroupsListError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `virtualization_cluster_groups_partial_update`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum VirtualizationClusterGroupsPartialUpdateError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `virtualization_cluster_groups_read`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum VirtualizationClusterGroupsReadError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `virtualization_cluster_groups_update`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum VirtualizationClusterGroupsUpdateError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `virtualization_cluster_types_bulk_delete`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum VirtualizationClusterTypesBulkDeleteError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `virtualization_cluster_types_bulk_partial_update`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum VirtualizationClusterTypesBulkPartialUpdateError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `virtualization_cluster_types_bulk_update`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum VirtualizationClusterTypesBulkUpdateError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `virtualization_cluster_types_create`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum VirtualizationClusterTypesCreateError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `virtualization_cluster_types_delete`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum VirtualizationClusterTypesDeleteError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `virtualization_cluster_types_list`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum VirtualizationClusterTypesListError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `virtualization_cluster_types_partial_update`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum VirtualizationClusterTypesPartialUpdateError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `virtualization_cluster_types_read`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum VirtualizationClusterTypesReadError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `virtualization_cluster_types_update`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum VirtualizationClusterTypesUpdateError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `virtualization_clusters_bulk_delete`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum VirtualizationClustersBulkDeleteError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `virtualization_clusters_bulk_partial_update`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum VirtualizationClustersBulkPartialUpdateError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `virtualization_clusters_bulk_update`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum VirtualizationClustersBulkUpdateError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `virtualization_clusters_create`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum VirtualizationClustersCreateError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `virtualization_clusters_delete`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum VirtualizationClustersDeleteError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `virtualization_clusters_list`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum VirtualizationClustersListError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `virtualization_clusters_partial_update`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum VirtualizationClustersPartialUpdateError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `virtualization_clusters_read`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum VirtualizationClustersReadError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `virtualization_clusters_update`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum VirtualizationClustersUpdateError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `virtualization_interfaces_bulk_delete`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum VirtualizationInterfacesBulkDeleteError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `virtualization_interfaces_bulk_partial_update`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum VirtualizationInterfacesBulkPartialUpdateError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `virtualization_interfaces_bulk_update`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum VirtualizationInterfacesBulkUpdateError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `virtualization_interfaces_create`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum VirtualizationInterfacesCreateError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `virtualization_interfaces_delete`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum VirtualizationInterfacesDeleteError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `virtualization_interfaces_list`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum VirtualizationInterfacesListError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `virtualization_interfaces_partial_update`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum VirtualizationInterfacesPartialUpdateError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `virtualization_interfaces_read`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum VirtualizationInterfacesReadError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `virtualization_interfaces_update`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum VirtualizationInterfacesUpdateError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `virtualization_virtual_machines_bulk_delete`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum VirtualizationVirtualMachinesBulkDeleteError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `virtualization_virtual_machines_bulk_partial_update`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum VirtualizationVirtualMachinesBulkPartialUpdateError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `virtualization_virtual_machines_bulk_update`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum VirtualizationVirtualMachinesBulkUpdateError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `virtualization_virtual_machines_create`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum VirtualizationVirtualMachinesCreateError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `virtualization_virtual_machines_delete`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum VirtualizationVirtualMachinesDeleteError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `virtualization_virtual_machines_list`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum VirtualizationVirtualMachinesListError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `virtualization_virtual_machines_partial_update`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum VirtualizationVirtualMachinesPartialUpdateError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `virtualization_virtual_machines_read`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum VirtualizationVirtualMachinesReadError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `virtualization_virtual_machines_update`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum VirtualizationVirtualMachinesUpdateError {
    UnknownValue(serde_json::Value),
}

pub async fn virtualization_cluster_groups_bulk_delete(
    configuration: &configuration::Configuration,
) -> Result<(), Error<VirtualizationClusterGroupsBulkDeleteError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/virtualization/cluster-groups/", configuration.base_path);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<VirtualizationClusterGroupsBulkDeleteError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn virtualization_cluster_groups_bulk_partial_update(
    configuration: &configuration::Configuration,
    data: crate::models::ClusterGroup,
) -> Result<crate::models::ClusterGroup, Error<VirtualizationClusterGroupsBulkPartialUpdateError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/virtualization/cluster-groups/", configuration.base_path);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<VirtualizationClusterGroupsBulkPartialUpdateError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn virtualization_cluster_groups_bulk_update(
    configuration: &configuration::Configuration,
    data: crate::models::ClusterGroup,
) -> Result<crate::models::ClusterGroup, Error<VirtualizationClusterGroupsBulkUpdateError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/virtualization/cluster-groups/", configuration.base_path);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<VirtualizationClusterGroupsBulkUpdateError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn virtualization_cluster_groups_create(
    configuration: &configuration::Configuration,
    data: crate::models::ClusterGroup,
) -> Result<crate::models::ClusterGroup, Error<VirtualizationClusterGroupsCreateError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/virtualization/cluster-groups/", configuration.base_path);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<VirtualizationClusterGroupsCreateError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn virtualization_cluster_groups_delete(
    configuration: &configuration::Configuration,
    id: i32,
) -> Result<(), Error<VirtualizationClusterGroupsDeleteError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!(
        "{}/virtualization/cluster-groups/{id}/",
        configuration.base_path,
        id = id
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<VirtualizationClusterGroupsDeleteError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Overrides ListModelMixin to allow processing ExportTemplates.
pub async fn virtualization_cluster_groups_list(
    configuration: &configuration::Configuration,
    id: Option<&str>,
    name: Option<&str>,
    slug: Option<&str>,
    description: Option<&str>,
    created: Option<&str>,
    created__gte: Option<&str>,
    created__lte: Option<&str>,
    last_updated: Option<&str>,
    last_updated__gte: Option<&str>,
    last_updated__lte: Option<&str>,
    q: Option<&str>,
    id__n: Option<&str>,
    id__lte: Option<&str>,
    id__lt: Option<&str>,
    id__gte: Option<&str>,
    id__gt: Option<&str>,
    name__n: Option<&str>,
    name__ic: Option<&str>,
    name__nic: Option<&str>,
    name__iew: Option<&str>,
    name__niew: Option<&str>,
    name__isw: Option<&str>,
    name__nisw: Option<&str>,
    name__ie: Option<&str>,
    name__nie: Option<&str>,
    name__empty: Option<&str>,
    slug__n: Option<&str>,
    slug__ic: Option<&str>,
    slug__nic: Option<&str>,
    slug__iew: Option<&str>,
    slug__niew: Option<&str>,
    slug__isw: Option<&str>,
    slug__nisw: Option<&str>,
    slug__ie: Option<&str>,
    slug__nie: Option<&str>,
    slug__empty: Option<&str>,
    description__n: Option<&str>,
    description__ic: Option<&str>,
    description__nic: Option<&str>,
    description__iew: Option<&str>,
    description__niew: Option<&str>,
    description__isw: Option<&str>,
    description__nisw: Option<&str>,
    description__ie: Option<&str>,
    description__nie: Option<&str>,
    description__empty: Option<&str>,
    limit: Option<i32>,
    offset: Option<i32>,
) -> Result<crate::models::InlineResponse20066, Error<VirtualizationClusterGroupsListError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/virtualization/cluster-groups/", configuration.base_path);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = id {
        local_var_req_builder = local_var_req_builder.query(&[("id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name {
        local_var_req_builder =
            local_var_req_builder.query(&[("name", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug {
        local_var_req_builder =
            local_var_req_builder.query(&[("slug", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description {
        local_var_req_builder =
            local_var_req_builder.query(&[("description", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created {
        local_var_req_builder =
            local_var_req_builder.query(&[("created", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__gte {
        local_var_req_builder =
            local_var_req_builder.query(&[("created__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__lte {
        local_var_req_builder =
            local_var_req_builder.query(&[("created__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated {
        local_var_req_builder =
            local_var_req_builder.query(&[("last_updated", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__gte {
        local_var_req_builder =
            local_var_req_builder.query(&[("last_updated__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__lte {
        local_var_req_builder =
            local_var_req_builder.query(&[("last_updated__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = q {
        local_var_req_builder = local_var_req_builder.query(&[("q", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lte {
        local_var_req_builder =
            local_var_req_builder.query(&[("id__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lt {
        local_var_req_builder =
            local_var_req_builder.query(&[("id__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gte {
        local_var_req_builder =
            local_var_req_builder.query(&[("id__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gt {
        local_var_req_builder =
            local_var_req_builder.query(&[("id__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("name__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__ic {
        local_var_req_builder =
            local_var_req_builder.query(&[("name__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nic {
        local_var_req_builder =
            local_var_req_builder.query(&[("name__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__iew {
        local_var_req_builder =
            local_var_req_builder.query(&[("name__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__niew {
        local_var_req_builder =
            local_var_req_builder.query(&[("name__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__isw {
        local_var_req_builder =
            local_var_req_builder.query(&[("name__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nisw {
        local_var_req_builder =
            local_var_req_builder.query(&[("name__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__ie {
        local_var_req_builder =
            local_var_req_builder.query(&[("name__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nie {
        local_var_req_builder =
            local_var_req_builder.query(&[("name__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__empty {
        local_var_req_builder =
            local_var_req_builder.query(&[("name__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("slug__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__ic {
        local_var_req_builder =
            local_var_req_builder.query(&[("slug__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__nic {
        local_var_req_builder =
            local_var_req_builder.query(&[("slug__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__iew {
        local_var_req_builder =
            local_var_req_builder.query(&[("slug__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__niew {
        local_var_req_builder =
            local_var_req_builder.query(&[("slug__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__isw {
        local_var_req_builder =
            local_var_req_builder.query(&[("slug__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__nisw {
        local_var_req_builder =
            local_var_req_builder.query(&[("slug__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__ie {
        local_var_req_builder =
            local_var_req_builder.query(&[("slug__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__nie {
        local_var_req_builder =
            local_var_req_builder.query(&[("slug__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__empty {
        local_var_req_builder =
            local_var_req_builder.query(&[("slug__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("description__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__ic {
        local_var_req_builder =
            local_var_req_builder.query(&[("description__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__nic {
        local_var_req_builder =
            local_var_req_builder.query(&[("description__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__iew {
        local_var_req_builder =
            local_var_req_builder.query(&[("description__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__niew {
        local_var_req_builder =
            local_var_req_builder.query(&[("description__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__isw {
        local_var_req_builder =
            local_var_req_builder.query(&[("description__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__nisw {
        local_var_req_builder =
            local_var_req_builder.query(&[("description__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__ie {
        local_var_req_builder =
            local_var_req_builder.query(&[("description__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__nie {
        local_var_req_builder =
            local_var_req_builder.query(&[("description__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__empty {
        local_var_req_builder =
            local_var_req_builder.query(&[("description__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder =
            local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = offset {
        local_var_req_builder =
            local_var_req_builder.query(&[("offset", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<VirtualizationClusterGroupsListError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn virtualization_cluster_groups_partial_update(
    configuration: &configuration::Configuration,
    id: i32,
    data: crate::models::ClusterGroup,
) -> Result<crate::models::ClusterGroup, Error<VirtualizationClusterGroupsPartialUpdateError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!(
        "{}/virtualization/cluster-groups/{id}/",
        configuration.base_path,
        id = id
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<VirtualizationClusterGroupsPartialUpdateError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn virtualization_cluster_groups_read(
    configuration: &configuration::Configuration,
    id: i32,
) -> Result<crate::models::ClusterGroup, Error<VirtualizationClusterGroupsReadError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!(
        "{}/virtualization/cluster-groups/{id}/",
        configuration.base_path,
        id = id
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<VirtualizationClusterGroupsReadError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn virtualization_cluster_groups_update(
    configuration: &configuration::Configuration,
    id: i32,
    data: crate::models::ClusterGroup,
) -> Result<crate::models::ClusterGroup, Error<VirtualizationClusterGroupsUpdateError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!(
        "{}/virtualization/cluster-groups/{id}/",
        configuration.base_path,
        id = id
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<VirtualizationClusterGroupsUpdateError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn virtualization_cluster_types_bulk_delete(
    configuration: &configuration::Configuration,
) -> Result<(), Error<VirtualizationClusterTypesBulkDeleteError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/virtualization/cluster-types/", configuration.base_path);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<VirtualizationClusterTypesBulkDeleteError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn virtualization_cluster_types_bulk_partial_update(
    configuration: &configuration::Configuration,
    data: crate::models::ClusterType,
) -> Result<crate::models::ClusterType, Error<VirtualizationClusterTypesBulkPartialUpdateError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/virtualization/cluster-types/", configuration.base_path);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<VirtualizationClusterTypesBulkPartialUpdateError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn virtualization_cluster_types_bulk_update(
    configuration: &configuration::Configuration,
    data: crate::models::ClusterType,
) -> Result<crate::models::ClusterType, Error<VirtualizationClusterTypesBulkUpdateError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/virtualization/cluster-types/", configuration.base_path);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<VirtualizationClusterTypesBulkUpdateError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn virtualization_cluster_types_create(
    configuration: &configuration::Configuration,
    data: crate::models::ClusterType,
) -> Result<crate::models::ClusterType, Error<VirtualizationClusterTypesCreateError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/virtualization/cluster-types/", configuration.base_path);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<VirtualizationClusterTypesCreateError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn virtualization_cluster_types_delete(
    configuration: &configuration::Configuration,
    id: i32,
) -> Result<(), Error<VirtualizationClusterTypesDeleteError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!(
        "{}/virtualization/cluster-types/{id}/",
        configuration.base_path,
        id = id
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<VirtualizationClusterTypesDeleteError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Overrides ListModelMixin to allow processing ExportTemplates.
pub async fn virtualization_cluster_types_list(
    configuration: &configuration::Configuration,
    id: Option<&str>,
    name: Option<&str>,
    slug: Option<&str>,
    description: Option<&str>,
    created: Option<&str>,
    created__gte: Option<&str>,
    created__lte: Option<&str>,
    last_updated: Option<&str>,
    last_updated__gte: Option<&str>,
    last_updated__lte: Option<&str>,
    q: Option<&str>,
    id__n: Option<&str>,
    id__lte: Option<&str>,
    id__lt: Option<&str>,
    id__gte: Option<&str>,
    id__gt: Option<&str>,
    name__n: Option<&str>,
    name__ic: Option<&str>,
    name__nic: Option<&str>,
    name__iew: Option<&str>,
    name__niew: Option<&str>,
    name__isw: Option<&str>,
    name__nisw: Option<&str>,
    name__ie: Option<&str>,
    name__nie: Option<&str>,
    name__empty: Option<&str>,
    slug__n: Option<&str>,
    slug__ic: Option<&str>,
    slug__nic: Option<&str>,
    slug__iew: Option<&str>,
    slug__niew: Option<&str>,
    slug__isw: Option<&str>,
    slug__nisw: Option<&str>,
    slug__ie: Option<&str>,
    slug__nie: Option<&str>,
    slug__empty: Option<&str>,
    description__n: Option<&str>,
    description__ic: Option<&str>,
    description__nic: Option<&str>,
    description__iew: Option<&str>,
    description__niew: Option<&str>,
    description__isw: Option<&str>,
    description__nisw: Option<&str>,
    description__ie: Option<&str>,
    description__nie: Option<&str>,
    description__empty: Option<&str>,
    limit: Option<i32>,
    offset: Option<i32>,
) -> Result<crate::models::InlineResponse20067, Error<VirtualizationClusterTypesListError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/virtualization/cluster-types/", configuration.base_path);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = id {
        local_var_req_builder = local_var_req_builder.query(&[("id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name {
        local_var_req_builder =
            local_var_req_builder.query(&[("name", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug {
        local_var_req_builder =
            local_var_req_builder.query(&[("slug", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description {
        local_var_req_builder =
            local_var_req_builder.query(&[("description", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created {
        local_var_req_builder =
            local_var_req_builder.query(&[("created", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__gte {
        local_var_req_builder =
            local_var_req_builder.query(&[("created__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__lte {
        local_var_req_builder =
            local_var_req_builder.query(&[("created__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated {
        local_var_req_builder =
            local_var_req_builder.query(&[("last_updated", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__gte {
        local_var_req_builder =
            local_var_req_builder.query(&[("last_updated__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__lte {
        local_var_req_builder =
            local_var_req_builder.query(&[("last_updated__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = q {
        local_var_req_builder = local_var_req_builder.query(&[("q", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lte {
        local_var_req_builder =
            local_var_req_builder.query(&[("id__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lt {
        local_var_req_builder =
            local_var_req_builder.query(&[("id__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gte {
        local_var_req_builder =
            local_var_req_builder.query(&[("id__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gt {
        local_var_req_builder =
            local_var_req_builder.query(&[("id__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("name__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__ic {
        local_var_req_builder =
            local_var_req_builder.query(&[("name__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nic {
        local_var_req_builder =
            local_var_req_builder.query(&[("name__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__iew {
        local_var_req_builder =
            local_var_req_builder.query(&[("name__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__niew {
        local_var_req_builder =
            local_var_req_builder.query(&[("name__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__isw {
        local_var_req_builder =
            local_var_req_builder.query(&[("name__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nisw {
        local_var_req_builder =
            local_var_req_builder.query(&[("name__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__ie {
        local_var_req_builder =
            local_var_req_builder.query(&[("name__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nie {
        local_var_req_builder =
            local_var_req_builder.query(&[("name__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__empty {
        local_var_req_builder =
            local_var_req_builder.query(&[("name__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("slug__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__ic {
        local_var_req_builder =
            local_var_req_builder.query(&[("slug__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__nic {
        local_var_req_builder =
            local_var_req_builder.query(&[("slug__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__iew {
        local_var_req_builder =
            local_var_req_builder.query(&[("slug__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__niew {
        local_var_req_builder =
            local_var_req_builder.query(&[("slug__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__isw {
        local_var_req_builder =
            local_var_req_builder.query(&[("slug__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__nisw {
        local_var_req_builder =
            local_var_req_builder.query(&[("slug__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__ie {
        local_var_req_builder =
            local_var_req_builder.query(&[("slug__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__nie {
        local_var_req_builder =
            local_var_req_builder.query(&[("slug__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__empty {
        local_var_req_builder =
            local_var_req_builder.query(&[("slug__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("description__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__ic {
        local_var_req_builder =
            local_var_req_builder.query(&[("description__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__nic {
        local_var_req_builder =
            local_var_req_builder.query(&[("description__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__iew {
        local_var_req_builder =
            local_var_req_builder.query(&[("description__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__niew {
        local_var_req_builder =
            local_var_req_builder.query(&[("description__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__isw {
        local_var_req_builder =
            local_var_req_builder.query(&[("description__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__nisw {
        local_var_req_builder =
            local_var_req_builder.query(&[("description__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__ie {
        local_var_req_builder =
            local_var_req_builder.query(&[("description__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__nie {
        local_var_req_builder =
            local_var_req_builder.query(&[("description__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__empty {
        local_var_req_builder =
            local_var_req_builder.query(&[("description__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder =
            local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = offset {
        local_var_req_builder =
            local_var_req_builder.query(&[("offset", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<VirtualizationClusterTypesListError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn virtualization_cluster_types_partial_update(
    configuration: &configuration::Configuration,
    id: i32,
    data: crate::models::ClusterType,
) -> Result<crate::models::ClusterType, Error<VirtualizationClusterTypesPartialUpdateError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!(
        "{}/virtualization/cluster-types/{id}/",
        configuration.base_path,
        id = id
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<VirtualizationClusterTypesPartialUpdateError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn virtualization_cluster_types_read(
    configuration: &configuration::Configuration,
    id: i32,
) -> Result<crate::models::ClusterType, Error<VirtualizationClusterTypesReadError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!(
        "{}/virtualization/cluster-types/{id}/",
        configuration.base_path,
        id = id
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<VirtualizationClusterTypesReadError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn virtualization_cluster_types_update(
    configuration: &configuration::Configuration,
    id: i32,
    data: crate::models::ClusterType,
) -> Result<crate::models::ClusterType, Error<VirtualizationClusterTypesUpdateError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!(
        "{}/virtualization/cluster-types/{id}/",
        configuration.base_path,
        id = id
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<VirtualizationClusterTypesUpdateError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn virtualization_clusters_bulk_delete(
    configuration: &configuration::Configuration,
) -> Result<(), Error<VirtualizationClustersBulkDeleteError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/virtualization/clusters/", configuration.base_path);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<VirtualizationClustersBulkDeleteError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn virtualization_clusters_bulk_partial_update(
    configuration: &configuration::Configuration,
    data: crate::models::WritableCluster,
) -> Result<crate::models::Cluster, Error<VirtualizationClustersBulkPartialUpdateError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/virtualization/clusters/", configuration.base_path);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<VirtualizationClustersBulkPartialUpdateError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn virtualization_clusters_bulk_update(
    configuration: &configuration::Configuration,
    data: crate::models::WritableCluster,
) -> Result<crate::models::Cluster, Error<VirtualizationClustersBulkUpdateError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/virtualization/clusters/", configuration.base_path);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<VirtualizationClustersBulkUpdateError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn virtualization_clusters_create(
    configuration: &configuration::Configuration,
    data: crate::models::WritableCluster,
) -> Result<crate::models::Cluster, Error<VirtualizationClustersCreateError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/virtualization/clusters/", configuration.base_path);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<VirtualizationClustersCreateError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn virtualization_clusters_delete(
    configuration: &configuration::Configuration,
    id: i32,
) -> Result<(), Error<VirtualizationClustersDeleteError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!(
        "{}/virtualization/clusters/{id}/",
        configuration.base_path,
        id = id
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<VirtualizationClustersDeleteError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Overrides ListModelMixin to allow processing ExportTemplates.
pub async fn virtualization_clusters_list(
    configuration: &configuration::Configuration,
    id: Option<&str>,
    name: Option<&str>,
    created: Option<&str>,
    created__gte: Option<&str>,
    created__lte: Option<&str>,
    last_updated: Option<&str>,
    last_updated__gte: Option<&str>,
    last_updated__lte: Option<&str>,
    tenant_group_id: Option<&str>,
    tenant_group: Option<&str>,
    tenant_id: Option<&str>,
    tenant: Option<&str>,
    q: Option<&str>,
    region_id: Option<&str>,
    region: Option<&str>,
    site_group_id: Option<&str>,
    site_group: Option<&str>,
    site_id: Option<&str>,
    site: Option<&str>,
    group_id: Option<&str>,
    group: Option<&str>,
    type_id: Option<&str>,
    _type: Option<&str>,
    tag: Option<&str>,
    id__n: Option<&str>,
    id__lte: Option<&str>,
    id__lt: Option<&str>,
    id__gte: Option<&str>,
    id__gt: Option<&str>,
    name__n: Option<&str>,
    name__ic: Option<&str>,
    name__nic: Option<&str>,
    name__iew: Option<&str>,
    name__niew: Option<&str>,
    name__isw: Option<&str>,
    name__nisw: Option<&str>,
    name__ie: Option<&str>,
    name__nie: Option<&str>,
    name__empty: Option<&str>,
    tenant_group_id__n: Option<&str>,
    tenant_group__n: Option<&str>,
    tenant_id__n: Option<&str>,
    tenant__n: Option<&str>,
    region_id__n: Option<&str>,
    region__n: Option<&str>,
    site_group_id__n: Option<&str>,
    site_group__n: Option<&str>,
    site_id__n: Option<&str>,
    site__n: Option<&str>,
    group_id__n: Option<&str>,
    group__n: Option<&str>,
    type_id__n: Option<&str>,
    type__n: Option<&str>,
    tag__n: Option<&str>,
    limit: Option<i32>,
    offset: Option<i32>,
) -> Result<crate::models::InlineResponse20068, Error<VirtualizationClustersListError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/virtualization/clusters/", configuration.base_path);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = id {
        local_var_req_builder = local_var_req_builder.query(&[("id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name {
        local_var_req_builder =
            local_var_req_builder.query(&[("name", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created {
        local_var_req_builder =
            local_var_req_builder.query(&[("created", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__gte {
        local_var_req_builder =
            local_var_req_builder.query(&[("created__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__lte {
        local_var_req_builder =
            local_var_req_builder.query(&[("created__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated {
        local_var_req_builder =
            local_var_req_builder.query(&[("last_updated", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__gte {
        local_var_req_builder =
            local_var_req_builder.query(&[("last_updated__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__lte {
        local_var_req_builder =
            local_var_req_builder.query(&[("last_updated__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tenant_group_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("tenant_group_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tenant_group {
        local_var_req_builder =
            local_var_req_builder.query(&[("tenant_group", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tenant_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("tenant_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tenant {
        local_var_req_builder =
            local_var_req_builder.query(&[("tenant", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = q {
        local_var_req_builder = local_var_req_builder.query(&[("q", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = region_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("region_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = region {
        local_var_req_builder =
            local_var_req_builder.query(&[("region", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site_group_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("site_group_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site_group {
        local_var_req_builder =
            local_var_req_builder.query(&[("site_group", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("site_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site {
        local_var_req_builder =
            local_var_req_builder.query(&[("site", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = group_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("group_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = group {
        local_var_req_builder =
            local_var_req_builder.query(&[("group", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = type_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("type_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = _type {
        local_var_req_builder =
            local_var_req_builder.query(&[("type", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tag {
        local_var_req_builder = local_var_req_builder.query(&[("tag", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lte {
        local_var_req_builder =
            local_var_req_builder.query(&[("id__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lt {
        local_var_req_builder =
            local_var_req_builder.query(&[("id__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gte {
        local_var_req_builder =
            local_var_req_builder.query(&[("id__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gt {
        local_var_req_builder =
            local_var_req_builder.query(&[("id__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("name__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__ic {
        local_var_req_builder =
            local_var_req_builder.query(&[("name__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nic {
        local_var_req_builder =
            local_var_req_builder.query(&[("name__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__iew {
        local_var_req_builder =
            local_var_req_builder.query(&[("name__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__niew {
        local_var_req_builder =
            local_var_req_builder.query(&[("name__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__isw {
        local_var_req_builder =
            local_var_req_builder.query(&[("name__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nisw {
        local_var_req_builder =
            local_var_req_builder.query(&[("name__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__ie {
        local_var_req_builder =
            local_var_req_builder.query(&[("name__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nie {
        local_var_req_builder =
            local_var_req_builder.query(&[("name__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__empty {
        local_var_req_builder =
            local_var_req_builder.query(&[("name__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tenant_group_id__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("tenant_group_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tenant_group__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("tenant_group__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tenant_id__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("tenant_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tenant__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("tenant__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = region_id__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("region_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = region__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("region__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site_group_id__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("site_group_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site_group__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("site_group__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site_id__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("site_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("site__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = group_id__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("group_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = group__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("group__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = type_id__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("type_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = type__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("type__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tag__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("tag__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder =
            local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = offset {
        local_var_req_builder =
            local_var_req_builder.query(&[("offset", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<VirtualizationClustersListError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn virtualization_clusters_partial_update(
    configuration: &configuration::Configuration,
    id: i32,
    data: crate::models::WritableCluster,
) -> Result<crate::models::Cluster, Error<VirtualizationClustersPartialUpdateError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!(
        "{}/virtualization/clusters/{id}/",
        configuration.base_path,
        id = id
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<VirtualizationClustersPartialUpdateError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn virtualization_clusters_read(
    configuration: &configuration::Configuration,
    id: i32,
) -> Result<crate::models::Cluster, Error<VirtualizationClustersReadError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!(
        "{}/virtualization/clusters/{id}/",
        configuration.base_path,
        id = id
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<VirtualizationClustersReadError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn virtualization_clusters_update(
    configuration: &configuration::Configuration,
    id: i32,
    data: crate::models::WritableCluster,
) -> Result<crate::models::Cluster, Error<VirtualizationClustersUpdateError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!(
        "{}/virtualization/clusters/{id}/",
        configuration.base_path,
        id = id
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<VirtualizationClustersUpdateError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn virtualization_interfaces_bulk_delete(
    configuration: &configuration::Configuration,
) -> Result<(), Error<VirtualizationInterfacesBulkDeleteError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/virtualization/interfaces/", configuration.base_path);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<VirtualizationInterfacesBulkDeleteError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn virtualization_interfaces_bulk_partial_update(
    configuration: &configuration::Configuration,
    data: crate::models::WritableVmInterface,
) -> Result<crate::models::VmInterface, Error<VirtualizationInterfacesBulkPartialUpdateError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/virtualization/interfaces/", configuration.base_path);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<VirtualizationInterfacesBulkPartialUpdateError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn virtualization_interfaces_bulk_update(
    configuration: &configuration::Configuration,
    data: crate::models::WritableVmInterface,
) -> Result<crate::models::VmInterface, Error<VirtualizationInterfacesBulkUpdateError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/virtualization/interfaces/", configuration.base_path);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<VirtualizationInterfacesBulkUpdateError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn virtualization_interfaces_create(
    configuration: &configuration::Configuration,
    data: crate::models::WritableVmInterface,
) -> Result<crate::models::VmInterface, Error<VirtualizationInterfacesCreateError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/virtualization/interfaces/", configuration.base_path);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<VirtualizationInterfacesCreateError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn virtualization_interfaces_delete(
    configuration: &configuration::Configuration,
    id: i32,
) -> Result<(), Error<VirtualizationInterfacesDeleteError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!(
        "{}/virtualization/interfaces/{id}/",
        configuration.base_path,
        id = id
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<VirtualizationInterfacesDeleteError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Overrides ListModelMixin to allow processing ExportTemplates.
pub async fn virtualization_interfaces_list(
    configuration: &configuration::Configuration,
    id: Option<&str>,
    name: Option<&str>,
    enabled: Option<&str>,
    mtu: Option<&str>,
    created: Option<&str>,
    created__gte: Option<&str>,
    created__lte: Option<&str>,
    last_updated: Option<&str>,
    last_updated__gte: Option<&str>,
    last_updated__lte: Option<&str>,
    q: Option<&str>,
    cluster_id: Option<&str>,
    cluster: Option<&str>,
    virtual_machine_id: Option<&str>,
    virtual_machine: Option<&str>,
    parent_id: Option<&str>,
    mac_address: Option<&str>,
    tag: Option<&str>,
    id__n: Option<&str>,
    id__lte: Option<&str>,
    id__lt: Option<&str>,
    id__gte: Option<&str>,
    id__gt: Option<&str>,
    name__n: Option<&str>,
    name__ic: Option<&str>,
    name__nic: Option<&str>,
    name__iew: Option<&str>,
    name__niew: Option<&str>,
    name__isw: Option<&str>,
    name__nisw: Option<&str>,
    name__ie: Option<&str>,
    name__nie: Option<&str>,
    name__empty: Option<&str>,
    mtu__n: Option<&str>,
    mtu__lte: Option<&str>,
    mtu__lt: Option<&str>,
    mtu__gte: Option<&str>,
    mtu__gt: Option<&str>,
    cluster_id__n: Option<&str>,
    cluster__n: Option<&str>,
    virtual_machine_id__n: Option<&str>,
    virtual_machine__n: Option<&str>,
    parent_id__n: Option<&str>,
    mac_address__n: Option<&str>,
    mac_address__ic: Option<&str>,
    mac_address__nic: Option<&str>,
    mac_address__iew: Option<&str>,
    mac_address__niew: Option<&str>,
    mac_address__isw: Option<&str>,
    mac_address__nisw: Option<&str>,
    mac_address__ie: Option<&str>,
    mac_address__nie: Option<&str>,
    tag__n: Option<&str>,
    limit: Option<i32>,
    offset: Option<i32>,
) -> Result<crate::models::InlineResponse20069, Error<VirtualizationInterfacesListError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/virtualization/interfaces/", configuration.base_path);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = id {
        local_var_req_builder = local_var_req_builder.query(&[("id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name {
        local_var_req_builder =
            local_var_req_builder.query(&[("name", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = enabled {
        local_var_req_builder =
            local_var_req_builder.query(&[("enabled", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = mtu {
        local_var_req_builder = local_var_req_builder.query(&[("mtu", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created {
        local_var_req_builder =
            local_var_req_builder.query(&[("created", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__gte {
        local_var_req_builder =
            local_var_req_builder.query(&[("created__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__lte {
        local_var_req_builder =
            local_var_req_builder.query(&[("created__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated {
        local_var_req_builder =
            local_var_req_builder.query(&[("last_updated", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__gte {
        local_var_req_builder =
            local_var_req_builder.query(&[("last_updated__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__lte {
        local_var_req_builder =
            local_var_req_builder.query(&[("last_updated__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = q {
        local_var_req_builder = local_var_req_builder.query(&[("q", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = cluster_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("cluster_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = cluster {
        local_var_req_builder =
            local_var_req_builder.query(&[("cluster", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = virtual_machine_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("virtual_machine_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = virtual_machine {
        local_var_req_builder =
            local_var_req_builder.query(&[("virtual_machine", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = parent_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("parent_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = mac_address {
        local_var_req_builder =
            local_var_req_builder.query(&[("mac_address", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tag {
        local_var_req_builder = local_var_req_builder.query(&[("tag", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lte {
        local_var_req_builder =
            local_var_req_builder.query(&[("id__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lt {
        local_var_req_builder =
            local_var_req_builder.query(&[("id__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gte {
        local_var_req_builder =
            local_var_req_builder.query(&[("id__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gt {
        local_var_req_builder =
            local_var_req_builder.query(&[("id__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("name__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__ic {
        local_var_req_builder =
            local_var_req_builder.query(&[("name__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nic {
        local_var_req_builder =
            local_var_req_builder.query(&[("name__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__iew {
        local_var_req_builder =
            local_var_req_builder.query(&[("name__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__niew {
        local_var_req_builder =
            local_var_req_builder.query(&[("name__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__isw {
        local_var_req_builder =
            local_var_req_builder.query(&[("name__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nisw {
        local_var_req_builder =
            local_var_req_builder.query(&[("name__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__ie {
        local_var_req_builder =
            local_var_req_builder.query(&[("name__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nie {
        local_var_req_builder =
            local_var_req_builder.query(&[("name__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__empty {
        local_var_req_builder =
            local_var_req_builder.query(&[("name__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = mtu__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("mtu__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = mtu__lte {
        local_var_req_builder =
            local_var_req_builder.query(&[("mtu__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = mtu__lt {
        local_var_req_builder =
            local_var_req_builder.query(&[("mtu__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = mtu__gte {
        local_var_req_builder =
            local_var_req_builder.query(&[("mtu__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = mtu__gt {
        local_var_req_builder =
            local_var_req_builder.query(&[("mtu__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = cluster_id__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("cluster_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = cluster__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("cluster__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = virtual_machine_id__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("virtual_machine_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = virtual_machine__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("virtual_machine__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = parent_id__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("parent_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = mac_address__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("mac_address__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = mac_address__ic {
        local_var_req_builder =
            local_var_req_builder.query(&[("mac_address__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = mac_address__nic {
        local_var_req_builder =
            local_var_req_builder.query(&[("mac_address__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = mac_address__iew {
        local_var_req_builder =
            local_var_req_builder.query(&[("mac_address__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = mac_address__niew {
        local_var_req_builder =
            local_var_req_builder.query(&[("mac_address__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = mac_address__isw {
        local_var_req_builder =
            local_var_req_builder.query(&[("mac_address__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = mac_address__nisw {
        local_var_req_builder =
            local_var_req_builder.query(&[("mac_address__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = mac_address__ie {
        local_var_req_builder =
            local_var_req_builder.query(&[("mac_address__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = mac_address__nie {
        local_var_req_builder =
            local_var_req_builder.query(&[("mac_address__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tag__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("tag__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder =
            local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = offset {
        local_var_req_builder =
            local_var_req_builder.query(&[("offset", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<VirtualizationInterfacesListError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn virtualization_interfaces_partial_update(
    configuration: &configuration::Configuration,
    id: i32,
    data: crate::models::WritableVmInterface,
) -> Result<crate::models::VmInterface, Error<VirtualizationInterfacesPartialUpdateError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!(
        "{}/virtualization/interfaces/{id}/",
        configuration.base_path,
        id = id
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<VirtualizationInterfacesPartialUpdateError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn virtualization_interfaces_read(
    configuration: &configuration::Configuration,
    id: i32,
) -> Result<crate::models::VmInterface, Error<VirtualizationInterfacesReadError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!(
        "{}/virtualization/interfaces/{id}/",
        configuration.base_path,
        id = id
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<VirtualizationInterfacesReadError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn virtualization_interfaces_update(
    configuration: &configuration::Configuration,
    id: i32,
    data: crate::models::WritableVmInterface,
) -> Result<crate::models::VmInterface, Error<VirtualizationInterfacesUpdateError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!(
        "{}/virtualization/interfaces/{id}/",
        configuration.base_path,
        id = id
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<VirtualizationInterfacesUpdateError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn virtualization_virtual_machines_bulk_delete(
    configuration: &configuration::Configuration,
) -> Result<(), Error<VirtualizationVirtualMachinesBulkDeleteError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!(
        "{}/virtualization/virtual-machines/",
        configuration.base_path
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<VirtualizationVirtualMachinesBulkDeleteError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn virtualization_virtual_machines_bulk_partial_update(
    configuration: &configuration::Configuration,
    data: crate::models::WritableVirtualMachineWithConfigContext,
) -> Result<
    crate::models::VirtualMachineWithConfigContext,
    Error<VirtualizationVirtualMachinesBulkPartialUpdateError>,
> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!(
        "{}/virtualization/virtual-machines/",
        configuration.base_path
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<VirtualizationVirtualMachinesBulkPartialUpdateError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn virtualization_virtual_machines_bulk_update(
    configuration: &configuration::Configuration,
    data: crate::models::WritableVirtualMachineWithConfigContext,
) -> Result<
    crate::models::VirtualMachineWithConfigContext,
    Error<VirtualizationVirtualMachinesBulkUpdateError>,
> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!(
        "{}/virtualization/virtual-machines/",
        configuration.base_path
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<VirtualizationVirtualMachinesBulkUpdateError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn virtualization_virtual_machines_create(
    configuration: &configuration::Configuration,
    data: crate::models::WritableVirtualMachineWithConfigContext,
) -> Result<
    crate::models::VirtualMachineWithConfigContext,
    Error<VirtualizationVirtualMachinesCreateError>,
> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!(
        "{}/virtualization/virtual-machines/",
        configuration.base_path
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<VirtualizationVirtualMachinesCreateError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn virtualization_virtual_machines_delete(
    configuration: &configuration::Configuration,
    id: i32,
) -> Result<(), Error<VirtualizationVirtualMachinesDeleteError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!(
        "{}/virtualization/virtual-machines/{id}/",
        configuration.base_path,
        id = id
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<VirtualizationVirtualMachinesDeleteError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Overrides ListModelMixin to allow processing ExportTemplates.
pub async fn virtualization_virtual_machines_list(
    configuration: &configuration::Configuration,
    id: Option<&str>,
    name: Option<&str>,
    cluster: Option<&str>,
    vcpus: Option<&str>,
    memory: Option<&str>,
    disk: Option<&str>,
    created: Option<&str>,
    created__gte: Option<&str>,
    created__lte: Option<&str>,
    last_updated: Option<&str>,
    last_updated__gte: Option<&str>,
    last_updated__lte: Option<&str>,
    tenant_group_id: Option<&str>,
    tenant_group: Option<&str>,
    tenant_id: Option<&str>,
    tenant: Option<&str>,
    local_context_data: Option<&str>,
    q: Option<&str>,
    status: Option<&str>,
    cluster_group_id: Option<&str>,
    cluster_group: Option<&str>,
    cluster_type_id: Option<&str>,
    cluster_type: Option<&str>,
    cluster_id: Option<&str>,
    region_id: Option<&str>,
    region: Option<&str>,
    site_group_id: Option<&str>,
    site_group: Option<&str>,
    site_id: Option<&str>,
    site: Option<&str>,
    role_id: Option<&str>,
    role: Option<&str>,
    platform_id: Option<&str>,
    platform: Option<&str>,
    mac_address: Option<&str>,
    has_primary_ip: Option<&str>,
    tag: Option<&str>,
    id__n: Option<&str>,
    id__lte: Option<&str>,
    id__lt: Option<&str>,
    id__gte: Option<&str>,
    id__gt: Option<&str>,
    name__n: Option<&str>,
    name__ic: Option<&str>,
    name__nic: Option<&str>,
    name__iew: Option<&str>,
    name__niew: Option<&str>,
    name__isw: Option<&str>,
    name__nisw: Option<&str>,
    name__ie: Option<&str>,
    name__nie: Option<&str>,
    name__empty: Option<&str>,
    cluster__n: Option<&str>,
    vcpus__n: Option<&str>,
    vcpus__lte: Option<&str>,
    vcpus__lt: Option<&str>,
    vcpus__gte: Option<&str>,
    vcpus__gt: Option<&str>,
    memory__n: Option<&str>,
    memory__lte: Option<&str>,
    memory__lt: Option<&str>,
    memory__gte: Option<&str>,
    memory__gt: Option<&str>,
    disk__n: Option<&str>,
    disk__lte: Option<&str>,
    disk__lt: Option<&str>,
    disk__gte: Option<&str>,
    disk__gt: Option<&str>,
    tenant_group_id__n: Option<&str>,
    tenant_group__n: Option<&str>,
    tenant_id__n: Option<&str>,
    tenant__n: Option<&str>,
    status__n: Option<&str>,
    cluster_group_id__n: Option<&str>,
    cluster_group__n: Option<&str>,
    cluster_type_id__n: Option<&str>,
    cluster_type__n: Option<&str>,
    cluster_id__n: Option<&str>,
    region_id__n: Option<&str>,
    region__n: Option<&str>,
    site_group_id__n: Option<&str>,
    site_group__n: Option<&str>,
    site_id__n: Option<&str>,
    site__n: Option<&str>,
    role_id__n: Option<&str>,
    role__n: Option<&str>,
    platform_id__n: Option<&str>,
    platform__n: Option<&str>,
    mac_address__n: Option<&str>,
    mac_address__ic: Option<&str>,
    mac_address__nic: Option<&str>,
    mac_address__iew: Option<&str>,
    mac_address__niew: Option<&str>,
    mac_address__isw: Option<&str>,
    mac_address__nisw: Option<&str>,
    mac_address__ie: Option<&str>,
    mac_address__nie: Option<&str>,
    tag__n: Option<&str>,
    limit: Option<i32>,
    offset: Option<i32>,
) -> Result<crate::models::InlineResponse20070, Error<VirtualizationVirtualMachinesListError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!(
        "{}/virtualization/virtual-machines/",
        configuration.base_path
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = id {
        local_var_req_builder = local_var_req_builder.query(&[("id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name {
        local_var_req_builder =
            local_var_req_builder.query(&[("name", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = cluster {
        local_var_req_builder =
            local_var_req_builder.query(&[("cluster", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = vcpus {
        local_var_req_builder =
            local_var_req_builder.query(&[("vcpus", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = memory {
        local_var_req_builder =
            local_var_req_builder.query(&[("memory", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = disk {
        local_var_req_builder =
            local_var_req_builder.query(&[("disk", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created {
        local_var_req_builder =
            local_var_req_builder.query(&[("created", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__gte {
        local_var_req_builder =
            local_var_req_builder.query(&[("created__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__lte {
        local_var_req_builder =
            local_var_req_builder.query(&[("created__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated {
        local_var_req_builder =
            local_var_req_builder.query(&[("last_updated", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__gte {
        local_var_req_builder =
            local_var_req_builder.query(&[("last_updated__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__lte {
        local_var_req_builder =
            local_var_req_builder.query(&[("last_updated__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tenant_group_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("tenant_group_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tenant_group {
        local_var_req_builder =
            local_var_req_builder.query(&[("tenant_group", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tenant_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("tenant_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tenant {
        local_var_req_builder =
            local_var_req_builder.query(&[("tenant", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = local_context_data {
        local_var_req_builder =
            local_var_req_builder.query(&[("local_context_data", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = q {
        local_var_req_builder = local_var_req_builder.query(&[("q", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = status {
        local_var_req_builder =
            local_var_req_builder.query(&[("status", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = cluster_group_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("cluster_group_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = cluster_group {
        local_var_req_builder =
            local_var_req_builder.query(&[("cluster_group", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = cluster_type_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("cluster_type_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = cluster_type {
        local_var_req_builder =
            local_var_req_builder.query(&[("cluster_type", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = cluster_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("cluster_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = region_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("region_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = region {
        local_var_req_builder =
            local_var_req_builder.query(&[("region", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site_group_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("site_group_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site_group {
        local_var_req_builder =
            local_var_req_builder.query(&[("site_group", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("site_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site {
        local_var_req_builder =
            local_var_req_builder.query(&[("site", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = role_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("role_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = role {
        local_var_req_builder =
            local_var_req_builder.query(&[("role", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = platform_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("platform_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = platform {
        local_var_req_builder =
            local_var_req_builder.query(&[("platform", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = mac_address {
        local_var_req_builder =
            local_var_req_builder.query(&[("mac_address", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = has_primary_ip {
        local_var_req_builder =
            local_var_req_builder.query(&[("has_primary_ip", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tag {
        local_var_req_builder = local_var_req_builder.query(&[("tag", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lte {
        local_var_req_builder =
            local_var_req_builder.query(&[("id__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lt {
        local_var_req_builder =
            local_var_req_builder.query(&[("id__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gte {
        local_var_req_builder =
            local_var_req_builder.query(&[("id__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gt {
        local_var_req_builder =
            local_var_req_builder.query(&[("id__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("name__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__ic {
        local_var_req_builder =
            local_var_req_builder.query(&[("name__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nic {
        local_var_req_builder =
            local_var_req_builder.query(&[("name__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__iew {
        local_var_req_builder =
            local_var_req_builder.query(&[("name__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__niew {
        local_var_req_builder =
            local_var_req_builder.query(&[("name__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__isw {
        local_var_req_builder =
            local_var_req_builder.query(&[("name__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nisw {
        local_var_req_builder =
            local_var_req_builder.query(&[("name__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__ie {
        local_var_req_builder =
            local_var_req_builder.query(&[("name__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nie {
        local_var_req_builder =
            local_var_req_builder.query(&[("name__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__empty {
        local_var_req_builder =
            local_var_req_builder.query(&[("name__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = cluster__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("cluster__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = vcpus__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("vcpus__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = vcpus__lte {
        local_var_req_builder =
            local_var_req_builder.query(&[("vcpus__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = vcpus__lt {
        local_var_req_builder =
            local_var_req_builder.query(&[("vcpus__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = vcpus__gte {
        local_var_req_builder =
            local_var_req_builder.query(&[("vcpus__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = vcpus__gt {
        local_var_req_builder =
            local_var_req_builder.query(&[("vcpus__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = memory__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("memory__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = memory__lte {
        local_var_req_builder =
            local_var_req_builder.query(&[("memory__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = memory__lt {
        local_var_req_builder =
            local_var_req_builder.query(&[("memory__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = memory__gte {
        local_var_req_builder =
            local_var_req_builder.query(&[("memory__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = memory__gt {
        local_var_req_builder =
            local_var_req_builder.query(&[("memory__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = disk__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("disk__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = disk__lte {
        local_var_req_builder =
            local_var_req_builder.query(&[("disk__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = disk__lt {
        local_var_req_builder =
            local_var_req_builder.query(&[("disk__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = disk__gte {
        local_var_req_builder =
            local_var_req_builder.query(&[("disk__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = disk__gt {
        local_var_req_builder =
            local_var_req_builder.query(&[("disk__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tenant_group_id__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("tenant_group_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tenant_group__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("tenant_group__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tenant_id__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("tenant_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tenant__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("tenant__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = status__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("status__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = cluster_group_id__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("cluster_group_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = cluster_group__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("cluster_group__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = cluster_type_id__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("cluster_type_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = cluster_type__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("cluster_type__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = cluster_id__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("cluster_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = region_id__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("region_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = region__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("region__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site_group_id__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("site_group_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site_group__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("site_group__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site_id__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("site_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("site__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = role_id__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("role_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = role__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("role__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = platform_id__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("platform_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = platform__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("platform__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = mac_address__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("mac_address__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = mac_address__ic {
        local_var_req_builder =
            local_var_req_builder.query(&[("mac_address__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = mac_address__nic {
        local_var_req_builder =
            local_var_req_builder.query(&[("mac_address__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = mac_address__iew {
        local_var_req_builder =
            local_var_req_builder.query(&[("mac_address__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = mac_address__niew {
        local_var_req_builder =
            local_var_req_builder.query(&[("mac_address__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = mac_address__isw {
        local_var_req_builder =
            local_var_req_builder.query(&[("mac_address__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = mac_address__nisw {
        local_var_req_builder =
            local_var_req_builder.query(&[("mac_address__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = mac_address__ie {
        local_var_req_builder =
            local_var_req_builder.query(&[("mac_address__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = mac_address__nie {
        local_var_req_builder =
            local_var_req_builder.query(&[("mac_address__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tag__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("tag__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder =
            local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = offset {
        local_var_req_builder =
            local_var_req_builder.query(&[("offset", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<VirtualizationVirtualMachinesListError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn virtualization_virtual_machines_partial_update(
    configuration: &configuration::Configuration,
    id: i32,
    data: crate::models::WritableVirtualMachineWithConfigContext,
) -> Result<
    crate::models::VirtualMachineWithConfigContext,
    Error<VirtualizationVirtualMachinesPartialUpdateError>,
> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!(
        "{}/virtualization/virtual-machines/{id}/",
        configuration.base_path,
        id = id
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<VirtualizationVirtualMachinesPartialUpdateError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn virtualization_virtual_machines_read(
    configuration: &configuration::Configuration,
    id: i32,
) -> Result<
    crate::models::VirtualMachineWithConfigContext,
    Error<VirtualizationVirtualMachinesReadError>,
> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!(
        "{}/virtualization/virtual-machines/{id}/",
        configuration.base_path,
        id = id
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<VirtualizationVirtualMachinesReadError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn virtualization_virtual_machines_update(
    configuration: &configuration::Configuration,
    id: i32,
    data: crate::models::WritableVirtualMachineWithConfigContext,
) -> Result<
    crate::models::VirtualMachineWithConfigContext,
    Error<VirtualizationVirtualMachinesUpdateError>,
> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!(
        "{}/virtualization/virtual-machines/{id}/",
        configuration.base_path,
        id = id
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<VirtualizationVirtualMachinesUpdateError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}
