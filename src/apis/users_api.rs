/*
 * NetBox API
 *
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.0
 *
 * Generated by: https://openapi-generator.tech
 */

use reqwest;

use super::{configuration, Error};
use crate::apis::ResponseContent;

/// struct for typed errors of method `users_config_list`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UsersConfigListError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `users_groups_bulk_delete`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UsersGroupsBulkDeleteError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `users_groups_bulk_partial_update`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UsersGroupsBulkPartialUpdateError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `users_groups_bulk_update`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UsersGroupsBulkUpdateError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `users_groups_create`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UsersGroupsCreateError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `users_groups_delete`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UsersGroupsDeleteError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `users_groups_list`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UsersGroupsListError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `users_groups_partial_update`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UsersGroupsPartialUpdateError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `users_groups_read`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UsersGroupsReadError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `users_groups_update`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UsersGroupsUpdateError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `users_permissions_bulk_delete`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UsersPermissionsBulkDeleteError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `users_permissions_bulk_partial_update`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UsersPermissionsBulkPartialUpdateError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `users_permissions_bulk_update`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UsersPermissionsBulkUpdateError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `users_permissions_create`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UsersPermissionsCreateError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `users_permissions_delete`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UsersPermissionsDeleteError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `users_permissions_list`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UsersPermissionsListError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `users_permissions_partial_update`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UsersPermissionsPartialUpdateError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `users_permissions_read`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UsersPermissionsReadError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `users_permissions_update`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UsersPermissionsUpdateError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `users_tokens_bulk_delete`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UsersTokensBulkDeleteError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `users_tokens_bulk_partial_update`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UsersTokensBulkPartialUpdateError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `users_tokens_bulk_update`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UsersTokensBulkUpdateError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `users_tokens_create`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UsersTokensCreateError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `users_tokens_delete`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UsersTokensDeleteError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `users_tokens_list`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UsersTokensListError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `users_tokens_partial_update`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UsersTokensPartialUpdateError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `users_tokens_provision_create`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UsersTokensProvisionCreateError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `users_tokens_read`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UsersTokensReadError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `users_tokens_update`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UsersTokensUpdateError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `users_users_bulk_delete`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UsersUsersBulkDeleteError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `users_users_bulk_partial_update`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UsersUsersBulkPartialUpdateError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `users_users_bulk_update`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UsersUsersBulkUpdateError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `users_users_create`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UsersUsersCreateError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `users_users_delete`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UsersUsersDeleteError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `users_users_list`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UsersUsersListError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `users_users_partial_update`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UsersUsersPartialUpdateError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `users_users_read`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UsersUsersReadError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `users_users_update`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UsersUsersUpdateError {
    UnknownValue(serde_json::Value),
}

/// Return the UserConfig for the currently authenticated User.
pub async fn users_config_list(
    configuration: &configuration::Configuration,
) -> Result<(), Error<UsersConfigListError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/users/config/", configuration.base_path);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<UsersConfigListError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn users_groups_bulk_delete(
    configuration: &configuration::Configuration,
) -> Result<(), Error<UsersGroupsBulkDeleteError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/users/groups/", configuration.base_path);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<UsersGroupsBulkDeleteError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn users_groups_bulk_partial_update(
    configuration: &configuration::Configuration,
    data: crate::models::Group,
) -> Result<crate::models::Group, Error<UsersGroupsBulkPartialUpdateError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/users/groups/", configuration.base_path);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<UsersGroupsBulkPartialUpdateError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn users_groups_bulk_update(
    configuration: &configuration::Configuration,
    data: crate::models::Group,
) -> Result<crate::models::Group, Error<UsersGroupsBulkUpdateError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/users/groups/", configuration.base_path);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<UsersGroupsBulkUpdateError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn users_groups_create(
    configuration: &configuration::Configuration,
    data: crate::models::Group,
) -> Result<crate::models::Group, Error<UsersGroupsCreateError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/users/groups/", configuration.base_path);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<UsersGroupsCreateError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn users_groups_delete(
    configuration: &configuration::Configuration,
    id: i32,
) -> Result<(), Error<UsersGroupsDeleteError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/users/groups/{id}/", configuration.base_path, id = id);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<UsersGroupsDeleteError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Overrides ListModelMixin to allow processing ExportTemplates.
pub async fn users_groups_list(
    configuration: &configuration::Configuration,
    id: Option<&str>,
    name: Option<&str>,
    q: Option<&str>,
    id__n: Option<&str>,
    id__lte: Option<&str>,
    id__lt: Option<&str>,
    id__gte: Option<&str>,
    id__gt: Option<&str>,
    name__n: Option<&str>,
    name__ic: Option<&str>,
    name__nic: Option<&str>,
    name__iew: Option<&str>,
    name__niew: Option<&str>,
    name__isw: Option<&str>,
    name__nisw: Option<&str>,
    name__ie: Option<&str>,
    name__nie: Option<&str>,
    name__empty: Option<&str>,
    limit: Option<i32>,
    offset: Option<i32>,
) -> Result<crate::models::InlineResponse20062, Error<UsersGroupsListError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/users/groups/", configuration.base_path);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = id {
        local_var_req_builder = local_var_req_builder.query(&[("id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name {
        local_var_req_builder =
            local_var_req_builder.query(&[("name", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = q {
        local_var_req_builder = local_var_req_builder.query(&[("q", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lte {
        local_var_req_builder =
            local_var_req_builder.query(&[("id__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lt {
        local_var_req_builder =
            local_var_req_builder.query(&[("id__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gte {
        local_var_req_builder =
            local_var_req_builder.query(&[("id__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gt {
        local_var_req_builder =
            local_var_req_builder.query(&[("id__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("name__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__ic {
        local_var_req_builder =
            local_var_req_builder.query(&[("name__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nic {
        local_var_req_builder =
            local_var_req_builder.query(&[("name__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__iew {
        local_var_req_builder =
            local_var_req_builder.query(&[("name__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__niew {
        local_var_req_builder =
            local_var_req_builder.query(&[("name__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__isw {
        local_var_req_builder =
            local_var_req_builder.query(&[("name__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nisw {
        local_var_req_builder =
            local_var_req_builder.query(&[("name__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__ie {
        local_var_req_builder =
            local_var_req_builder.query(&[("name__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nie {
        local_var_req_builder =
            local_var_req_builder.query(&[("name__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__empty {
        local_var_req_builder =
            local_var_req_builder.query(&[("name__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder =
            local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = offset {
        local_var_req_builder =
            local_var_req_builder.query(&[("offset", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<UsersGroupsListError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn users_groups_partial_update(
    configuration: &configuration::Configuration,
    id: i32,
    data: crate::models::Group,
) -> Result<crate::models::Group, Error<UsersGroupsPartialUpdateError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/users/groups/{id}/", configuration.base_path, id = id);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<UsersGroupsPartialUpdateError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn users_groups_read(
    configuration: &configuration::Configuration,
    id: i32,
) -> Result<crate::models::Group, Error<UsersGroupsReadError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/users/groups/{id}/", configuration.base_path, id = id);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<UsersGroupsReadError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn users_groups_update(
    configuration: &configuration::Configuration,
    id: i32,
    data: crate::models::Group,
) -> Result<crate::models::Group, Error<UsersGroupsUpdateError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/users/groups/{id}/", configuration.base_path, id = id);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<UsersGroupsUpdateError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn users_permissions_bulk_delete(
    configuration: &configuration::Configuration,
) -> Result<(), Error<UsersPermissionsBulkDeleteError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/users/permissions/", configuration.base_path);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<UsersPermissionsBulkDeleteError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn users_permissions_bulk_partial_update(
    configuration: &configuration::Configuration,
    data: crate::models::WritableObjectPermission,
) -> Result<crate::models::ObjectPermission, Error<UsersPermissionsBulkPartialUpdateError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/users/permissions/", configuration.base_path);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<UsersPermissionsBulkPartialUpdateError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn users_permissions_bulk_update(
    configuration: &configuration::Configuration,
    data: crate::models::WritableObjectPermission,
) -> Result<crate::models::ObjectPermission, Error<UsersPermissionsBulkUpdateError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/users/permissions/", configuration.base_path);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<UsersPermissionsBulkUpdateError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn users_permissions_create(
    configuration: &configuration::Configuration,
    data: crate::models::WritableObjectPermission,
) -> Result<crate::models::ObjectPermission, Error<UsersPermissionsCreateError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/users/permissions/", configuration.base_path);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<UsersPermissionsCreateError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn users_permissions_delete(
    configuration: &configuration::Configuration,
    id: i32,
) -> Result<(), Error<UsersPermissionsDeleteError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!(
        "{}/users/permissions/{id}/",
        configuration.base_path,
        id = id
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<UsersPermissionsDeleteError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Overrides ListModelMixin to allow processing ExportTemplates.
pub async fn users_permissions_list(
    configuration: &configuration::Configuration,
    id: Option<&str>,
    name: Option<&str>,
    enabled: Option<&str>,
    object_types: Option<&str>,
    q: Option<&str>,
    user_id: Option<&str>,
    user: Option<&str>,
    group_id: Option<&str>,
    group: Option<&str>,
    id__n: Option<&str>,
    id__lte: Option<&str>,
    id__lt: Option<&str>,
    id__gte: Option<&str>,
    id__gt: Option<&str>,
    name__n: Option<&str>,
    name__ic: Option<&str>,
    name__nic: Option<&str>,
    name__iew: Option<&str>,
    name__niew: Option<&str>,
    name__isw: Option<&str>,
    name__nisw: Option<&str>,
    name__ie: Option<&str>,
    name__nie: Option<&str>,
    name__empty: Option<&str>,
    object_types__n: Option<&str>,
    user_id__n: Option<&str>,
    user__n: Option<&str>,
    group_id__n: Option<&str>,
    group__n: Option<&str>,
    limit: Option<i32>,
    offset: Option<i32>,
) -> Result<crate::models::InlineResponse20063, Error<UsersPermissionsListError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/users/permissions/", configuration.base_path);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = id {
        local_var_req_builder = local_var_req_builder.query(&[("id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name {
        local_var_req_builder =
            local_var_req_builder.query(&[("name", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = enabled {
        local_var_req_builder =
            local_var_req_builder.query(&[("enabled", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = object_types {
        local_var_req_builder =
            local_var_req_builder.query(&[("object_types", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = q {
        local_var_req_builder = local_var_req_builder.query(&[("q", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = user_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("user_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = user {
        local_var_req_builder =
            local_var_req_builder.query(&[("user", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = group_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("group_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = group {
        local_var_req_builder =
            local_var_req_builder.query(&[("group", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lte {
        local_var_req_builder =
            local_var_req_builder.query(&[("id__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lt {
        local_var_req_builder =
            local_var_req_builder.query(&[("id__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gte {
        local_var_req_builder =
            local_var_req_builder.query(&[("id__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gt {
        local_var_req_builder =
            local_var_req_builder.query(&[("id__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("name__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__ic {
        local_var_req_builder =
            local_var_req_builder.query(&[("name__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nic {
        local_var_req_builder =
            local_var_req_builder.query(&[("name__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__iew {
        local_var_req_builder =
            local_var_req_builder.query(&[("name__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__niew {
        local_var_req_builder =
            local_var_req_builder.query(&[("name__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__isw {
        local_var_req_builder =
            local_var_req_builder.query(&[("name__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nisw {
        local_var_req_builder =
            local_var_req_builder.query(&[("name__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__ie {
        local_var_req_builder =
            local_var_req_builder.query(&[("name__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nie {
        local_var_req_builder =
            local_var_req_builder.query(&[("name__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__empty {
        local_var_req_builder =
            local_var_req_builder.query(&[("name__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = object_types__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("object_types__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = user_id__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("user_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = user__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("user__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = group_id__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("group_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = group__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("group__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder =
            local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = offset {
        local_var_req_builder =
            local_var_req_builder.query(&[("offset", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<UsersPermissionsListError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn users_permissions_partial_update(
    configuration: &configuration::Configuration,
    id: i32,
    data: crate::models::WritableObjectPermission,
) -> Result<crate::models::ObjectPermission, Error<UsersPermissionsPartialUpdateError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!(
        "{}/users/permissions/{id}/",
        configuration.base_path,
        id = id
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<UsersPermissionsPartialUpdateError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn users_permissions_read(
    configuration: &configuration::Configuration,
    id: i32,
) -> Result<crate::models::ObjectPermission, Error<UsersPermissionsReadError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!(
        "{}/users/permissions/{id}/",
        configuration.base_path,
        id = id
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<UsersPermissionsReadError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn users_permissions_update(
    configuration: &configuration::Configuration,
    id: i32,
    data: crate::models::WritableObjectPermission,
) -> Result<crate::models::ObjectPermission, Error<UsersPermissionsUpdateError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!(
        "{}/users/permissions/{id}/",
        configuration.base_path,
        id = id
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<UsersPermissionsUpdateError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn users_tokens_bulk_delete(
    configuration: &configuration::Configuration,
) -> Result<(), Error<UsersTokensBulkDeleteError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/users/tokens/", configuration.base_path);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<UsersTokensBulkDeleteError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn users_tokens_bulk_partial_update(
    configuration: &configuration::Configuration,
    data: crate::models::WritableToken,
) -> Result<crate::models::Token, Error<UsersTokensBulkPartialUpdateError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/users/tokens/", configuration.base_path);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<UsersTokensBulkPartialUpdateError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn users_tokens_bulk_update(
    configuration: &configuration::Configuration,
    data: crate::models::WritableToken,
) -> Result<crate::models::Token, Error<UsersTokensBulkUpdateError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/users/tokens/", configuration.base_path);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<UsersTokensBulkUpdateError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn users_tokens_create(
    configuration: &configuration::Configuration,
    data: crate::models::WritableToken,
) -> Result<crate::models::Token, Error<UsersTokensCreateError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/users/tokens/", configuration.base_path);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<UsersTokensCreateError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn users_tokens_delete(
    configuration: &configuration::Configuration,
    id: i32,
) -> Result<(), Error<UsersTokensDeleteError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/users/tokens/{id}/", configuration.base_path, id = id);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<UsersTokensDeleteError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Overrides ListModelMixin to allow processing ExportTemplates.
pub async fn users_tokens_list(
    configuration: &configuration::Configuration,
    id: Option<&str>,
    key: Option<&str>,
    write_enabled: Option<&str>,
    q: Option<&str>,
    user_id: Option<&str>,
    user: Option<&str>,
    created: Option<&str>,
    created__gte: Option<&str>,
    created__lte: Option<&str>,
    expires: Option<&str>,
    expires__gte: Option<&str>,
    expires__lte: Option<&str>,
    id__n: Option<&str>,
    id__lte: Option<&str>,
    id__lt: Option<&str>,
    id__gte: Option<&str>,
    id__gt: Option<&str>,
    key__n: Option<&str>,
    key__ic: Option<&str>,
    key__nic: Option<&str>,
    key__iew: Option<&str>,
    key__niew: Option<&str>,
    key__isw: Option<&str>,
    key__nisw: Option<&str>,
    key__ie: Option<&str>,
    key__nie: Option<&str>,
    key__empty: Option<&str>,
    user_id__n: Option<&str>,
    user__n: Option<&str>,
    limit: Option<i32>,
    offset: Option<i32>,
) -> Result<crate::models::InlineResponse20064, Error<UsersTokensListError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/users/tokens/", configuration.base_path);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = id {
        local_var_req_builder = local_var_req_builder.query(&[("id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = key {
        local_var_req_builder = local_var_req_builder.query(&[("key", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = write_enabled {
        local_var_req_builder =
            local_var_req_builder.query(&[("write_enabled", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = q {
        local_var_req_builder = local_var_req_builder.query(&[("q", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = user_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("user_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = user {
        local_var_req_builder =
            local_var_req_builder.query(&[("user", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created {
        local_var_req_builder =
            local_var_req_builder.query(&[("created", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__gte {
        local_var_req_builder =
            local_var_req_builder.query(&[("created__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__lte {
        local_var_req_builder =
            local_var_req_builder.query(&[("created__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = expires {
        local_var_req_builder =
            local_var_req_builder.query(&[("expires", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = expires__gte {
        local_var_req_builder =
            local_var_req_builder.query(&[("expires__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = expires__lte {
        local_var_req_builder =
            local_var_req_builder.query(&[("expires__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lte {
        local_var_req_builder =
            local_var_req_builder.query(&[("id__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lt {
        local_var_req_builder =
            local_var_req_builder.query(&[("id__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gte {
        local_var_req_builder =
            local_var_req_builder.query(&[("id__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gt {
        local_var_req_builder =
            local_var_req_builder.query(&[("id__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = key__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("key__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = key__ic {
        local_var_req_builder =
            local_var_req_builder.query(&[("key__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = key__nic {
        local_var_req_builder =
            local_var_req_builder.query(&[("key__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = key__iew {
        local_var_req_builder =
            local_var_req_builder.query(&[("key__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = key__niew {
        local_var_req_builder =
            local_var_req_builder.query(&[("key__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = key__isw {
        local_var_req_builder =
            local_var_req_builder.query(&[("key__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = key__nisw {
        local_var_req_builder =
            local_var_req_builder.query(&[("key__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = key__ie {
        local_var_req_builder =
            local_var_req_builder.query(&[("key__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = key__nie {
        local_var_req_builder =
            local_var_req_builder.query(&[("key__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = key__empty {
        local_var_req_builder =
            local_var_req_builder.query(&[("key__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = user_id__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("user_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = user__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("user__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder =
            local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = offset {
        local_var_req_builder =
            local_var_req_builder.query(&[("offset", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<UsersTokensListError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn users_tokens_partial_update(
    configuration: &configuration::Configuration,
    id: i32,
    data: crate::models::WritableToken,
) -> Result<crate::models::Token, Error<UsersTokensPartialUpdateError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/users/tokens/{id}/", configuration.base_path, id = id);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<UsersTokensPartialUpdateError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Non-authenticated REST API endpoint via which a user may create a Token.
pub async fn users_tokens_provision_create(
    configuration: &configuration::Configuration,
) -> Result<(), Error<UsersTokensProvisionCreateError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/users/tokens/provision/", configuration.base_path);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<UsersTokensProvisionCreateError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn users_tokens_read(
    configuration: &configuration::Configuration,
    id: i32,
) -> Result<crate::models::Token, Error<UsersTokensReadError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/users/tokens/{id}/", configuration.base_path, id = id);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<UsersTokensReadError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn users_tokens_update(
    configuration: &configuration::Configuration,
    id: i32,
    data: crate::models::WritableToken,
) -> Result<crate::models::Token, Error<UsersTokensUpdateError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/users/tokens/{id}/", configuration.base_path, id = id);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<UsersTokensUpdateError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn users_users_bulk_delete(
    configuration: &configuration::Configuration,
) -> Result<(), Error<UsersUsersBulkDeleteError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/users/users/", configuration.base_path);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<UsersUsersBulkDeleteError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn users_users_bulk_partial_update(
    configuration: &configuration::Configuration,
    data: crate::models::WritableUser,
) -> Result<crate::models::User, Error<UsersUsersBulkPartialUpdateError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/users/users/", configuration.base_path);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<UsersUsersBulkPartialUpdateError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn users_users_bulk_update(
    configuration: &configuration::Configuration,
    data: crate::models::WritableUser,
) -> Result<crate::models::User, Error<UsersUsersBulkUpdateError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/users/users/", configuration.base_path);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<UsersUsersBulkUpdateError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn users_users_create(
    configuration: &configuration::Configuration,
    data: crate::models::WritableUser,
) -> Result<crate::models::User, Error<UsersUsersCreateError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/users/users/", configuration.base_path);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<UsersUsersCreateError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn users_users_delete(
    configuration: &configuration::Configuration,
    id: i32,
) -> Result<(), Error<UsersUsersDeleteError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/users/users/{id}/", configuration.base_path, id = id);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<UsersUsersDeleteError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Overrides ListModelMixin to allow processing ExportTemplates.
pub async fn users_users_list(
    configuration: &configuration::Configuration,
    id: Option<&str>,
    username: Option<&str>,
    first_name: Option<&str>,
    last_name: Option<&str>,
    email: Option<&str>,
    is_staff: Option<&str>,
    is_active: Option<&str>,
    q: Option<&str>,
    group_id: Option<&str>,
    group: Option<&str>,
    id__n: Option<&str>,
    id__lte: Option<&str>,
    id__lt: Option<&str>,
    id__gte: Option<&str>,
    id__gt: Option<&str>,
    username__n: Option<&str>,
    username__ic: Option<&str>,
    username__nic: Option<&str>,
    username__iew: Option<&str>,
    username__niew: Option<&str>,
    username__isw: Option<&str>,
    username__nisw: Option<&str>,
    username__ie: Option<&str>,
    username__nie: Option<&str>,
    username__empty: Option<&str>,
    first_name__n: Option<&str>,
    first_name__ic: Option<&str>,
    first_name__nic: Option<&str>,
    first_name__iew: Option<&str>,
    first_name__niew: Option<&str>,
    first_name__isw: Option<&str>,
    first_name__nisw: Option<&str>,
    first_name__ie: Option<&str>,
    first_name__nie: Option<&str>,
    first_name__empty: Option<&str>,
    last_name__n: Option<&str>,
    last_name__ic: Option<&str>,
    last_name__nic: Option<&str>,
    last_name__iew: Option<&str>,
    last_name__niew: Option<&str>,
    last_name__isw: Option<&str>,
    last_name__nisw: Option<&str>,
    last_name__ie: Option<&str>,
    last_name__nie: Option<&str>,
    last_name__empty: Option<&str>,
    email__n: Option<&str>,
    email__ic: Option<&str>,
    email__nic: Option<&str>,
    email__iew: Option<&str>,
    email__niew: Option<&str>,
    email__isw: Option<&str>,
    email__nisw: Option<&str>,
    email__ie: Option<&str>,
    email__nie: Option<&str>,
    email__empty: Option<&str>,
    group_id__n: Option<&str>,
    group__n: Option<&str>,
    limit: Option<i32>,
    offset: Option<i32>,
) -> Result<crate::models::InlineResponse20065, Error<UsersUsersListError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/users/users/", configuration.base_path);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = id {
        local_var_req_builder = local_var_req_builder.query(&[("id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = username {
        local_var_req_builder =
            local_var_req_builder.query(&[("username", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = first_name {
        local_var_req_builder =
            local_var_req_builder.query(&[("first_name", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_name {
        local_var_req_builder =
            local_var_req_builder.query(&[("last_name", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = email {
        local_var_req_builder =
            local_var_req_builder.query(&[("email", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = is_staff {
        local_var_req_builder =
            local_var_req_builder.query(&[("is_staff", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = is_active {
        local_var_req_builder =
            local_var_req_builder.query(&[("is_active", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = q {
        local_var_req_builder = local_var_req_builder.query(&[("q", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = group_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("group_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = group {
        local_var_req_builder =
            local_var_req_builder.query(&[("group", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lte {
        local_var_req_builder =
            local_var_req_builder.query(&[("id__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lt {
        local_var_req_builder =
            local_var_req_builder.query(&[("id__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gte {
        local_var_req_builder =
            local_var_req_builder.query(&[("id__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gt {
        local_var_req_builder =
            local_var_req_builder.query(&[("id__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = username__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("username__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = username__ic {
        local_var_req_builder =
            local_var_req_builder.query(&[("username__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = username__nic {
        local_var_req_builder =
            local_var_req_builder.query(&[("username__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = username__iew {
        local_var_req_builder =
            local_var_req_builder.query(&[("username__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = username__niew {
        local_var_req_builder =
            local_var_req_builder.query(&[("username__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = username__isw {
        local_var_req_builder =
            local_var_req_builder.query(&[("username__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = username__nisw {
        local_var_req_builder =
            local_var_req_builder.query(&[("username__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = username__ie {
        local_var_req_builder =
            local_var_req_builder.query(&[("username__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = username__nie {
        local_var_req_builder =
            local_var_req_builder.query(&[("username__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = username__empty {
        local_var_req_builder =
            local_var_req_builder.query(&[("username__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = first_name__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("first_name__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = first_name__ic {
        local_var_req_builder =
            local_var_req_builder.query(&[("first_name__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = first_name__nic {
        local_var_req_builder =
            local_var_req_builder.query(&[("first_name__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = first_name__iew {
        local_var_req_builder =
            local_var_req_builder.query(&[("first_name__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = first_name__niew {
        local_var_req_builder =
            local_var_req_builder.query(&[("first_name__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = first_name__isw {
        local_var_req_builder =
            local_var_req_builder.query(&[("first_name__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = first_name__nisw {
        local_var_req_builder =
            local_var_req_builder.query(&[("first_name__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = first_name__ie {
        local_var_req_builder =
            local_var_req_builder.query(&[("first_name__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = first_name__nie {
        local_var_req_builder =
            local_var_req_builder.query(&[("first_name__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = first_name__empty {
        local_var_req_builder =
            local_var_req_builder.query(&[("first_name__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_name__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("last_name__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_name__ic {
        local_var_req_builder =
            local_var_req_builder.query(&[("last_name__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_name__nic {
        local_var_req_builder =
            local_var_req_builder.query(&[("last_name__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_name__iew {
        local_var_req_builder =
            local_var_req_builder.query(&[("last_name__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_name__niew {
        local_var_req_builder =
            local_var_req_builder.query(&[("last_name__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_name__isw {
        local_var_req_builder =
            local_var_req_builder.query(&[("last_name__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_name__nisw {
        local_var_req_builder =
            local_var_req_builder.query(&[("last_name__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_name__ie {
        local_var_req_builder =
            local_var_req_builder.query(&[("last_name__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_name__nie {
        local_var_req_builder =
            local_var_req_builder.query(&[("last_name__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_name__empty {
        local_var_req_builder =
            local_var_req_builder.query(&[("last_name__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = email__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("email__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = email__ic {
        local_var_req_builder =
            local_var_req_builder.query(&[("email__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = email__nic {
        local_var_req_builder =
            local_var_req_builder.query(&[("email__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = email__iew {
        local_var_req_builder =
            local_var_req_builder.query(&[("email__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = email__niew {
        local_var_req_builder =
            local_var_req_builder.query(&[("email__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = email__isw {
        local_var_req_builder =
            local_var_req_builder.query(&[("email__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = email__nisw {
        local_var_req_builder =
            local_var_req_builder.query(&[("email__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = email__ie {
        local_var_req_builder =
            local_var_req_builder.query(&[("email__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = email__nie {
        local_var_req_builder =
            local_var_req_builder.query(&[("email__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = email__empty {
        local_var_req_builder =
            local_var_req_builder.query(&[("email__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = group_id__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("group_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = group__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("group__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder =
            local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = offset {
        local_var_req_builder =
            local_var_req_builder.query(&[("offset", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<UsersUsersListError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn users_users_partial_update(
    configuration: &configuration::Configuration,
    id: i32,
    data: crate::models::WritableUser,
) -> Result<crate::models::User, Error<UsersUsersPartialUpdateError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/users/users/{id}/", configuration.base_path, id = id);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<UsersUsersPartialUpdateError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn users_users_read(
    configuration: &configuration::Configuration,
    id: i32,
) -> Result<crate::models::User, Error<UsersUsersReadError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/users/users/{id}/", configuration.base_path, id = id);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<UsersUsersReadError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn users_users_update(
    configuration: &configuration::Configuration,
    id: i32,
    data: crate::models::WritableUser,
) -> Result<crate::models::User, Error<UsersUsersUpdateError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/users/users/{id}/", configuration.base_path, id = id);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<UsersUsersUpdateError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}
