/*
 * NetBox API
 *
 * API to access NetBox
 *
 * The version of the OpenAPI document: 2.7
 *
 * Generated by: https://openapi-generator.tech
 */

use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;
use std::rc::Rc;

use reqwest;

use super::{configuration, Error};

pub struct TenancyApiClient {
    configuration: Rc<configuration::Configuration>,
}

impl TenancyApiClient {
    pub fn new(configuration: Rc<configuration::Configuration>) -> TenancyApiClient {
        TenancyApiClient { configuration }
    }
}

pub trait TenancyApi {
    fn tenancy_choices_list(&self) -> Result<(), Error>;
    fn tenancy_choices_read(&self, id: &str) -> Result<(), Error>;
    fn tenancy_tenant_groups_create(
        &self,
        data: crate::models::TenantGroup,
    ) -> Result<crate::models::TenantGroup, Error>;
    fn tenancy_tenant_groups_delete(&self, id: i32) -> Result<(), Error>;
    fn tenancy_tenant_groups_list(
        &self,
        id: Option<&str>,
        name: Option<&str>,
        slug: Option<&str>,
        q: Option<&str>,
        limit: Option<i32>,
        offset: Option<i32>,
    ) -> Result<crate::models::InlineResponse20054, Error>;
    fn tenancy_tenant_groups_partial_update(
        &self,
        id: i32,
        data: crate::models::TenantGroup,
    ) -> Result<crate::models::TenantGroup, Error>;
    fn tenancy_tenant_groups_read(&self, id: i32) -> Result<crate::models::TenantGroup, Error>;
    fn tenancy_tenant_groups_update(
        &self,
        id: i32,
        data: crate::models::TenantGroup,
    ) -> Result<crate::models::TenantGroup, Error>;
    fn tenancy_tenants_create(
        &self,
        data: crate::models::WritableTenant,
    ) -> Result<crate::models::Tenant, Error>;
    fn tenancy_tenants_delete(&self, id: i32) -> Result<(), Error>;
    fn tenancy_tenants_list(
        &self,
        name: Option<&str>,
        slug: Option<&str>,
        created: Option<&str>,
        created__gte: Option<&str>,
        created__lte: Option<&str>,
        last_updated: Option<&str>,
        last_updated__gte: Option<&str>,
        last_updated__lte: Option<&str>,
        id__in: Option<&str>,
        q: Option<&str>,
        group_id: Option<&str>,
        group: Option<&str>,
        tag: Option<&str>,
        limit: Option<i32>,
        offset: Option<i32>,
    ) -> Result<crate::models::InlineResponse20055, Error>;
    fn tenancy_tenants_partial_update(
        &self,
        id: i32,
        data: crate::models::WritableTenant,
    ) -> Result<crate::models::Tenant, Error>;
    fn tenancy_tenants_read(&self, id: i32) -> Result<crate::models::Tenant, Error>;
    fn tenancy_tenants_update(
        &self,
        id: i32,
        data: crate::models::WritableTenant,
    ) -> Result<crate::models::Tenant, Error>;
}

impl TenancyApi for TenancyApiClient {
    fn tenancy_choices_list(&self) -> Result<(), Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/tenancy/_choices/", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        client.execute(req)?.error_for_status()?;
        Ok(())
    }

    fn tenancy_choices_read(&self, id: &str) -> Result<(), Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/tenancy/_choices/{id}/",
            configuration.base_path,
            id = crate::apis::urlencode(id)
        );
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        client.execute(req)?.error_for_status()?;
        Ok(())
    }

    fn tenancy_tenant_groups_create(
        &self,
        data: crate::models::TenantGroup,
    ) -> Result<crate::models::TenantGroup, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/tenancy/tenant-groups/", configuration.base_path);
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn tenancy_tenant_groups_delete(&self, id: i32) -> Result<(), Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/tenancy/tenant-groups/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.delete(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        client.execute(req)?.error_for_status()?;
        Ok(())
    }

    fn tenancy_tenant_groups_list(
        &self,
        id: Option<&str>,
        name: Option<&str>,
        slug: Option<&str>,
        q: Option<&str>,
        limit: Option<i32>,
        offset: Option<i32>,
    ) -> Result<crate::models::InlineResponse20054, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/tenancy/tenant-groups/", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = id {
            req_builder = req_builder.query(&[("id", &s.to_string())]);
        }
        if let Some(ref s) = name {
            req_builder = req_builder.query(&[("name", &s.to_string())]);
        }
        if let Some(ref s) = slug {
            req_builder = req_builder.query(&[("slug", &s.to_string())]);
        }
        if let Some(ref s) = q {
            req_builder = req_builder.query(&[("q", &s.to_string())]);
        }
        if let Some(ref s) = limit {
            req_builder = req_builder.query(&[("limit", &s.to_string())]);
        }
        if let Some(ref s) = offset {
            req_builder = req_builder.query(&[("offset", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn tenancy_tenant_groups_partial_update(
        &self,
        id: i32,
        data: crate::models::TenantGroup,
    ) -> Result<crate::models::TenantGroup, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/tenancy/tenant-groups/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.patch(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn tenancy_tenant_groups_read(&self, id: i32) -> Result<crate::models::TenantGroup, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/tenancy/tenant-groups/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn tenancy_tenant_groups_update(
        &self,
        id: i32,
        data: crate::models::TenantGroup,
    ) -> Result<crate::models::TenantGroup, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/tenancy/tenant-groups/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.put(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn tenancy_tenants_create(
        &self,
        data: crate::models::WritableTenant,
    ) -> Result<crate::models::Tenant, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/tenancy/tenants/", configuration.base_path);
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn tenancy_tenants_delete(&self, id: i32) -> Result<(), Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/tenancy/tenants/{id}/", configuration.base_path, id = id);
        let mut req_builder = client.delete(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        client.execute(req)?.error_for_status()?;
        Ok(())
    }

    fn tenancy_tenants_list(
        &self,
        name: Option<&str>,
        slug: Option<&str>,
        created: Option<&str>,
        created__gte: Option<&str>,
        created__lte: Option<&str>,
        last_updated: Option<&str>,
        last_updated__gte: Option<&str>,
        last_updated__lte: Option<&str>,
        id__in: Option<&str>,
        q: Option<&str>,
        group_id: Option<&str>,
        group: Option<&str>,
        tag: Option<&str>,
        limit: Option<i32>,
        offset: Option<i32>,
    ) -> Result<crate::models::InlineResponse20055, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/tenancy/tenants/", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = name {
            req_builder = req_builder.query(&[("name", &s.to_string())]);
        }
        if let Some(ref s) = slug {
            req_builder = req_builder.query(&[("slug", &s.to_string())]);
        }
        if let Some(ref s) = created {
            req_builder = req_builder.query(&[("created", &s.to_string())]);
        }
        if let Some(ref s) = created__gte {
            req_builder = req_builder.query(&[("created__gte", &s.to_string())]);
        }
        if let Some(ref s) = created__lte {
            req_builder = req_builder.query(&[("created__lte", &s.to_string())]);
        }
        if let Some(ref s) = last_updated {
            req_builder = req_builder.query(&[("last_updated", &s.to_string())]);
        }
        if let Some(ref s) = last_updated__gte {
            req_builder = req_builder.query(&[("last_updated__gte", &s.to_string())]);
        }
        if let Some(ref s) = last_updated__lte {
            req_builder = req_builder.query(&[("last_updated__lte", &s.to_string())]);
        }
        if let Some(ref s) = id__in {
            req_builder = req_builder.query(&[("id__in", &s.to_string())]);
        }
        if let Some(ref s) = q {
            req_builder = req_builder.query(&[("q", &s.to_string())]);
        }
        if let Some(ref s) = group_id {
            req_builder = req_builder.query(&[("group_id", &s.to_string())]);
        }
        if let Some(ref s) = group {
            req_builder = req_builder.query(&[("group", &s.to_string())]);
        }
        if let Some(ref s) = tag {
            req_builder = req_builder.query(&[("tag", &s.to_string())]);
        }
        if let Some(ref s) = limit {
            req_builder = req_builder.query(&[("limit", &s.to_string())]);
        }
        if let Some(ref s) = offset {
            req_builder = req_builder.query(&[("offset", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn tenancy_tenants_partial_update(
        &self,
        id: i32,
        data: crate::models::WritableTenant,
    ) -> Result<crate::models::Tenant, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/tenancy/tenants/{id}/", configuration.base_path, id = id);
        let mut req_builder = client.patch(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn tenancy_tenants_read(&self, id: i32) -> Result<crate::models::Tenant, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/tenancy/tenants/{id}/", configuration.base_path, id = id);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn tenancy_tenants_update(
        &self,
        id: i32,
        data: crate::models::WritableTenant,
    ) -> Result<crate::models::Tenant, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/tenancy/tenants/{id}/", configuration.base_path, id = id);
        let mut req_builder = client.put(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }
}
