/*
 * NetBox API
 *
 * API to access NetBox
 *
 * The version of the OpenAPI document: 2.7
 *
 * Generated by: https://openapi-generator.tech
 */

use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;
use std::rc::Rc;

use reqwest;

use super::{configuration, Error};

pub struct DcimApiClient {
    configuration: Rc<configuration::Configuration>,
}

impl DcimApiClient {
    pub fn new(configuration: Rc<configuration::Configuration>) -> DcimApiClient {
        DcimApiClient { configuration }
    }
}

pub trait DcimApi {
    fn dcim_cables_create(
        &self,
        data: crate::models::WritableCable,
    ) -> Result<crate::models::Cable, Error>;
    fn dcim_cables_delete(&self, id: i32) -> Result<(), Error>;
    fn dcim_cables_list(
        &self,
        id: Option<&str>,
        label: Option<&str>,
        length: Option<&str>,
        length_unit: Option<&str>,
        q: Option<&str>,
        _type: Option<&str>,
        status: Option<&str>,
        color: Option<&str>,
        device_id: Option<&str>,
        device: Option<&str>,
        rack_id: Option<&str>,
        rack: Option<&str>,
        site_id: Option<&str>,
        site: Option<&str>,
        tenant_id: Option<&str>,
        tenant: Option<&str>,
        id__n: Option<&str>,
        id__lte: Option<&str>,
        id__lt: Option<&str>,
        id__gte: Option<&str>,
        id__gt: Option<&str>,
        label__n: Option<&str>,
        label__ic: Option<&str>,
        label__nic: Option<&str>,
        label__iew: Option<&str>,
        label__niew: Option<&str>,
        label__isw: Option<&str>,
        label__nisw: Option<&str>,
        label__ie: Option<&str>,
        label__nie: Option<&str>,
        length__n: Option<&str>,
        length__lte: Option<&str>,
        length__lt: Option<&str>,
        length__gte: Option<&str>,
        length__gt: Option<&str>,
        length_unit__n: Option<&str>,
        type__n: Option<&str>,
        status__n: Option<&str>,
        color__n: Option<&str>,
        limit: Option<i32>,
        offset: Option<i32>,
    ) -> Result<crate::models::InlineResponse2004, Error>;
    fn dcim_cables_partial_update(
        &self,
        id: i32,
        data: crate::models::WritableCable,
    ) -> Result<crate::models::Cable, Error>;
    fn dcim_cables_read(&self, id: i32) -> Result<crate::models::Cable, Error>;
    fn dcim_cables_update(
        &self,
        id: i32,
        data: crate::models::WritableCable,
    ) -> Result<crate::models::Cable, Error>;
    fn dcim_choices_list(&self) -> Result<(), Error>;
    fn dcim_choices_read(&self, id: &str) -> Result<(), Error>;
    fn dcim_connected_device_list(
        &self,
        peer_device: &str,
        peer_interface: &str,
    ) -> Result<crate::models::Device, Error>;
    fn dcim_console_connections_list(
        &self,
        name: Option<&str>,
        connection_status: Option<&str>,
        site: Option<&str>,
        device_id: Option<&str>,
        device: Option<&str>,
        name__n: Option<&str>,
        name__ic: Option<&str>,
        name__nic: Option<&str>,
        name__iew: Option<&str>,
        name__niew: Option<&str>,
        name__isw: Option<&str>,
        name__nisw: Option<&str>,
        name__ie: Option<&str>,
        name__nie: Option<&str>,
        connection_status__n: Option<&str>,
        limit: Option<i32>,
        offset: Option<i32>,
    ) -> Result<crate::models::InlineResponse2005, Error>;
    fn dcim_console_port_templates_create(
        &self,
        data: crate::models::WritableConsolePortTemplate,
    ) -> Result<crate::models::ConsolePortTemplate, Error>;
    fn dcim_console_port_templates_delete(&self, id: i32) -> Result<(), Error>;
    fn dcim_console_port_templates_list(
        &self,
        id: Option<&str>,
        name: Option<&str>,
        _type: Option<&str>,
        q: Option<&str>,
        devicetype_id: Option<&str>,
        id__n: Option<&str>,
        id__lte: Option<&str>,
        id__lt: Option<&str>,
        id__gte: Option<&str>,
        id__gt: Option<&str>,
        name__n: Option<&str>,
        name__ic: Option<&str>,
        name__nic: Option<&str>,
        name__iew: Option<&str>,
        name__niew: Option<&str>,
        name__isw: Option<&str>,
        name__nisw: Option<&str>,
        name__ie: Option<&str>,
        name__nie: Option<&str>,
        type__n: Option<&str>,
        devicetype_id__n: Option<&str>,
        limit: Option<i32>,
        offset: Option<i32>,
    ) -> Result<crate::models::InlineResponse2006, Error>;
    fn dcim_console_port_templates_partial_update(
        &self,
        id: i32,
        data: crate::models::WritableConsolePortTemplate,
    ) -> Result<crate::models::ConsolePortTemplate, Error>;
    fn dcim_console_port_templates_read(
        &self,
        id: i32,
    ) -> Result<crate::models::ConsolePortTemplate, Error>;
    fn dcim_console_port_templates_update(
        &self,
        id: i32,
        data: crate::models::WritableConsolePortTemplate,
    ) -> Result<crate::models::ConsolePortTemplate, Error>;
    fn dcim_console_ports_create(
        &self,
        data: crate::models::WritableConsolePort,
    ) -> Result<crate::models::ConsolePort, Error>;
    fn dcim_console_ports_delete(&self, id: i32) -> Result<(), Error>;
    fn dcim_console_ports_list(
        &self,
        id: Option<&str>,
        name: Option<&str>,
        description: Option<&str>,
        connection_status: Option<&str>,
        q: Option<&str>,
        region_id: Option<&str>,
        region: Option<&str>,
        site_id: Option<&str>,
        site: Option<&str>,
        device_id: Option<&str>,
        device: Option<&str>,
        tag: Option<&str>,
        _type: Option<&str>,
        cabled: Option<&str>,
        id__n: Option<&str>,
        id__lte: Option<&str>,
        id__lt: Option<&str>,
        id__gte: Option<&str>,
        id__gt: Option<&str>,
        name__n: Option<&str>,
        name__ic: Option<&str>,
        name__nic: Option<&str>,
        name__iew: Option<&str>,
        name__niew: Option<&str>,
        name__isw: Option<&str>,
        name__nisw: Option<&str>,
        name__ie: Option<&str>,
        name__nie: Option<&str>,
        description__n: Option<&str>,
        description__ic: Option<&str>,
        description__nic: Option<&str>,
        description__iew: Option<&str>,
        description__niew: Option<&str>,
        description__isw: Option<&str>,
        description__nisw: Option<&str>,
        description__ie: Option<&str>,
        description__nie: Option<&str>,
        connection_status__n: Option<&str>,
        region_id__n: Option<&str>,
        region__n: Option<&str>,
        site_id__n: Option<&str>,
        site__n: Option<&str>,
        device_id__n: Option<&str>,
        device__n: Option<&str>,
        tag__n: Option<&str>,
        type__n: Option<&str>,
        limit: Option<i32>,
        offset: Option<i32>,
    ) -> Result<crate::models::InlineResponse2005, Error>;
    fn dcim_console_ports_partial_update(
        &self,
        id: i32,
        data: crate::models::WritableConsolePort,
    ) -> Result<crate::models::ConsolePort, Error>;
    fn dcim_console_ports_read(&self, id: i32) -> Result<crate::models::ConsolePort, Error>;
    fn dcim_console_ports_trace(&self, id: i32) -> Result<crate::models::ConsolePort, Error>;
    fn dcim_console_ports_update(
        &self,
        id: i32,
        data: crate::models::WritableConsolePort,
    ) -> Result<crate::models::ConsolePort, Error>;
    fn dcim_console_server_port_templates_create(
        &self,
        data: crate::models::WritableConsoleServerPortTemplate,
    ) -> Result<crate::models::ConsoleServerPortTemplate, Error>;
    fn dcim_console_server_port_templates_delete(&self, id: i32) -> Result<(), Error>;
    fn dcim_console_server_port_templates_list(
        &self,
        id: Option<&str>,
        name: Option<&str>,
        _type: Option<&str>,
        q: Option<&str>,
        devicetype_id: Option<&str>,
        id__n: Option<&str>,
        id__lte: Option<&str>,
        id__lt: Option<&str>,
        id__gte: Option<&str>,
        id__gt: Option<&str>,
        name__n: Option<&str>,
        name__ic: Option<&str>,
        name__nic: Option<&str>,
        name__iew: Option<&str>,
        name__niew: Option<&str>,
        name__isw: Option<&str>,
        name__nisw: Option<&str>,
        name__ie: Option<&str>,
        name__nie: Option<&str>,
        type__n: Option<&str>,
        devicetype_id__n: Option<&str>,
        limit: Option<i32>,
        offset: Option<i32>,
    ) -> Result<crate::models::InlineResponse2007, Error>;
    fn dcim_console_server_port_templates_partial_update(
        &self,
        id: i32,
        data: crate::models::WritableConsoleServerPortTemplate,
    ) -> Result<crate::models::ConsoleServerPortTemplate, Error>;
    fn dcim_console_server_port_templates_read(
        &self,
        id: i32,
    ) -> Result<crate::models::ConsoleServerPortTemplate, Error>;
    fn dcim_console_server_port_templates_update(
        &self,
        id: i32,
        data: crate::models::WritableConsoleServerPortTemplate,
    ) -> Result<crate::models::ConsoleServerPortTemplate, Error>;
    fn dcim_console_server_ports_create(
        &self,
        data: crate::models::WritableConsoleServerPort,
    ) -> Result<crate::models::ConsoleServerPort, Error>;
    fn dcim_console_server_ports_delete(&self, id: i32) -> Result<(), Error>;
    fn dcim_console_server_ports_list(
        &self,
        id: Option<&str>,
        name: Option<&str>,
        description: Option<&str>,
        connection_status: Option<&str>,
        q: Option<&str>,
        region_id: Option<&str>,
        region: Option<&str>,
        site_id: Option<&str>,
        site: Option<&str>,
        device_id: Option<&str>,
        device: Option<&str>,
        tag: Option<&str>,
        _type: Option<&str>,
        cabled: Option<&str>,
        id__n: Option<&str>,
        id__lte: Option<&str>,
        id__lt: Option<&str>,
        id__gte: Option<&str>,
        id__gt: Option<&str>,
        name__n: Option<&str>,
        name__ic: Option<&str>,
        name__nic: Option<&str>,
        name__iew: Option<&str>,
        name__niew: Option<&str>,
        name__isw: Option<&str>,
        name__nisw: Option<&str>,
        name__ie: Option<&str>,
        name__nie: Option<&str>,
        description__n: Option<&str>,
        description__ic: Option<&str>,
        description__nic: Option<&str>,
        description__iew: Option<&str>,
        description__niew: Option<&str>,
        description__isw: Option<&str>,
        description__nisw: Option<&str>,
        description__ie: Option<&str>,
        description__nie: Option<&str>,
        connection_status__n: Option<&str>,
        region_id__n: Option<&str>,
        region__n: Option<&str>,
        site_id__n: Option<&str>,
        site__n: Option<&str>,
        device_id__n: Option<&str>,
        device__n: Option<&str>,
        tag__n: Option<&str>,
        type__n: Option<&str>,
        limit: Option<i32>,
        offset: Option<i32>,
    ) -> Result<crate::models::InlineResponse2008, Error>;
    fn dcim_console_server_ports_partial_update(
        &self,
        id: i32,
        data: crate::models::WritableConsoleServerPort,
    ) -> Result<crate::models::ConsoleServerPort, Error>;
    fn dcim_console_server_ports_read(
        &self,
        id: i32,
    ) -> Result<crate::models::ConsoleServerPort, Error>;
    fn dcim_console_server_ports_trace(
        &self,
        id: i32,
    ) -> Result<crate::models::ConsoleServerPort, Error>;
    fn dcim_console_server_ports_update(
        &self,
        id: i32,
        data: crate::models::WritableConsoleServerPort,
    ) -> Result<crate::models::ConsoleServerPort, Error>;
    fn dcim_device_bay_templates_create(
        &self,
        data: crate::models::WritableDeviceBayTemplate,
    ) -> Result<crate::models::DeviceBayTemplate, Error>;
    fn dcim_device_bay_templates_delete(&self, id: i32) -> Result<(), Error>;
    fn dcim_device_bay_templates_list(
        &self,
        id: Option<&str>,
        name: Option<&str>,
        q: Option<&str>,
        devicetype_id: Option<&str>,
        id__n: Option<&str>,
        id__lte: Option<&str>,
        id__lt: Option<&str>,
        id__gte: Option<&str>,
        id__gt: Option<&str>,
        name__n: Option<&str>,
        name__ic: Option<&str>,
        name__nic: Option<&str>,
        name__iew: Option<&str>,
        name__niew: Option<&str>,
        name__isw: Option<&str>,
        name__nisw: Option<&str>,
        name__ie: Option<&str>,
        name__nie: Option<&str>,
        devicetype_id__n: Option<&str>,
        limit: Option<i32>,
        offset: Option<i32>,
    ) -> Result<crate::models::InlineResponse2009, Error>;
    fn dcim_device_bay_templates_partial_update(
        &self,
        id: i32,
        data: crate::models::WritableDeviceBayTemplate,
    ) -> Result<crate::models::DeviceBayTemplate, Error>;
    fn dcim_device_bay_templates_read(
        &self,
        id: i32,
    ) -> Result<crate::models::DeviceBayTemplate, Error>;
    fn dcim_device_bay_templates_update(
        &self,
        id: i32,
        data: crate::models::WritableDeviceBayTemplate,
    ) -> Result<crate::models::DeviceBayTemplate, Error>;
    fn dcim_device_bays_create(
        &self,
        data: crate::models::WritableDeviceBay,
    ) -> Result<crate::models::DeviceBay, Error>;
    fn dcim_device_bays_delete(&self, id: i32) -> Result<(), Error>;
    fn dcim_device_bays_list(
        &self,
        id: Option<&str>,
        name: Option<&str>,
        description: Option<&str>,
        q: Option<&str>,
        region_id: Option<&str>,
        region: Option<&str>,
        site_id: Option<&str>,
        site: Option<&str>,
        device_id: Option<&str>,
        device: Option<&str>,
        tag: Option<&str>,
        id__n: Option<&str>,
        id__lte: Option<&str>,
        id__lt: Option<&str>,
        id__gte: Option<&str>,
        id__gt: Option<&str>,
        name__n: Option<&str>,
        name__ic: Option<&str>,
        name__nic: Option<&str>,
        name__iew: Option<&str>,
        name__niew: Option<&str>,
        name__isw: Option<&str>,
        name__nisw: Option<&str>,
        name__ie: Option<&str>,
        name__nie: Option<&str>,
        description__n: Option<&str>,
        description__ic: Option<&str>,
        description__nic: Option<&str>,
        description__iew: Option<&str>,
        description__niew: Option<&str>,
        description__isw: Option<&str>,
        description__nisw: Option<&str>,
        description__ie: Option<&str>,
        description__nie: Option<&str>,
        region_id__n: Option<&str>,
        region__n: Option<&str>,
        site_id__n: Option<&str>,
        site__n: Option<&str>,
        device_id__n: Option<&str>,
        device__n: Option<&str>,
        tag__n: Option<&str>,
        limit: Option<i32>,
        offset: Option<i32>,
    ) -> Result<crate::models::InlineResponse20010, Error>;
    fn dcim_device_bays_partial_update(
        &self,
        id: i32,
        data: crate::models::WritableDeviceBay,
    ) -> Result<crate::models::DeviceBay, Error>;
    fn dcim_device_bays_read(&self, id: i32) -> Result<crate::models::DeviceBay, Error>;
    fn dcim_device_bays_update(
        &self,
        id: i32,
        data: crate::models::WritableDeviceBay,
    ) -> Result<crate::models::DeviceBay, Error>;
    fn dcim_device_roles_create(
        &self,
        data: crate::models::DeviceRole,
    ) -> Result<crate::models::DeviceRole, Error>;
    fn dcim_device_roles_delete(&self, id: i32) -> Result<(), Error>;
    fn dcim_device_roles_list(
        &self,
        id: Option<&str>,
        name: Option<&str>,
        slug: Option<&str>,
        color: Option<&str>,
        vm_role: Option<&str>,
        q: Option<&str>,
        id__n: Option<&str>,
        id__lte: Option<&str>,
        id__lt: Option<&str>,
        id__gte: Option<&str>,
        id__gt: Option<&str>,
        name__n: Option<&str>,
        name__ic: Option<&str>,
        name__nic: Option<&str>,
        name__iew: Option<&str>,
        name__niew: Option<&str>,
        name__isw: Option<&str>,
        name__nisw: Option<&str>,
        name__ie: Option<&str>,
        name__nie: Option<&str>,
        slug__n: Option<&str>,
        slug__ic: Option<&str>,
        slug__nic: Option<&str>,
        slug__iew: Option<&str>,
        slug__niew: Option<&str>,
        slug__isw: Option<&str>,
        slug__nisw: Option<&str>,
        slug__ie: Option<&str>,
        slug__nie: Option<&str>,
        color__n: Option<&str>,
        color__ic: Option<&str>,
        color__nic: Option<&str>,
        color__iew: Option<&str>,
        color__niew: Option<&str>,
        color__isw: Option<&str>,
        color__nisw: Option<&str>,
        color__ie: Option<&str>,
        color__nie: Option<&str>,
        limit: Option<i32>,
        offset: Option<i32>,
    ) -> Result<crate::models::InlineResponse20011, Error>;
    fn dcim_device_roles_partial_update(
        &self,
        id: i32,
        data: crate::models::DeviceRole,
    ) -> Result<crate::models::DeviceRole, Error>;
    fn dcim_device_roles_read(&self, id: i32) -> Result<crate::models::DeviceRole, Error>;
    fn dcim_device_roles_update(
        &self,
        id: i32,
        data: crate::models::DeviceRole,
    ) -> Result<crate::models::DeviceRole, Error>;
    fn dcim_device_types_create(
        &self,
        data: crate::models::WritableDeviceType,
    ) -> Result<crate::models::DeviceType, Error>;
    fn dcim_device_types_delete(&self, id: i32) -> Result<(), Error>;
    fn dcim_device_types_list(
        &self,
        model: Option<&str>,
        slug: Option<&str>,
        part_number: Option<&str>,
        u_height: Option<&str>,
        is_full_depth: Option<&str>,
        subdevice_role: Option<&str>,
        created: Option<&str>,
        created__gte: Option<&str>,
        created__lte: Option<&str>,
        last_updated: Option<&str>,
        last_updated__gte: Option<&str>,
        last_updated__lte: Option<&str>,
        id__in: Option<&str>,
        q: Option<&str>,
        manufacturer_id: Option<&str>,
        manufacturer: Option<&str>,
        console_ports: Option<&str>,
        console_server_ports: Option<&str>,
        power_ports: Option<&str>,
        power_outlets: Option<&str>,
        interfaces: Option<&str>,
        pass_through_ports: Option<&str>,
        device_bays: Option<&str>,
        tag: Option<&str>,
        model__n: Option<&str>,
        model__ic: Option<&str>,
        model__nic: Option<&str>,
        model__iew: Option<&str>,
        model__niew: Option<&str>,
        model__isw: Option<&str>,
        model__nisw: Option<&str>,
        model__ie: Option<&str>,
        model__nie: Option<&str>,
        slug__n: Option<&str>,
        slug__ic: Option<&str>,
        slug__nic: Option<&str>,
        slug__iew: Option<&str>,
        slug__niew: Option<&str>,
        slug__isw: Option<&str>,
        slug__nisw: Option<&str>,
        slug__ie: Option<&str>,
        slug__nie: Option<&str>,
        part_number__n: Option<&str>,
        part_number__ic: Option<&str>,
        part_number__nic: Option<&str>,
        part_number__iew: Option<&str>,
        part_number__niew: Option<&str>,
        part_number__isw: Option<&str>,
        part_number__nisw: Option<&str>,
        part_number__ie: Option<&str>,
        part_number__nie: Option<&str>,
        u_height__n: Option<&str>,
        u_height__lte: Option<&str>,
        u_height__lt: Option<&str>,
        u_height__gte: Option<&str>,
        u_height__gt: Option<&str>,
        subdevice_role__n: Option<&str>,
        manufacturer_id__n: Option<&str>,
        manufacturer__n: Option<&str>,
        tag__n: Option<&str>,
        limit: Option<i32>,
        offset: Option<i32>,
    ) -> Result<crate::models::InlineResponse20012, Error>;
    fn dcim_device_types_partial_update(
        &self,
        id: i32,
        data: crate::models::WritableDeviceType,
    ) -> Result<crate::models::DeviceType, Error>;
    fn dcim_device_types_read(&self, id: i32) -> Result<crate::models::DeviceType, Error>;
    fn dcim_device_types_update(
        &self,
        id: i32,
        data: crate::models::WritableDeviceType,
    ) -> Result<crate::models::DeviceType, Error>;
    fn dcim_devices_create(
        &self,
        data: crate::models::WritableDeviceWithConfigContext,
    ) -> Result<crate::models::DeviceWithConfigContext, Error>;
    fn dcim_devices_delete(&self, id: i32) -> Result<(), Error>;
    fn dcim_devices_graphs(&self, id: i32)
        -> Result<crate::models::DeviceWithConfigContext, Error>;
    fn dcim_devices_list(
        &self,
        id: Option<&str>,
        name: Option<&str>,
        asset_tag: Option<&str>,
        face: Option<&str>,
        position: Option<&str>,
        vc_position: Option<&str>,
        vc_priority: Option<&str>,
        tenant_group_id: Option<&str>,
        tenant_group: Option<&str>,
        tenant_id: Option<&str>,
        tenant: Option<&str>,
        local_context_data: Option<&str>,
        created: Option<&str>,
        created__gte: Option<&str>,
        created__lte: Option<&str>,
        last_updated: Option<&str>,
        last_updated__gte: Option<&str>,
        last_updated__lte: Option<&str>,
        id__in: Option<&str>,
        q: Option<&str>,
        manufacturer_id: Option<&str>,
        manufacturer: Option<&str>,
        device_type_id: Option<&str>,
        role_id: Option<&str>,
        role: Option<&str>,
        platform_id: Option<&str>,
        platform: Option<&str>,
        region_id: Option<&str>,
        region: Option<&str>,
        site_id: Option<&str>,
        site: Option<&str>,
        rack_group_id: Option<&str>,
        rack_id: Option<&str>,
        cluster_id: Option<&str>,
        model: Option<&str>,
        status: Option<&str>,
        is_full_depth: Option<&str>,
        mac_address: Option<&str>,
        serial: Option<&str>,
        has_primary_ip: Option<&str>,
        virtual_chassis_id: Option<&str>,
        virtual_chassis_member: Option<&str>,
        console_ports: Option<&str>,
        console_server_ports: Option<&str>,
        power_ports: Option<&str>,
        power_outlets: Option<&str>,
        interfaces: Option<&str>,
        pass_through_ports: Option<&str>,
        device_bays: Option<&str>,
        tag: Option<&str>,
        id__n: Option<&str>,
        id__lte: Option<&str>,
        id__lt: Option<&str>,
        id__gte: Option<&str>,
        id__gt: Option<&str>,
        name__n: Option<&str>,
        name__ic: Option<&str>,
        name__nic: Option<&str>,
        name__iew: Option<&str>,
        name__niew: Option<&str>,
        name__isw: Option<&str>,
        name__nisw: Option<&str>,
        name__ie: Option<&str>,
        name__nie: Option<&str>,
        asset_tag__n: Option<&str>,
        asset_tag__ic: Option<&str>,
        asset_tag__nic: Option<&str>,
        asset_tag__iew: Option<&str>,
        asset_tag__niew: Option<&str>,
        asset_tag__isw: Option<&str>,
        asset_tag__nisw: Option<&str>,
        asset_tag__ie: Option<&str>,
        asset_tag__nie: Option<&str>,
        face__n: Option<&str>,
        position__n: Option<&str>,
        position__lte: Option<&str>,
        position__lt: Option<&str>,
        position__gte: Option<&str>,
        position__gt: Option<&str>,
        vc_position__n: Option<&str>,
        vc_position__lte: Option<&str>,
        vc_position__lt: Option<&str>,
        vc_position__gte: Option<&str>,
        vc_position__gt: Option<&str>,
        vc_priority__n: Option<&str>,
        vc_priority__lte: Option<&str>,
        vc_priority__lt: Option<&str>,
        vc_priority__gte: Option<&str>,
        vc_priority__gt: Option<&str>,
        tenant_group_id__n: Option<&str>,
        tenant_group__n: Option<&str>,
        tenant_id__n: Option<&str>,
        tenant__n: Option<&str>,
        manufacturer_id__n: Option<&str>,
        manufacturer__n: Option<&str>,
        device_type_id__n: Option<&str>,
        role_id__n: Option<&str>,
        role__n: Option<&str>,
        platform_id__n: Option<&str>,
        platform__n: Option<&str>,
        region_id__n: Option<&str>,
        region__n: Option<&str>,
        site_id__n: Option<&str>,
        site__n: Option<&str>,
        rack_group_id__n: Option<&str>,
        rack_id__n: Option<&str>,
        cluster_id__n: Option<&str>,
        model__n: Option<&str>,
        status__n: Option<&str>,
        mac_address__n: Option<&str>,
        mac_address__ic: Option<&str>,
        mac_address__nic: Option<&str>,
        mac_address__iew: Option<&str>,
        mac_address__niew: Option<&str>,
        mac_address__isw: Option<&str>,
        mac_address__nisw: Option<&str>,
        mac_address__ie: Option<&str>,
        mac_address__nie: Option<&str>,
        virtual_chassis_id__n: Option<&str>,
        tag__n: Option<&str>,
        limit: Option<i32>,
        offset: Option<i32>,
    ) -> Result<crate::models::InlineResponse20013, Error>;
    fn dcim_devices_napalm(
        &self,
        id: i32,
        method: &str,
    ) -> Result<crate::models::DeviceNapalm, Error>;
    fn dcim_devices_partial_update(
        &self,
        id: i32,
        data: crate::models::WritableDeviceWithConfigContext,
    ) -> Result<crate::models::DeviceWithConfigContext, Error>;
    fn dcim_devices_read(&self, id: i32) -> Result<crate::models::DeviceWithConfigContext, Error>;
    fn dcim_devices_update(
        &self,
        id: i32,
        data: crate::models::WritableDeviceWithConfigContext,
    ) -> Result<crate::models::DeviceWithConfigContext, Error>;
    fn dcim_front_port_templates_create(
        &self,
        data: crate::models::WritableFrontPortTemplate,
    ) -> Result<crate::models::FrontPortTemplate, Error>;
    fn dcim_front_port_templates_delete(&self, id: i32) -> Result<(), Error>;
    fn dcim_front_port_templates_list(
        &self,
        id: Option<&str>,
        name: Option<&str>,
        _type: Option<&str>,
        q: Option<&str>,
        devicetype_id: Option<&str>,
        id__n: Option<&str>,
        id__lte: Option<&str>,
        id__lt: Option<&str>,
        id__gte: Option<&str>,
        id__gt: Option<&str>,
        name__n: Option<&str>,
        name__ic: Option<&str>,
        name__nic: Option<&str>,
        name__iew: Option<&str>,
        name__niew: Option<&str>,
        name__isw: Option<&str>,
        name__nisw: Option<&str>,
        name__ie: Option<&str>,
        name__nie: Option<&str>,
        type__n: Option<&str>,
        devicetype_id__n: Option<&str>,
        limit: Option<i32>,
        offset: Option<i32>,
    ) -> Result<crate::models::InlineResponse20014, Error>;
    fn dcim_front_port_templates_partial_update(
        &self,
        id: i32,
        data: crate::models::WritableFrontPortTemplate,
    ) -> Result<crate::models::FrontPortTemplate, Error>;
    fn dcim_front_port_templates_read(
        &self,
        id: i32,
    ) -> Result<crate::models::FrontPortTemplate, Error>;
    fn dcim_front_port_templates_update(
        &self,
        id: i32,
        data: crate::models::WritableFrontPortTemplate,
    ) -> Result<crate::models::FrontPortTemplate, Error>;
    fn dcim_front_ports_create(
        &self,
        data: crate::models::WritableFrontPort,
    ) -> Result<crate::models::FrontPort, Error>;
    fn dcim_front_ports_delete(&self, id: i32) -> Result<(), Error>;
    fn dcim_front_ports_list(
        &self,
        id: Option<&str>,
        name: Option<&str>,
        _type: Option<&str>,
        description: Option<&str>,
        q: Option<&str>,
        region_id: Option<&str>,
        region: Option<&str>,
        site_id: Option<&str>,
        site: Option<&str>,
        device_id: Option<&str>,
        device: Option<&str>,
        tag: Option<&str>,
        cabled: Option<&str>,
        id__n: Option<&str>,
        id__lte: Option<&str>,
        id__lt: Option<&str>,
        id__gte: Option<&str>,
        id__gt: Option<&str>,
        name__n: Option<&str>,
        name__ic: Option<&str>,
        name__nic: Option<&str>,
        name__iew: Option<&str>,
        name__niew: Option<&str>,
        name__isw: Option<&str>,
        name__nisw: Option<&str>,
        name__ie: Option<&str>,
        name__nie: Option<&str>,
        type__n: Option<&str>,
        description__n: Option<&str>,
        description__ic: Option<&str>,
        description__nic: Option<&str>,
        description__iew: Option<&str>,
        description__niew: Option<&str>,
        description__isw: Option<&str>,
        description__nisw: Option<&str>,
        description__ie: Option<&str>,
        description__nie: Option<&str>,
        region_id__n: Option<&str>,
        region__n: Option<&str>,
        site_id__n: Option<&str>,
        site__n: Option<&str>,
        device_id__n: Option<&str>,
        device__n: Option<&str>,
        tag__n: Option<&str>,
        limit: Option<i32>,
        offset: Option<i32>,
    ) -> Result<crate::models::InlineResponse20015, Error>;
    fn dcim_front_ports_partial_update(
        &self,
        id: i32,
        data: crate::models::WritableFrontPort,
    ) -> Result<crate::models::FrontPort, Error>;
    fn dcim_front_ports_read(&self, id: i32) -> Result<crate::models::FrontPort, Error>;
    fn dcim_front_ports_update(
        &self,
        id: i32,
        data: crate::models::WritableFrontPort,
    ) -> Result<crate::models::FrontPort, Error>;
    fn dcim_interface_connections_list(
        &self,
        connection_status: Option<&str>,
        site: Option<&str>,
        device_id: Option<&str>,
        device: Option<&str>,
        connection_status__n: Option<&str>,
        limit: Option<i32>,
        offset: Option<i32>,
    ) -> Result<crate::models::InlineResponse20016, Error>;
    fn dcim_interface_templates_create(
        &self,
        data: crate::models::WritableInterfaceTemplate,
    ) -> Result<crate::models::InterfaceTemplate, Error>;
    fn dcim_interface_templates_delete(&self, id: i32) -> Result<(), Error>;
    fn dcim_interface_templates_list(
        &self,
        id: Option<&str>,
        name: Option<&str>,
        _type: Option<&str>,
        mgmt_only: Option<&str>,
        q: Option<&str>,
        devicetype_id: Option<&str>,
        id__n: Option<&str>,
        id__lte: Option<&str>,
        id__lt: Option<&str>,
        id__gte: Option<&str>,
        id__gt: Option<&str>,
        name__n: Option<&str>,
        name__ic: Option<&str>,
        name__nic: Option<&str>,
        name__iew: Option<&str>,
        name__niew: Option<&str>,
        name__isw: Option<&str>,
        name__nisw: Option<&str>,
        name__ie: Option<&str>,
        name__nie: Option<&str>,
        type__n: Option<&str>,
        devicetype_id__n: Option<&str>,
        limit: Option<i32>,
        offset: Option<i32>,
    ) -> Result<crate::models::InlineResponse20017, Error>;
    fn dcim_interface_templates_partial_update(
        &self,
        id: i32,
        data: crate::models::WritableInterfaceTemplate,
    ) -> Result<crate::models::InterfaceTemplate, Error>;
    fn dcim_interface_templates_read(
        &self,
        id: i32,
    ) -> Result<crate::models::InterfaceTemplate, Error>;
    fn dcim_interface_templates_update(
        &self,
        id: i32,
        data: crate::models::WritableInterfaceTemplate,
    ) -> Result<crate::models::InterfaceTemplate, Error>;
    fn dcim_interfaces_create(
        &self,
        data: crate::models::WritableDeviceInterface,
    ) -> Result<crate::models::DeviceInterface, Error>;
    fn dcim_interfaces_delete(&self, id: i32) -> Result<(), Error>;
    fn dcim_interfaces_graphs(&self, id: i32) -> Result<crate::models::DeviceInterface, Error>;
    fn dcim_interfaces_list(
        &self,
        id: Option<&str>,
        name: Option<&str>,
        connection_status: Option<&str>,
        _type: Option<&str>,
        enabled: Option<&str>,
        mtu: Option<&str>,
        mgmt_only: Option<&str>,
        mode: Option<&str>,
        description: Option<&str>,
        q: Option<&str>,
        region_id: Option<&str>,
        region: Option<&str>,
        site_id: Option<&str>,
        site: Option<&str>,
        device_id: Option<&str>,
        device: Option<&str>,
        tag: Option<&str>,
        cabled: Option<&str>,
        kind: Option<&str>,
        lag_id: Option<&str>,
        mac_address: Option<&str>,
        vlan_id: Option<&str>,
        vlan: Option<&str>,
        id__n: Option<&str>,
        id__lte: Option<&str>,
        id__lt: Option<&str>,
        id__gte: Option<&str>,
        id__gt: Option<&str>,
        name__n: Option<&str>,
        name__ic: Option<&str>,
        name__nic: Option<&str>,
        name__iew: Option<&str>,
        name__niew: Option<&str>,
        name__isw: Option<&str>,
        name__nisw: Option<&str>,
        name__ie: Option<&str>,
        name__nie: Option<&str>,
        connection_status__n: Option<&str>,
        type__n: Option<&str>,
        mtu__n: Option<&str>,
        mtu__lte: Option<&str>,
        mtu__lt: Option<&str>,
        mtu__gte: Option<&str>,
        mtu__gt: Option<&str>,
        mode__n: Option<&str>,
        description__n: Option<&str>,
        description__ic: Option<&str>,
        description__nic: Option<&str>,
        description__iew: Option<&str>,
        description__niew: Option<&str>,
        description__isw: Option<&str>,
        description__nisw: Option<&str>,
        description__ie: Option<&str>,
        description__nie: Option<&str>,
        region_id__n: Option<&str>,
        region__n: Option<&str>,
        site_id__n: Option<&str>,
        site__n: Option<&str>,
        tag__n: Option<&str>,
        lag_id__n: Option<&str>,
        mac_address__n: Option<&str>,
        mac_address__ic: Option<&str>,
        mac_address__nic: Option<&str>,
        mac_address__iew: Option<&str>,
        mac_address__niew: Option<&str>,
        mac_address__isw: Option<&str>,
        mac_address__nisw: Option<&str>,
        mac_address__ie: Option<&str>,
        mac_address__nie: Option<&str>,
        limit: Option<i32>,
        offset: Option<i32>,
    ) -> Result<crate::models::InlineResponse20018, Error>;
    fn dcim_interfaces_partial_update(
        &self,
        id: i32,
        data: crate::models::WritableDeviceInterface,
    ) -> Result<crate::models::DeviceInterface, Error>;
    fn dcim_interfaces_read(&self, id: i32) -> Result<crate::models::DeviceInterface, Error>;
    fn dcim_interfaces_trace(&self, id: i32) -> Result<crate::models::DeviceInterface, Error>;
    fn dcim_interfaces_update(
        &self,
        id: i32,
        data: crate::models::WritableDeviceInterface,
    ) -> Result<crate::models::DeviceInterface, Error>;
    fn dcim_inventory_items_create(
        &self,
        data: crate::models::WritableInventoryItem,
    ) -> Result<crate::models::InventoryItem, Error>;
    fn dcim_inventory_items_delete(&self, id: i32) -> Result<(), Error>;
    fn dcim_inventory_items_list(
        &self,
        id: Option<&str>,
        name: Option<&str>,
        part_id: Option<&str>,
        asset_tag: Option<&str>,
        discovered: Option<&str>,
        q: Option<&str>,
        region_id: Option<&str>,
        region: Option<&str>,
        site_id: Option<&str>,
        site: Option<&str>,
        device_id: Option<&str>,
        device: Option<&str>,
        tag: Option<&str>,
        parent_id: Option<&str>,
        manufacturer_id: Option<&str>,
        manufacturer: Option<&str>,
        serial: Option<&str>,
        id__n: Option<&str>,
        id__lte: Option<&str>,
        id__lt: Option<&str>,
        id__gte: Option<&str>,
        id__gt: Option<&str>,
        name__n: Option<&str>,
        name__ic: Option<&str>,
        name__nic: Option<&str>,
        name__iew: Option<&str>,
        name__niew: Option<&str>,
        name__isw: Option<&str>,
        name__nisw: Option<&str>,
        name__ie: Option<&str>,
        name__nie: Option<&str>,
        part_id__n: Option<&str>,
        part_id__ic: Option<&str>,
        part_id__nic: Option<&str>,
        part_id__iew: Option<&str>,
        part_id__niew: Option<&str>,
        part_id__isw: Option<&str>,
        part_id__nisw: Option<&str>,
        part_id__ie: Option<&str>,
        part_id__nie: Option<&str>,
        asset_tag__n: Option<&str>,
        asset_tag__ic: Option<&str>,
        asset_tag__nic: Option<&str>,
        asset_tag__iew: Option<&str>,
        asset_tag__niew: Option<&str>,
        asset_tag__isw: Option<&str>,
        asset_tag__nisw: Option<&str>,
        asset_tag__ie: Option<&str>,
        asset_tag__nie: Option<&str>,
        region_id__n: Option<&str>,
        region__n: Option<&str>,
        site_id__n: Option<&str>,
        site__n: Option<&str>,
        device_id__n: Option<&str>,
        device__n: Option<&str>,
        tag__n: Option<&str>,
        parent_id__n: Option<&str>,
        manufacturer_id__n: Option<&str>,
        manufacturer__n: Option<&str>,
        limit: Option<i32>,
        offset: Option<i32>,
    ) -> Result<crate::models::InlineResponse20019, Error>;
    fn dcim_inventory_items_partial_update(
        &self,
        id: i32,
        data: crate::models::WritableInventoryItem,
    ) -> Result<crate::models::InventoryItem, Error>;
    fn dcim_inventory_items_read(&self, id: i32) -> Result<crate::models::InventoryItem, Error>;
    fn dcim_inventory_items_update(
        &self,
        id: i32,
        data: crate::models::WritableInventoryItem,
    ) -> Result<crate::models::InventoryItem, Error>;
    fn dcim_manufacturers_create(
        &self,
        data: crate::models::Manufacturer,
    ) -> Result<crate::models::Manufacturer, Error>;
    fn dcim_manufacturers_delete(&self, id: i32) -> Result<(), Error>;
    fn dcim_manufacturers_list(
        &self,
        id: Option<&str>,
        name: Option<&str>,
        slug: Option<&str>,
        q: Option<&str>,
        id__n: Option<&str>,
        id__lte: Option<&str>,
        id__lt: Option<&str>,
        id__gte: Option<&str>,
        id__gt: Option<&str>,
        name__n: Option<&str>,
        name__ic: Option<&str>,
        name__nic: Option<&str>,
        name__iew: Option<&str>,
        name__niew: Option<&str>,
        name__isw: Option<&str>,
        name__nisw: Option<&str>,
        name__ie: Option<&str>,
        name__nie: Option<&str>,
        slug__n: Option<&str>,
        slug__ic: Option<&str>,
        slug__nic: Option<&str>,
        slug__iew: Option<&str>,
        slug__niew: Option<&str>,
        slug__isw: Option<&str>,
        slug__nisw: Option<&str>,
        slug__ie: Option<&str>,
        slug__nie: Option<&str>,
        limit: Option<i32>,
        offset: Option<i32>,
    ) -> Result<crate::models::InlineResponse20020, Error>;
    fn dcim_manufacturers_partial_update(
        &self,
        id: i32,
        data: crate::models::Manufacturer,
    ) -> Result<crate::models::Manufacturer, Error>;
    fn dcim_manufacturers_read(&self, id: i32) -> Result<crate::models::Manufacturer, Error>;
    fn dcim_manufacturers_update(
        &self,
        id: i32,
        data: crate::models::Manufacturer,
    ) -> Result<crate::models::Manufacturer, Error>;
    fn dcim_platforms_create(
        &self,
        data: crate::models::WritablePlatform,
    ) -> Result<crate::models::Platform, Error>;
    fn dcim_platforms_delete(&self, id: i32) -> Result<(), Error>;
    fn dcim_platforms_list(
        &self,
        id: Option<&str>,
        name: Option<&str>,
        slug: Option<&str>,
        napalm_driver: Option<&str>,
        q: Option<&str>,
        manufacturer_id: Option<&str>,
        manufacturer: Option<&str>,
        id__n: Option<&str>,
        id__lte: Option<&str>,
        id__lt: Option<&str>,
        id__gte: Option<&str>,
        id__gt: Option<&str>,
        name__n: Option<&str>,
        name__ic: Option<&str>,
        name__nic: Option<&str>,
        name__iew: Option<&str>,
        name__niew: Option<&str>,
        name__isw: Option<&str>,
        name__nisw: Option<&str>,
        name__ie: Option<&str>,
        name__nie: Option<&str>,
        slug__n: Option<&str>,
        slug__ic: Option<&str>,
        slug__nic: Option<&str>,
        slug__iew: Option<&str>,
        slug__niew: Option<&str>,
        slug__isw: Option<&str>,
        slug__nisw: Option<&str>,
        slug__ie: Option<&str>,
        slug__nie: Option<&str>,
        napalm_driver__n: Option<&str>,
        napalm_driver__ic: Option<&str>,
        napalm_driver__nic: Option<&str>,
        napalm_driver__iew: Option<&str>,
        napalm_driver__niew: Option<&str>,
        napalm_driver__isw: Option<&str>,
        napalm_driver__nisw: Option<&str>,
        napalm_driver__ie: Option<&str>,
        napalm_driver__nie: Option<&str>,
        manufacturer_id__n: Option<&str>,
        manufacturer__n: Option<&str>,
        limit: Option<i32>,
        offset: Option<i32>,
    ) -> Result<crate::models::InlineResponse20021, Error>;
    fn dcim_platforms_partial_update(
        &self,
        id: i32,
        data: crate::models::WritablePlatform,
    ) -> Result<crate::models::Platform, Error>;
    fn dcim_platforms_read(&self, id: i32) -> Result<crate::models::Platform, Error>;
    fn dcim_platforms_update(
        &self,
        id: i32,
        data: crate::models::WritablePlatform,
    ) -> Result<crate::models::Platform, Error>;
    fn dcim_power_connections_list(
        &self,
        name: Option<&str>,
        connection_status: Option<&str>,
        site: Option<&str>,
        device_id: Option<&str>,
        device: Option<&str>,
        name__n: Option<&str>,
        name__ic: Option<&str>,
        name__nic: Option<&str>,
        name__iew: Option<&str>,
        name__niew: Option<&str>,
        name__isw: Option<&str>,
        name__nisw: Option<&str>,
        name__ie: Option<&str>,
        name__nie: Option<&str>,
        connection_status__n: Option<&str>,
        limit: Option<i32>,
        offset: Option<i32>,
    ) -> Result<crate::models::InlineResponse20022, Error>;
    fn dcim_power_feeds_create(
        &self,
        data: crate::models::WritablePowerFeed,
    ) -> Result<crate::models::PowerFeed, Error>;
    fn dcim_power_feeds_delete(&self, id: i32) -> Result<(), Error>;
    fn dcim_power_feeds_list(
        &self,
        name: Option<&str>,
        status: Option<&str>,
        _type: Option<&str>,
        supply: Option<&str>,
        phase: Option<&str>,
        voltage: Option<&str>,
        amperage: Option<&str>,
        max_utilization: Option<&str>,
        created: Option<&str>,
        created__gte: Option<&str>,
        created__lte: Option<&str>,
        last_updated: Option<&str>,
        last_updated__gte: Option<&str>,
        last_updated__lte: Option<&str>,
        id__in: Option<&str>,
        q: Option<&str>,
        region_id: Option<&str>,
        region: Option<&str>,
        site_id: Option<&str>,
        site: Option<&str>,
        power_panel_id: Option<&str>,
        rack_id: Option<&str>,
        tag: Option<&str>,
        name__n: Option<&str>,
        name__ic: Option<&str>,
        name__nic: Option<&str>,
        name__iew: Option<&str>,
        name__niew: Option<&str>,
        name__isw: Option<&str>,
        name__nisw: Option<&str>,
        name__ie: Option<&str>,
        name__nie: Option<&str>,
        status__n: Option<&str>,
        type__n: Option<&str>,
        supply__n: Option<&str>,
        phase__n: Option<&str>,
        voltage__n: Option<&str>,
        voltage__lte: Option<&str>,
        voltage__lt: Option<&str>,
        voltage__gte: Option<&str>,
        voltage__gt: Option<&str>,
        amperage__n: Option<&str>,
        amperage__lte: Option<&str>,
        amperage__lt: Option<&str>,
        amperage__gte: Option<&str>,
        amperage__gt: Option<&str>,
        max_utilization__n: Option<&str>,
        max_utilization__lte: Option<&str>,
        max_utilization__lt: Option<&str>,
        max_utilization__gte: Option<&str>,
        max_utilization__gt: Option<&str>,
        region_id__n: Option<&str>,
        region__n: Option<&str>,
        site_id__n: Option<&str>,
        site__n: Option<&str>,
        power_panel_id__n: Option<&str>,
        rack_id__n: Option<&str>,
        tag__n: Option<&str>,
        limit: Option<i32>,
        offset: Option<i32>,
    ) -> Result<crate::models::InlineResponse20023, Error>;
    fn dcim_power_feeds_partial_update(
        &self,
        id: i32,
        data: crate::models::WritablePowerFeed,
    ) -> Result<crate::models::PowerFeed, Error>;
    fn dcim_power_feeds_read(&self, id: i32) -> Result<crate::models::PowerFeed, Error>;
    fn dcim_power_feeds_update(
        &self,
        id: i32,
        data: crate::models::WritablePowerFeed,
    ) -> Result<crate::models::PowerFeed, Error>;
    fn dcim_power_outlet_templates_create(
        &self,
        data: crate::models::WritablePowerOutletTemplate,
    ) -> Result<crate::models::PowerOutletTemplate, Error>;
    fn dcim_power_outlet_templates_delete(&self, id: i32) -> Result<(), Error>;
    fn dcim_power_outlet_templates_list(
        &self,
        id: Option<&str>,
        name: Option<&str>,
        _type: Option<&str>,
        feed_leg: Option<&str>,
        q: Option<&str>,
        devicetype_id: Option<&str>,
        id__n: Option<&str>,
        id__lte: Option<&str>,
        id__lt: Option<&str>,
        id__gte: Option<&str>,
        id__gt: Option<&str>,
        name__n: Option<&str>,
        name__ic: Option<&str>,
        name__nic: Option<&str>,
        name__iew: Option<&str>,
        name__niew: Option<&str>,
        name__isw: Option<&str>,
        name__nisw: Option<&str>,
        name__ie: Option<&str>,
        name__nie: Option<&str>,
        type__n: Option<&str>,
        feed_leg__n: Option<&str>,
        devicetype_id__n: Option<&str>,
        limit: Option<i32>,
        offset: Option<i32>,
    ) -> Result<crate::models::InlineResponse20024, Error>;
    fn dcim_power_outlet_templates_partial_update(
        &self,
        id: i32,
        data: crate::models::WritablePowerOutletTemplate,
    ) -> Result<crate::models::PowerOutletTemplate, Error>;
    fn dcim_power_outlet_templates_read(
        &self,
        id: i32,
    ) -> Result<crate::models::PowerOutletTemplate, Error>;
    fn dcim_power_outlet_templates_update(
        &self,
        id: i32,
        data: crate::models::WritablePowerOutletTemplate,
    ) -> Result<crate::models::PowerOutletTemplate, Error>;
    fn dcim_power_outlets_create(
        &self,
        data: crate::models::WritablePowerOutlet,
    ) -> Result<crate::models::PowerOutlet, Error>;
    fn dcim_power_outlets_delete(&self, id: i32) -> Result<(), Error>;
    fn dcim_power_outlets_list(
        &self,
        id: Option<&str>,
        name: Option<&str>,
        feed_leg: Option<&str>,
        description: Option<&str>,
        connection_status: Option<&str>,
        q: Option<&str>,
        region_id: Option<&str>,
        region: Option<&str>,
        site_id: Option<&str>,
        site: Option<&str>,
        device_id: Option<&str>,
        device: Option<&str>,
        tag: Option<&str>,
        _type: Option<&str>,
        cabled: Option<&str>,
        id__n: Option<&str>,
        id__lte: Option<&str>,
        id__lt: Option<&str>,
        id__gte: Option<&str>,
        id__gt: Option<&str>,
        name__n: Option<&str>,
        name__ic: Option<&str>,
        name__nic: Option<&str>,
        name__iew: Option<&str>,
        name__niew: Option<&str>,
        name__isw: Option<&str>,
        name__nisw: Option<&str>,
        name__ie: Option<&str>,
        name__nie: Option<&str>,
        feed_leg__n: Option<&str>,
        description__n: Option<&str>,
        description__ic: Option<&str>,
        description__nic: Option<&str>,
        description__iew: Option<&str>,
        description__niew: Option<&str>,
        description__isw: Option<&str>,
        description__nisw: Option<&str>,
        description__ie: Option<&str>,
        description__nie: Option<&str>,
        connection_status__n: Option<&str>,
        region_id__n: Option<&str>,
        region__n: Option<&str>,
        site_id__n: Option<&str>,
        site__n: Option<&str>,
        device_id__n: Option<&str>,
        device__n: Option<&str>,
        tag__n: Option<&str>,
        type__n: Option<&str>,
        limit: Option<i32>,
        offset: Option<i32>,
    ) -> Result<crate::models::InlineResponse20025, Error>;
    fn dcim_power_outlets_partial_update(
        &self,
        id: i32,
        data: crate::models::WritablePowerOutlet,
    ) -> Result<crate::models::PowerOutlet, Error>;
    fn dcim_power_outlets_read(&self, id: i32) -> Result<crate::models::PowerOutlet, Error>;
    fn dcim_power_outlets_trace(&self, id: i32) -> Result<crate::models::PowerOutlet, Error>;
    fn dcim_power_outlets_update(
        &self,
        id: i32,
        data: crate::models::WritablePowerOutlet,
    ) -> Result<crate::models::PowerOutlet, Error>;
    fn dcim_power_panels_create(
        &self,
        data: crate::models::WritablePowerPanel,
    ) -> Result<crate::models::PowerPanel, Error>;
    fn dcim_power_panels_delete(&self, id: i32) -> Result<(), Error>;
    fn dcim_power_panels_list(
        &self,
        name: Option<&str>,
        id__in: Option<&str>,
        q: Option<&str>,
        region_id: Option<&str>,
        region: Option<&str>,
        site_id: Option<&str>,
        site: Option<&str>,
        rack_group_id: Option<&str>,
        name__n: Option<&str>,
        name__ic: Option<&str>,
        name__nic: Option<&str>,
        name__iew: Option<&str>,
        name__niew: Option<&str>,
        name__isw: Option<&str>,
        name__nisw: Option<&str>,
        name__ie: Option<&str>,
        name__nie: Option<&str>,
        region_id__n: Option<&str>,
        region__n: Option<&str>,
        site_id__n: Option<&str>,
        site__n: Option<&str>,
        rack_group_id__n: Option<&str>,
        limit: Option<i32>,
        offset: Option<i32>,
    ) -> Result<crate::models::InlineResponse20026, Error>;
    fn dcim_power_panels_partial_update(
        &self,
        id: i32,
        data: crate::models::WritablePowerPanel,
    ) -> Result<crate::models::PowerPanel, Error>;
    fn dcim_power_panels_read(&self, id: i32) -> Result<crate::models::PowerPanel, Error>;
    fn dcim_power_panels_update(
        &self,
        id: i32,
        data: crate::models::WritablePowerPanel,
    ) -> Result<crate::models::PowerPanel, Error>;
    fn dcim_power_port_templates_create(
        &self,
        data: crate::models::WritablePowerPortTemplate,
    ) -> Result<crate::models::PowerPortTemplate, Error>;
    fn dcim_power_port_templates_delete(&self, id: i32) -> Result<(), Error>;
    fn dcim_power_port_templates_list(
        &self,
        id: Option<&str>,
        name: Option<&str>,
        _type: Option<&str>,
        maximum_draw: Option<&str>,
        allocated_draw: Option<&str>,
        q: Option<&str>,
        devicetype_id: Option<&str>,
        id__n: Option<&str>,
        id__lte: Option<&str>,
        id__lt: Option<&str>,
        id__gte: Option<&str>,
        id__gt: Option<&str>,
        name__n: Option<&str>,
        name__ic: Option<&str>,
        name__nic: Option<&str>,
        name__iew: Option<&str>,
        name__niew: Option<&str>,
        name__isw: Option<&str>,
        name__nisw: Option<&str>,
        name__ie: Option<&str>,
        name__nie: Option<&str>,
        type__n: Option<&str>,
        maximum_draw__n: Option<&str>,
        maximum_draw__lte: Option<&str>,
        maximum_draw__lt: Option<&str>,
        maximum_draw__gte: Option<&str>,
        maximum_draw__gt: Option<&str>,
        allocated_draw__n: Option<&str>,
        allocated_draw__lte: Option<&str>,
        allocated_draw__lt: Option<&str>,
        allocated_draw__gte: Option<&str>,
        allocated_draw__gt: Option<&str>,
        devicetype_id__n: Option<&str>,
        limit: Option<i32>,
        offset: Option<i32>,
    ) -> Result<crate::models::InlineResponse20027, Error>;
    fn dcim_power_port_templates_partial_update(
        &self,
        id: i32,
        data: crate::models::WritablePowerPortTemplate,
    ) -> Result<crate::models::PowerPortTemplate, Error>;
    fn dcim_power_port_templates_read(
        &self,
        id: i32,
    ) -> Result<crate::models::PowerPortTemplate, Error>;
    fn dcim_power_port_templates_update(
        &self,
        id: i32,
        data: crate::models::WritablePowerPortTemplate,
    ) -> Result<crate::models::PowerPortTemplate, Error>;
    fn dcim_power_ports_create(
        &self,
        data: crate::models::WritablePowerPort,
    ) -> Result<crate::models::PowerPort, Error>;
    fn dcim_power_ports_delete(&self, id: i32) -> Result<(), Error>;
    fn dcim_power_ports_list(
        &self,
        id: Option<&str>,
        name: Option<&str>,
        maximum_draw: Option<&str>,
        allocated_draw: Option<&str>,
        description: Option<&str>,
        connection_status: Option<&str>,
        q: Option<&str>,
        region_id: Option<&str>,
        region: Option<&str>,
        site_id: Option<&str>,
        site: Option<&str>,
        device_id: Option<&str>,
        device: Option<&str>,
        tag: Option<&str>,
        _type: Option<&str>,
        cabled: Option<&str>,
        id__n: Option<&str>,
        id__lte: Option<&str>,
        id__lt: Option<&str>,
        id__gte: Option<&str>,
        id__gt: Option<&str>,
        name__n: Option<&str>,
        name__ic: Option<&str>,
        name__nic: Option<&str>,
        name__iew: Option<&str>,
        name__niew: Option<&str>,
        name__isw: Option<&str>,
        name__nisw: Option<&str>,
        name__ie: Option<&str>,
        name__nie: Option<&str>,
        maximum_draw__n: Option<&str>,
        maximum_draw__lte: Option<&str>,
        maximum_draw__lt: Option<&str>,
        maximum_draw__gte: Option<&str>,
        maximum_draw__gt: Option<&str>,
        allocated_draw__n: Option<&str>,
        allocated_draw__lte: Option<&str>,
        allocated_draw__lt: Option<&str>,
        allocated_draw__gte: Option<&str>,
        allocated_draw__gt: Option<&str>,
        description__n: Option<&str>,
        description__ic: Option<&str>,
        description__nic: Option<&str>,
        description__iew: Option<&str>,
        description__niew: Option<&str>,
        description__isw: Option<&str>,
        description__nisw: Option<&str>,
        description__ie: Option<&str>,
        description__nie: Option<&str>,
        connection_status__n: Option<&str>,
        region_id__n: Option<&str>,
        region__n: Option<&str>,
        site_id__n: Option<&str>,
        site__n: Option<&str>,
        device_id__n: Option<&str>,
        device__n: Option<&str>,
        tag__n: Option<&str>,
        type__n: Option<&str>,
        limit: Option<i32>,
        offset: Option<i32>,
    ) -> Result<crate::models::InlineResponse20022, Error>;
    fn dcim_power_ports_partial_update(
        &self,
        id: i32,
        data: crate::models::WritablePowerPort,
    ) -> Result<crate::models::PowerPort, Error>;
    fn dcim_power_ports_read(&self, id: i32) -> Result<crate::models::PowerPort, Error>;
    fn dcim_power_ports_trace(&self, id: i32) -> Result<crate::models::PowerPort, Error>;
    fn dcim_power_ports_update(
        &self,
        id: i32,
        data: crate::models::WritablePowerPort,
    ) -> Result<crate::models::PowerPort, Error>;
    fn dcim_rack_groups_create(
        &self,
        data: crate::models::WritableRackGroup,
    ) -> Result<crate::models::RackGroup, Error>;
    fn dcim_rack_groups_delete(&self, id: i32) -> Result<(), Error>;
    fn dcim_rack_groups_list(
        &self,
        id: Option<&str>,
        name: Option<&str>,
        slug: Option<&str>,
        q: Option<&str>,
        region_id: Option<&str>,
        region: Option<&str>,
        site_id: Option<&str>,
        site: Option<&str>,
        id__n: Option<&str>,
        id__lte: Option<&str>,
        id__lt: Option<&str>,
        id__gte: Option<&str>,
        id__gt: Option<&str>,
        name__n: Option<&str>,
        name__ic: Option<&str>,
        name__nic: Option<&str>,
        name__iew: Option<&str>,
        name__niew: Option<&str>,
        name__isw: Option<&str>,
        name__nisw: Option<&str>,
        name__ie: Option<&str>,
        name__nie: Option<&str>,
        slug__n: Option<&str>,
        slug__ic: Option<&str>,
        slug__nic: Option<&str>,
        slug__iew: Option<&str>,
        slug__niew: Option<&str>,
        slug__isw: Option<&str>,
        slug__nisw: Option<&str>,
        slug__ie: Option<&str>,
        slug__nie: Option<&str>,
        region_id__n: Option<&str>,
        region__n: Option<&str>,
        site_id__n: Option<&str>,
        site__n: Option<&str>,
        limit: Option<i32>,
        offset: Option<i32>,
    ) -> Result<crate::models::InlineResponse20028, Error>;
    fn dcim_rack_groups_partial_update(
        &self,
        id: i32,
        data: crate::models::WritableRackGroup,
    ) -> Result<crate::models::RackGroup, Error>;
    fn dcim_rack_groups_read(&self, id: i32) -> Result<crate::models::RackGroup, Error>;
    fn dcim_rack_groups_update(
        &self,
        id: i32,
        data: crate::models::WritableRackGroup,
    ) -> Result<crate::models::RackGroup, Error>;
    fn dcim_rack_reservations_create(
        &self,
        data: crate::models::WritableRackReservation,
    ) -> Result<crate::models::RackReservation, Error>;
    fn dcim_rack_reservations_delete(&self, id: i32) -> Result<(), Error>;
    fn dcim_rack_reservations_list(
        &self,
        created: Option<&str>,
        tenant_group_id: Option<&str>,
        tenant_group: Option<&str>,
        tenant_id: Option<&str>,
        tenant: Option<&str>,
        id__in: Option<&str>,
        q: Option<&str>,
        rack_id: Option<&str>,
        site_id: Option<&str>,
        site: Option<&str>,
        group_id: Option<&str>,
        group: Option<&str>,
        user_id: Option<&str>,
        user: Option<&str>,
        created__n: Option<&str>,
        created__lte: Option<&str>,
        created__lt: Option<&str>,
        created__gte: Option<&str>,
        created__gt: Option<&str>,
        tenant_group_id__n: Option<&str>,
        tenant_group__n: Option<&str>,
        tenant_id__n: Option<&str>,
        tenant__n: Option<&str>,
        rack_id__n: Option<&str>,
        site_id__n: Option<&str>,
        site__n: Option<&str>,
        group_id__n: Option<&str>,
        group__n: Option<&str>,
        user_id__n: Option<&str>,
        user__n: Option<&str>,
        limit: Option<i32>,
        offset: Option<i32>,
    ) -> Result<crate::models::InlineResponse20029, Error>;
    fn dcim_rack_reservations_partial_update(
        &self,
        id: i32,
        data: crate::models::WritableRackReservation,
    ) -> Result<crate::models::RackReservation, Error>;
    fn dcim_rack_reservations_read(&self, id: i32)
        -> Result<crate::models::RackReservation, Error>;
    fn dcim_rack_reservations_update(
        &self,
        id: i32,
        data: crate::models::WritableRackReservation,
    ) -> Result<crate::models::RackReservation, Error>;
    fn dcim_rack_roles_create(
        &self,
        data: crate::models::RackRole,
    ) -> Result<crate::models::RackRole, Error>;
    fn dcim_rack_roles_delete(&self, id: i32) -> Result<(), Error>;
    fn dcim_rack_roles_list(
        &self,
        id: Option<&str>,
        name: Option<&str>,
        slug: Option<&str>,
        color: Option<&str>,
        q: Option<&str>,
        id__n: Option<&str>,
        id__lte: Option<&str>,
        id__lt: Option<&str>,
        id__gte: Option<&str>,
        id__gt: Option<&str>,
        name__n: Option<&str>,
        name__ic: Option<&str>,
        name__nic: Option<&str>,
        name__iew: Option<&str>,
        name__niew: Option<&str>,
        name__isw: Option<&str>,
        name__nisw: Option<&str>,
        name__ie: Option<&str>,
        name__nie: Option<&str>,
        slug__n: Option<&str>,
        slug__ic: Option<&str>,
        slug__nic: Option<&str>,
        slug__iew: Option<&str>,
        slug__niew: Option<&str>,
        slug__isw: Option<&str>,
        slug__nisw: Option<&str>,
        slug__ie: Option<&str>,
        slug__nie: Option<&str>,
        color__n: Option<&str>,
        color__ic: Option<&str>,
        color__nic: Option<&str>,
        color__iew: Option<&str>,
        color__niew: Option<&str>,
        color__isw: Option<&str>,
        color__nisw: Option<&str>,
        color__ie: Option<&str>,
        color__nie: Option<&str>,
        limit: Option<i32>,
        offset: Option<i32>,
    ) -> Result<crate::models::InlineResponse20030, Error>;
    fn dcim_rack_roles_partial_update(
        &self,
        id: i32,
        data: crate::models::RackRole,
    ) -> Result<crate::models::RackRole, Error>;
    fn dcim_rack_roles_read(&self, id: i32) -> Result<crate::models::RackRole, Error>;
    fn dcim_rack_roles_update(
        &self,
        id: i32,
        data: crate::models::RackRole,
    ) -> Result<crate::models::RackRole, Error>;
    fn dcim_racks_create(
        &self,
        data: crate::models::WritableRack,
    ) -> Result<crate::models::Rack, Error>;
    fn dcim_racks_delete(&self, id: i32) -> Result<(), Error>;
    fn dcim_racks_elevation(
        &self,
        id: i32,
        q: Option<&str>,
        face: Option<&str>,
        render: Option<&str>,
        unit_width: Option<i32>,
        unit_height: Option<i32>,
        legend_width: Option<i32>,
        exclude: Option<i32>,
        expand_devices: Option<bool>,
        include_images: Option<bool>,
    ) -> Result<Vec<crate::models::RackUnit>, Error>;
    fn dcim_racks_list(
        &self,
        id: Option<&str>,
        name: Option<&str>,
        facility_id: Option<&str>,
        asset_tag: Option<&str>,
        _type: Option<&str>,
        width: Option<&str>,
        u_height: Option<&str>,
        desc_units: Option<&str>,
        outer_width: Option<&str>,
        outer_depth: Option<&str>,
        outer_unit: Option<&str>,
        tenant_group_id: Option<&str>,
        tenant_group: Option<&str>,
        tenant_id: Option<&str>,
        tenant: Option<&str>,
        created: Option<&str>,
        created__gte: Option<&str>,
        created__lte: Option<&str>,
        last_updated: Option<&str>,
        last_updated__gte: Option<&str>,
        last_updated__lte: Option<&str>,
        id__in: Option<&str>,
        q: Option<&str>,
        region_id: Option<&str>,
        region: Option<&str>,
        site_id: Option<&str>,
        site: Option<&str>,
        group_id: Option<&str>,
        group: Option<&str>,
        status: Option<&str>,
        role_id: Option<&str>,
        role: Option<&str>,
        serial: Option<&str>,
        tag: Option<&str>,
        id__n: Option<&str>,
        id__lte: Option<&str>,
        id__lt: Option<&str>,
        id__gte: Option<&str>,
        id__gt: Option<&str>,
        name__n: Option<&str>,
        name__ic: Option<&str>,
        name__nic: Option<&str>,
        name__iew: Option<&str>,
        name__niew: Option<&str>,
        name__isw: Option<&str>,
        name__nisw: Option<&str>,
        name__ie: Option<&str>,
        name__nie: Option<&str>,
        facility_id__n: Option<&str>,
        facility_id__ic: Option<&str>,
        facility_id__nic: Option<&str>,
        facility_id__iew: Option<&str>,
        facility_id__niew: Option<&str>,
        facility_id__isw: Option<&str>,
        facility_id__nisw: Option<&str>,
        facility_id__ie: Option<&str>,
        facility_id__nie: Option<&str>,
        asset_tag__n: Option<&str>,
        asset_tag__ic: Option<&str>,
        asset_tag__nic: Option<&str>,
        asset_tag__iew: Option<&str>,
        asset_tag__niew: Option<&str>,
        asset_tag__isw: Option<&str>,
        asset_tag__nisw: Option<&str>,
        asset_tag__ie: Option<&str>,
        asset_tag__nie: Option<&str>,
        type__n: Option<&str>,
        width__n: Option<&str>,
        u_height__n: Option<&str>,
        u_height__lte: Option<&str>,
        u_height__lt: Option<&str>,
        u_height__gte: Option<&str>,
        u_height__gt: Option<&str>,
        outer_width__n: Option<&str>,
        outer_width__lte: Option<&str>,
        outer_width__lt: Option<&str>,
        outer_width__gte: Option<&str>,
        outer_width__gt: Option<&str>,
        outer_depth__n: Option<&str>,
        outer_depth__lte: Option<&str>,
        outer_depth__lt: Option<&str>,
        outer_depth__gte: Option<&str>,
        outer_depth__gt: Option<&str>,
        outer_unit__n: Option<&str>,
        tenant_group_id__n: Option<&str>,
        tenant_group__n: Option<&str>,
        tenant_id__n: Option<&str>,
        tenant__n: Option<&str>,
        region_id__n: Option<&str>,
        region__n: Option<&str>,
        site_id__n: Option<&str>,
        site__n: Option<&str>,
        group_id__n: Option<&str>,
        group__n: Option<&str>,
        status__n: Option<&str>,
        role_id__n: Option<&str>,
        role__n: Option<&str>,
        tag__n: Option<&str>,
        limit: Option<i32>,
        offset: Option<i32>,
    ) -> Result<crate::models::InlineResponse20031, Error>;
    fn dcim_racks_partial_update(
        &self,
        id: i32,
        data: crate::models::WritableRack,
    ) -> Result<crate::models::Rack, Error>;
    fn dcim_racks_read(&self, id: i32) -> Result<crate::models::Rack, Error>;
    fn dcim_racks_units(&self, id: i32) -> Result<crate::models::Rack, Error>;
    fn dcim_racks_update(
        &self,
        id: i32,
        data: crate::models::WritableRack,
    ) -> Result<crate::models::Rack, Error>;
    fn dcim_rear_port_templates_create(
        &self,
        data: crate::models::WritableRearPortTemplate,
    ) -> Result<crate::models::RearPortTemplate, Error>;
    fn dcim_rear_port_templates_delete(&self, id: i32) -> Result<(), Error>;
    fn dcim_rear_port_templates_list(
        &self,
        id: Option<&str>,
        name: Option<&str>,
        _type: Option<&str>,
        positions: Option<&str>,
        q: Option<&str>,
        devicetype_id: Option<&str>,
        id__n: Option<&str>,
        id__lte: Option<&str>,
        id__lt: Option<&str>,
        id__gte: Option<&str>,
        id__gt: Option<&str>,
        name__n: Option<&str>,
        name__ic: Option<&str>,
        name__nic: Option<&str>,
        name__iew: Option<&str>,
        name__niew: Option<&str>,
        name__isw: Option<&str>,
        name__nisw: Option<&str>,
        name__ie: Option<&str>,
        name__nie: Option<&str>,
        type__n: Option<&str>,
        positions__n: Option<&str>,
        positions__lte: Option<&str>,
        positions__lt: Option<&str>,
        positions__gte: Option<&str>,
        positions__gt: Option<&str>,
        devicetype_id__n: Option<&str>,
        limit: Option<i32>,
        offset: Option<i32>,
    ) -> Result<crate::models::InlineResponse20032, Error>;
    fn dcim_rear_port_templates_partial_update(
        &self,
        id: i32,
        data: crate::models::WritableRearPortTemplate,
    ) -> Result<crate::models::RearPortTemplate, Error>;
    fn dcim_rear_port_templates_read(
        &self,
        id: i32,
    ) -> Result<crate::models::RearPortTemplate, Error>;
    fn dcim_rear_port_templates_update(
        &self,
        id: i32,
        data: crate::models::WritableRearPortTemplate,
    ) -> Result<crate::models::RearPortTemplate, Error>;
    fn dcim_rear_ports_create(
        &self,
        data: crate::models::WritableRearPort,
    ) -> Result<crate::models::RearPort, Error>;
    fn dcim_rear_ports_delete(&self, id: i32) -> Result<(), Error>;
    fn dcim_rear_ports_list(
        &self,
        id: Option<&str>,
        name: Option<&str>,
        _type: Option<&str>,
        positions: Option<&str>,
        description: Option<&str>,
        q: Option<&str>,
        region_id: Option<&str>,
        region: Option<&str>,
        site_id: Option<&str>,
        site: Option<&str>,
        device_id: Option<&str>,
        device: Option<&str>,
        tag: Option<&str>,
        cabled: Option<&str>,
        id__n: Option<&str>,
        id__lte: Option<&str>,
        id__lt: Option<&str>,
        id__gte: Option<&str>,
        id__gt: Option<&str>,
        name__n: Option<&str>,
        name__ic: Option<&str>,
        name__nic: Option<&str>,
        name__iew: Option<&str>,
        name__niew: Option<&str>,
        name__isw: Option<&str>,
        name__nisw: Option<&str>,
        name__ie: Option<&str>,
        name__nie: Option<&str>,
        type__n: Option<&str>,
        positions__n: Option<&str>,
        positions__lte: Option<&str>,
        positions__lt: Option<&str>,
        positions__gte: Option<&str>,
        positions__gt: Option<&str>,
        description__n: Option<&str>,
        description__ic: Option<&str>,
        description__nic: Option<&str>,
        description__iew: Option<&str>,
        description__niew: Option<&str>,
        description__isw: Option<&str>,
        description__nisw: Option<&str>,
        description__ie: Option<&str>,
        description__nie: Option<&str>,
        region_id__n: Option<&str>,
        region__n: Option<&str>,
        site_id__n: Option<&str>,
        site__n: Option<&str>,
        device_id__n: Option<&str>,
        device__n: Option<&str>,
        tag__n: Option<&str>,
        limit: Option<i32>,
        offset: Option<i32>,
    ) -> Result<crate::models::InlineResponse20033, Error>;
    fn dcim_rear_ports_partial_update(
        &self,
        id: i32,
        data: crate::models::WritableRearPort,
    ) -> Result<crate::models::RearPort, Error>;
    fn dcim_rear_ports_read(&self, id: i32) -> Result<crate::models::RearPort, Error>;
    fn dcim_rear_ports_update(
        &self,
        id: i32,
        data: crate::models::WritableRearPort,
    ) -> Result<crate::models::RearPort, Error>;
    fn dcim_regions_create(
        &self,
        data: crate::models::WritableRegion,
    ) -> Result<crate::models::Region, Error>;
    fn dcim_regions_delete(&self, id: i32) -> Result<(), Error>;
    fn dcim_regions_list(
        &self,
        id: Option<&str>,
        name: Option<&str>,
        slug: Option<&str>,
        q: Option<&str>,
        parent_id: Option<&str>,
        parent: Option<&str>,
        id__n: Option<&str>,
        id__lte: Option<&str>,
        id__lt: Option<&str>,
        id__gte: Option<&str>,
        id__gt: Option<&str>,
        name__n: Option<&str>,
        name__ic: Option<&str>,
        name__nic: Option<&str>,
        name__iew: Option<&str>,
        name__niew: Option<&str>,
        name__isw: Option<&str>,
        name__nisw: Option<&str>,
        name__ie: Option<&str>,
        name__nie: Option<&str>,
        slug__n: Option<&str>,
        slug__ic: Option<&str>,
        slug__nic: Option<&str>,
        slug__iew: Option<&str>,
        slug__niew: Option<&str>,
        slug__isw: Option<&str>,
        slug__nisw: Option<&str>,
        slug__ie: Option<&str>,
        slug__nie: Option<&str>,
        parent_id__n: Option<&str>,
        parent__n: Option<&str>,
        limit: Option<i32>,
        offset: Option<i32>,
    ) -> Result<crate::models::InlineResponse20034, Error>;
    fn dcim_regions_partial_update(
        &self,
        id: i32,
        data: crate::models::WritableRegion,
    ) -> Result<crate::models::Region, Error>;
    fn dcim_regions_read(&self, id: i32) -> Result<crate::models::Region, Error>;
    fn dcim_regions_update(
        &self,
        id: i32,
        data: crate::models::WritableRegion,
    ) -> Result<crate::models::Region, Error>;
    fn dcim_sites_create(
        &self,
        data: crate::models::WritableSite,
    ) -> Result<crate::models::Site, Error>;
    fn dcim_sites_delete(&self, id: i32) -> Result<(), Error>;
    fn dcim_sites_graphs(&self, id: i32) -> Result<crate::models::Site, Error>;
    fn dcim_sites_list(
        &self,
        id: Option<&str>,
        name: Option<&str>,
        slug: Option<&str>,
        facility: Option<&str>,
        asn: Option<&str>,
        latitude: Option<&str>,
        longitude: Option<&str>,
        contact_name: Option<&str>,
        contact_phone: Option<&str>,
        contact_email: Option<&str>,
        tenant_group_id: Option<&str>,
        tenant_group: Option<&str>,
        tenant_id: Option<&str>,
        tenant: Option<&str>,
        created: Option<&str>,
        created__gte: Option<&str>,
        created__lte: Option<&str>,
        last_updated: Option<&str>,
        last_updated__gte: Option<&str>,
        last_updated__lte: Option<&str>,
        id__in: Option<&str>,
        q: Option<&str>,
        status: Option<&str>,
        region_id: Option<&str>,
        region: Option<&str>,
        tag: Option<&str>,
        id__n: Option<&str>,
        id__lte: Option<&str>,
        id__lt: Option<&str>,
        id__gte: Option<&str>,
        id__gt: Option<&str>,
        name__n: Option<&str>,
        name__ic: Option<&str>,
        name__nic: Option<&str>,
        name__iew: Option<&str>,
        name__niew: Option<&str>,
        name__isw: Option<&str>,
        name__nisw: Option<&str>,
        name__ie: Option<&str>,
        name__nie: Option<&str>,
        slug__n: Option<&str>,
        slug__ic: Option<&str>,
        slug__nic: Option<&str>,
        slug__iew: Option<&str>,
        slug__niew: Option<&str>,
        slug__isw: Option<&str>,
        slug__nisw: Option<&str>,
        slug__ie: Option<&str>,
        slug__nie: Option<&str>,
        facility__n: Option<&str>,
        facility__ic: Option<&str>,
        facility__nic: Option<&str>,
        facility__iew: Option<&str>,
        facility__niew: Option<&str>,
        facility__isw: Option<&str>,
        facility__nisw: Option<&str>,
        facility__ie: Option<&str>,
        facility__nie: Option<&str>,
        asn__n: Option<&str>,
        asn__lte: Option<&str>,
        asn__lt: Option<&str>,
        asn__gte: Option<&str>,
        asn__gt: Option<&str>,
        latitude__n: Option<&str>,
        latitude__lte: Option<&str>,
        latitude__lt: Option<&str>,
        latitude__gte: Option<&str>,
        latitude__gt: Option<&str>,
        longitude__n: Option<&str>,
        longitude__lte: Option<&str>,
        longitude__lt: Option<&str>,
        longitude__gte: Option<&str>,
        longitude__gt: Option<&str>,
        contact_name__n: Option<&str>,
        contact_name__ic: Option<&str>,
        contact_name__nic: Option<&str>,
        contact_name__iew: Option<&str>,
        contact_name__niew: Option<&str>,
        contact_name__isw: Option<&str>,
        contact_name__nisw: Option<&str>,
        contact_name__ie: Option<&str>,
        contact_name__nie: Option<&str>,
        contact_phone__n: Option<&str>,
        contact_phone__ic: Option<&str>,
        contact_phone__nic: Option<&str>,
        contact_phone__iew: Option<&str>,
        contact_phone__niew: Option<&str>,
        contact_phone__isw: Option<&str>,
        contact_phone__nisw: Option<&str>,
        contact_phone__ie: Option<&str>,
        contact_phone__nie: Option<&str>,
        contact_email__n: Option<&str>,
        contact_email__ic: Option<&str>,
        contact_email__nic: Option<&str>,
        contact_email__iew: Option<&str>,
        contact_email__niew: Option<&str>,
        contact_email__isw: Option<&str>,
        contact_email__nisw: Option<&str>,
        contact_email__ie: Option<&str>,
        contact_email__nie: Option<&str>,
        tenant_group_id__n: Option<&str>,
        tenant_group__n: Option<&str>,
        tenant_id__n: Option<&str>,
        tenant__n: Option<&str>,
        status__n: Option<&str>,
        region_id__n: Option<&str>,
        region__n: Option<&str>,
        tag__n: Option<&str>,
        limit: Option<i32>,
        offset: Option<i32>,
    ) -> Result<crate::models::InlineResponse20035, Error>;
    fn dcim_sites_partial_update(
        &self,
        id: i32,
        data: crate::models::WritableSite,
    ) -> Result<crate::models::Site, Error>;
    fn dcim_sites_read(&self, id: i32) -> Result<crate::models::Site, Error>;
    fn dcim_sites_update(
        &self,
        id: i32,
        data: crate::models::WritableSite,
    ) -> Result<crate::models::Site, Error>;
    fn dcim_virtual_chassis_create(
        &self,
        data: crate::models::WritableVirtualChassis,
    ) -> Result<crate::models::VirtualChassis, Error>;
    fn dcim_virtual_chassis_delete(&self, id: i32) -> Result<(), Error>;
    fn dcim_virtual_chassis_list(
        &self,
        id: Option<&str>,
        domain: Option<&str>,
        q: Option<&str>,
        region_id: Option<&str>,
        region: Option<&str>,
        site_id: Option<&str>,
        site: Option<&str>,
        tenant_id: Option<&str>,
        tenant: Option<&str>,
        tag: Option<&str>,
        id__n: Option<&str>,
        id__lte: Option<&str>,
        id__lt: Option<&str>,
        id__gte: Option<&str>,
        id__gt: Option<&str>,
        domain__n: Option<&str>,
        domain__ic: Option<&str>,
        domain__nic: Option<&str>,
        domain__iew: Option<&str>,
        domain__niew: Option<&str>,
        domain__isw: Option<&str>,
        domain__nisw: Option<&str>,
        domain__ie: Option<&str>,
        domain__nie: Option<&str>,
        region_id__n: Option<&str>,
        region__n: Option<&str>,
        site_id__n: Option<&str>,
        site__n: Option<&str>,
        tenant_id__n: Option<&str>,
        tenant__n: Option<&str>,
        tag__n: Option<&str>,
        limit: Option<i32>,
        offset: Option<i32>,
    ) -> Result<crate::models::InlineResponse20036, Error>;
    fn dcim_virtual_chassis_partial_update(
        &self,
        id: i32,
        data: crate::models::WritableVirtualChassis,
    ) -> Result<crate::models::VirtualChassis, Error>;
    fn dcim_virtual_chassis_read(&self, id: i32) -> Result<crate::models::VirtualChassis, Error>;
    fn dcim_virtual_chassis_update(
        &self,
        id: i32,
        data: crate::models::WritableVirtualChassis,
    ) -> Result<crate::models::VirtualChassis, Error>;
}

impl DcimApi for DcimApiClient {
    fn dcim_cables_create(
        &self,
        data: crate::models::WritableCable,
    ) -> Result<crate::models::Cable, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/dcim/cables/", configuration.base_path);
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_cables_delete(&self, id: i32) -> Result<(), Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/dcim/cables/{id}/", configuration.base_path, id = id);
        let mut req_builder = client.delete(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        client.execute(req)?.error_for_status()?;
        Ok(())
    }

    fn dcim_cables_list(
        &self,
        id: Option<&str>,
        label: Option<&str>,
        length: Option<&str>,
        length_unit: Option<&str>,
        q: Option<&str>,
        _type: Option<&str>,
        status: Option<&str>,
        color: Option<&str>,
        device_id: Option<&str>,
        device: Option<&str>,
        rack_id: Option<&str>,
        rack: Option<&str>,
        site_id: Option<&str>,
        site: Option<&str>,
        tenant_id: Option<&str>,
        tenant: Option<&str>,
        id__n: Option<&str>,
        id__lte: Option<&str>,
        id__lt: Option<&str>,
        id__gte: Option<&str>,
        id__gt: Option<&str>,
        label__n: Option<&str>,
        label__ic: Option<&str>,
        label__nic: Option<&str>,
        label__iew: Option<&str>,
        label__niew: Option<&str>,
        label__isw: Option<&str>,
        label__nisw: Option<&str>,
        label__ie: Option<&str>,
        label__nie: Option<&str>,
        length__n: Option<&str>,
        length__lte: Option<&str>,
        length__lt: Option<&str>,
        length__gte: Option<&str>,
        length__gt: Option<&str>,
        length_unit__n: Option<&str>,
        type__n: Option<&str>,
        status__n: Option<&str>,
        color__n: Option<&str>,
        limit: Option<i32>,
        offset: Option<i32>,
    ) -> Result<crate::models::InlineResponse2004, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/dcim/cables/", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = id {
            req_builder = req_builder.query(&[("id", &s.to_string())]);
        }
        if let Some(ref s) = label {
            req_builder = req_builder.query(&[("label", &s.to_string())]);
        }
        if let Some(ref s) = length {
            req_builder = req_builder.query(&[("length", &s.to_string())]);
        }
        if let Some(ref s) = length_unit {
            req_builder = req_builder.query(&[("length_unit", &s.to_string())]);
        }
        if let Some(ref s) = q {
            req_builder = req_builder.query(&[("q", &s.to_string())]);
        }
        if let Some(ref s) = _type {
            req_builder = req_builder.query(&[("type", &s.to_string())]);
        }
        if let Some(ref s) = status {
            req_builder = req_builder.query(&[("status", &s.to_string())]);
        }
        if let Some(ref s) = color {
            req_builder = req_builder.query(&[("color", &s.to_string())]);
        }
        if let Some(ref s) = device_id {
            req_builder = req_builder.query(&[("device_id", &s.to_string())]);
        }
        if let Some(ref s) = device {
            req_builder = req_builder.query(&[("device", &s.to_string())]);
        }
        if let Some(ref s) = rack_id {
            req_builder = req_builder.query(&[("rack_id", &s.to_string())]);
        }
        if let Some(ref s) = rack {
            req_builder = req_builder.query(&[("rack", &s.to_string())]);
        }
        if let Some(ref s) = site_id {
            req_builder = req_builder.query(&[("site_id", &s.to_string())]);
        }
        if let Some(ref s) = site {
            req_builder = req_builder.query(&[("site", &s.to_string())]);
        }
        if let Some(ref s) = tenant_id {
            req_builder = req_builder.query(&[("tenant_id", &s.to_string())]);
        }
        if let Some(ref s) = tenant {
            req_builder = req_builder.query(&[("tenant", &s.to_string())]);
        }
        if let Some(ref s) = id__n {
            req_builder = req_builder.query(&[("id__n", &s.to_string())]);
        }
        if let Some(ref s) = id__lte {
            req_builder = req_builder.query(&[("id__lte", &s.to_string())]);
        }
        if let Some(ref s) = id__lt {
            req_builder = req_builder.query(&[("id__lt", &s.to_string())]);
        }
        if let Some(ref s) = id__gte {
            req_builder = req_builder.query(&[("id__gte", &s.to_string())]);
        }
        if let Some(ref s) = id__gt {
            req_builder = req_builder.query(&[("id__gt", &s.to_string())]);
        }
        if let Some(ref s) = label__n {
            req_builder = req_builder.query(&[("label__n", &s.to_string())]);
        }
        if let Some(ref s) = label__ic {
            req_builder = req_builder.query(&[("label__ic", &s.to_string())]);
        }
        if let Some(ref s) = label__nic {
            req_builder = req_builder.query(&[("label__nic", &s.to_string())]);
        }
        if let Some(ref s) = label__iew {
            req_builder = req_builder.query(&[("label__iew", &s.to_string())]);
        }
        if let Some(ref s) = label__niew {
            req_builder = req_builder.query(&[("label__niew", &s.to_string())]);
        }
        if let Some(ref s) = label__isw {
            req_builder = req_builder.query(&[("label__isw", &s.to_string())]);
        }
        if let Some(ref s) = label__nisw {
            req_builder = req_builder.query(&[("label__nisw", &s.to_string())]);
        }
        if let Some(ref s) = label__ie {
            req_builder = req_builder.query(&[("label__ie", &s.to_string())]);
        }
        if let Some(ref s) = label__nie {
            req_builder = req_builder.query(&[("label__nie", &s.to_string())]);
        }
        if let Some(ref s) = length__n {
            req_builder = req_builder.query(&[("length__n", &s.to_string())]);
        }
        if let Some(ref s) = length__lte {
            req_builder = req_builder.query(&[("length__lte", &s.to_string())]);
        }
        if let Some(ref s) = length__lt {
            req_builder = req_builder.query(&[("length__lt", &s.to_string())]);
        }
        if let Some(ref s) = length__gte {
            req_builder = req_builder.query(&[("length__gte", &s.to_string())]);
        }
        if let Some(ref s) = length__gt {
            req_builder = req_builder.query(&[("length__gt", &s.to_string())]);
        }
        if let Some(ref s) = length_unit__n {
            req_builder = req_builder.query(&[("length_unit__n", &s.to_string())]);
        }
        if let Some(ref s) = type__n {
            req_builder = req_builder.query(&[("type__n", &s.to_string())]);
        }
        if let Some(ref s) = status__n {
            req_builder = req_builder.query(&[("status__n", &s.to_string())]);
        }
        if let Some(ref s) = color__n {
            req_builder = req_builder.query(&[("color__n", &s.to_string())]);
        }
        if let Some(ref s) = limit {
            req_builder = req_builder.query(&[("limit", &s.to_string())]);
        }
        if let Some(ref s) = offset {
            req_builder = req_builder.query(&[("offset", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_cables_partial_update(
        &self,
        id: i32,
        data: crate::models::WritableCable,
    ) -> Result<crate::models::Cable, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/dcim/cables/{id}/", configuration.base_path, id = id);
        let mut req_builder = client.patch(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_cables_read(&self, id: i32) -> Result<crate::models::Cable, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/dcim/cables/{id}/", configuration.base_path, id = id);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_cables_update(
        &self,
        id: i32,
        data: crate::models::WritableCable,
    ) -> Result<crate::models::Cable, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/dcim/cables/{id}/", configuration.base_path, id = id);
        let mut req_builder = client.put(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_choices_list(&self) -> Result<(), Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/dcim/_choices/", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        client.execute(req)?.error_for_status()?;
        Ok(())
    }

    fn dcim_choices_read(&self, id: &str) -> Result<(), Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/dcim/_choices/{id}/",
            configuration.base_path,
            id = crate::apis::urlencode(id)
        );
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        client.execute(req)?.error_for_status()?;
        Ok(())
    }

    fn dcim_connected_device_list(
        &self,
        peer_device: &str,
        peer_interface: &str,
    ) -> Result<crate::models::Device, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/dcim/connected-device/", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        req_builder = req_builder.query(&[("peer_device", &peer_device.to_string())]);
        req_builder = req_builder.query(&[("peer_interface", &peer_interface.to_string())]);
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_console_connections_list(
        &self,
        name: Option<&str>,
        connection_status: Option<&str>,
        site: Option<&str>,
        device_id: Option<&str>,
        device: Option<&str>,
        name__n: Option<&str>,
        name__ic: Option<&str>,
        name__nic: Option<&str>,
        name__iew: Option<&str>,
        name__niew: Option<&str>,
        name__isw: Option<&str>,
        name__nisw: Option<&str>,
        name__ie: Option<&str>,
        name__nie: Option<&str>,
        connection_status__n: Option<&str>,
        limit: Option<i32>,
        offset: Option<i32>,
    ) -> Result<crate::models::InlineResponse2005, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/dcim/console-connections/", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = name {
            req_builder = req_builder.query(&[("name", &s.to_string())]);
        }
        if let Some(ref s) = connection_status {
            req_builder = req_builder.query(&[("connection_status", &s.to_string())]);
        }
        if let Some(ref s) = site {
            req_builder = req_builder.query(&[("site", &s.to_string())]);
        }
        if let Some(ref s) = device_id {
            req_builder = req_builder.query(&[("device_id", &s.to_string())]);
        }
        if let Some(ref s) = device {
            req_builder = req_builder.query(&[("device", &s.to_string())]);
        }
        if let Some(ref s) = name__n {
            req_builder = req_builder.query(&[("name__n", &s.to_string())]);
        }
        if let Some(ref s) = name__ic {
            req_builder = req_builder.query(&[("name__ic", &s.to_string())]);
        }
        if let Some(ref s) = name__nic {
            req_builder = req_builder.query(&[("name__nic", &s.to_string())]);
        }
        if let Some(ref s) = name__iew {
            req_builder = req_builder.query(&[("name__iew", &s.to_string())]);
        }
        if let Some(ref s) = name__niew {
            req_builder = req_builder.query(&[("name__niew", &s.to_string())]);
        }
        if let Some(ref s) = name__isw {
            req_builder = req_builder.query(&[("name__isw", &s.to_string())]);
        }
        if let Some(ref s) = name__nisw {
            req_builder = req_builder.query(&[("name__nisw", &s.to_string())]);
        }
        if let Some(ref s) = name__ie {
            req_builder = req_builder.query(&[("name__ie", &s.to_string())]);
        }
        if let Some(ref s) = name__nie {
            req_builder = req_builder.query(&[("name__nie", &s.to_string())]);
        }
        if let Some(ref s) = connection_status__n {
            req_builder = req_builder.query(&[("connection_status__n", &s.to_string())]);
        }
        if let Some(ref s) = limit {
            req_builder = req_builder.query(&[("limit", &s.to_string())]);
        }
        if let Some(ref s) = offset {
            req_builder = req_builder.query(&[("offset", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_console_port_templates_create(
        &self,
        data: crate::models::WritableConsolePortTemplate,
    ) -> Result<crate::models::ConsolePortTemplate, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/dcim/console-port-templates/", configuration.base_path);
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_console_port_templates_delete(&self, id: i32) -> Result<(), Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/dcim/console-port-templates/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.delete(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        client.execute(req)?.error_for_status()?;
        Ok(())
    }

    fn dcim_console_port_templates_list(
        &self,
        id: Option<&str>,
        name: Option<&str>,
        _type: Option<&str>,
        q: Option<&str>,
        devicetype_id: Option<&str>,
        id__n: Option<&str>,
        id__lte: Option<&str>,
        id__lt: Option<&str>,
        id__gte: Option<&str>,
        id__gt: Option<&str>,
        name__n: Option<&str>,
        name__ic: Option<&str>,
        name__nic: Option<&str>,
        name__iew: Option<&str>,
        name__niew: Option<&str>,
        name__isw: Option<&str>,
        name__nisw: Option<&str>,
        name__ie: Option<&str>,
        name__nie: Option<&str>,
        type__n: Option<&str>,
        devicetype_id__n: Option<&str>,
        limit: Option<i32>,
        offset: Option<i32>,
    ) -> Result<crate::models::InlineResponse2006, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/dcim/console-port-templates/", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = id {
            req_builder = req_builder.query(&[("id", &s.to_string())]);
        }
        if let Some(ref s) = name {
            req_builder = req_builder.query(&[("name", &s.to_string())]);
        }
        if let Some(ref s) = _type {
            req_builder = req_builder.query(&[("type", &s.to_string())]);
        }
        if let Some(ref s) = q {
            req_builder = req_builder.query(&[("q", &s.to_string())]);
        }
        if let Some(ref s) = devicetype_id {
            req_builder = req_builder.query(&[("devicetype_id", &s.to_string())]);
        }
        if let Some(ref s) = id__n {
            req_builder = req_builder.query(&[("id__n", &s.to_string())]);
        }
        if let Some(ref s) = id__lte {
            req_builder = req_builder.query(&[("id__lte", &s.to_string())]);
        }
        if let Some(ref s) = id__lt {
            req_builder = req_builder.query(&[("id__lt", &s.to_string())]);
        }
        if let Some(ref s) = id__gte {
            req_builder = req_builder.query(&[("id__gte", &s.to_string())]);
        }
        if let Some(ref s) = id__gt {
            req_builder = req_builder.query(&[("id__gt", &s.to_string())]);
        }
        if let Some(ref s) = name__n {
            req_builder = req_builder.query(&[("name__n", &s.to_string())]);
        }
        if let Some(ref s) = name__ic {
            req_builder = req_builder.query(&[("name__ic", &s.to_string())]);
        }
        if let Some(ref s) = name__nic {
            req_builder = req_builder.query(&[("name__nic", &s.to_string())]);
        }
        if let Some(ref s) = name__iew {
            req_builder = req_builder.query(&[("name__iew", &s.to_string())]);
        }
        if let Some(ref s) = name__niew {
            req_builder = req_builder.query(&[("name__niew", &s.to_string())]);
        }
        if let Some(ref s) = name__isw {
            req_builder = req_builder.query(&[("name__isw", &s.to_string())]);
        }
        if let Some(ref s) = name__nisw {
            req_builder = req_builder.query(&[("name__nisw", &s.to_string())]);
        }
        if let Some(ref s) = name__ie {
            req_builder = req_builder.query(&[("name__ie", &s.to_string())]);
        }
        if let Some(ref s) = name__nie {
            req_builder = req_builder.query(&[("name__nie", &s.to_string())]);
        }
        if let Some(ref s) = type__n {
            req_builder = req_builder.query(&[("type__n", &s.to_string())]);
        }
        if let Some(ref s) = devicetype_id__n {
            req_builder = req_builder.query(&[("devicetype_id__n", &s.to_string())]);
        }
        if let Some(ref s) = limit {
            req_builder = req_builder.query(&[("limit", &s.to_string())]);
        }
        if let Some(ref s) = offset {
            req_builder = req_builder.query(&[("offset", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_console_port_templates_partial_update(
        &self,
        id: i32,
        data: crate::models::WritableConsolePortTemplate,
    ) -> Result<crate::models::ConsolePortTemplate, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/dcim/console-port-templates/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.patch(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_console_port_templates_read(
        &self,
        id: i32,
    ) -> Result<crate::models::ConsolePortTemplate, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/dcim/console-port-templates/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_console_port_templates_update(
        &self,
        id: i32,
        data: crate::models::WritableConsolePortTemplate,
    ) -> Result<crate::models::ConsolePortTemplate, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/dcim/console-port-templates/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.put(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_console_ports_create(
        &self,
        data: crate::models::WritableConsolePort,
    ) -> Result<crate::models::ConsolePort, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/dcim/console-ports/", configuration.base_path);
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_console_ports_delete(&self, id: i32) -> Result<(), Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/dcim/console-ports/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.delete(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        client.execute(req)?.error_for_status()?;
        Ok(())
    }

    fn dcim_console_ports_list(
        &self,
        id: Option<&str>,
        name: Option<&str>,
        description: Option<&str>,
        connection_status: Option<&str>,
        q: Option<&str>,
        region_id: Option<&str>,
        region: Option<&str>,
        site_id: Option<&str>,
        site: Option<&str>,
        device_id: Option<&str>,
        device: Option<&str>,
        tag: Option<&str>,
        _type: Option<&str>,
        cabled: Option<&str>,
        id__n: Option<&str>,
        id__lte: Option<&str>,
        id__lt: Option<&str>,
        id__gte: Option<&str>,
        id__gt: Option<&str>,
        name__n: Option<&str>,
        name__ic: Option<&str>,
        name__nic: Option<&str>,
        name__iew: Option<&str>,
        name__niew: Option<&str>,
        name__isw: Option<&str>,
        name__nisw: Option<&str>,
        name__ie: Option<&str>,
        name__nie: Option<&str>,
        description__n: Option<&str>,
        description__ic: Option<&str>,
        description__nic: Option<&str>,
        description__iew: Option<&str>,
        description__niew: Option<&str>,
        description__isw: Option<&str>,
        description__nisw: Option<&str>,
        description__ie: Option<&str>,
        description__nie: Option<&str>,
        connection_status__n: Option<&str>,
        region_id__n: Option<&str>,
        region__n: Option<&str>,
        site_id__n: Option<&str>,
        site__n: Option<&str>,
        device_id__n: Option<&str>,
        device__n: Option<&str>,
        tag__n: Option<&str>,
        type__n: Option<&str>,
        limit: Option<i32>,
        offset: Option<i32>,
    ) -> Result<crate::models::InlineResponse2005, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/dcim/console-ports/", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = id {
            req_builder = req_builder.query(&[("id", &s.to_string())]);
        }
        if let Some(ref s) = name {
            req_builder = req_builder.query(&[("name", &s.to_string())]);
        }
        if let Some(ref s) = description {
            req_builder = req_builder.query(&[("description", &s.to_string())]);
        }
        if let Some(ref s) = connection_status {
            req_builder = req_builder.query(&[("connection_status", &s.to_string())]);
        }
        if let Some(ref s) = q {
            req_builder = req_builder.query(&[("q", &s.to_string())]);
        }
        if let Some(ref s) = region_id {
            req_builder = req_builder.query(&[("region_id", &s.to_string())]);
        }
        if let Some(ref s) = region {
            req_builder = req_builder.query(&[("region", &s.to_string())]);
        }
        if let Some(ref s) = site_id {
            req_builder = req_builder.query(&[("site_id", &s.to_string())]);
        }
        if let Some(ref s) = site {
            req_builder = req_builder.query(&[("site", &s.to_string())]);
        }
        if let Some(ref s) = device_id {
            req_builder = req_builder.query(&[("device_id", &s.to_string())]);
        }
        if let Some(ref s) = device {
            req_builder = req_builder.query(&[("device", &s.to_string())]);
        }
        if let Some(ref s) = tag {
            req_builder = req_builder.query(&[("tag", &s.to_string())]);
        }
        if let Some(ref s) = _type {
            req_builder = req_builder.query(&[("type", &s.to_string())]);
        }
        if let Some(ref s) = cabled {
            req_builder = req_builder.query(&[("cabled", &s.to_string())]);
        }
        if let Some(ref s) = id__n {
            req_builder = req_builder.query(&[("id__n", &s.to_string())]);
        }
        if let Some(ref s) = id__lte {
            req_builder = req_builder.query(&[("id__lte", &s.to_string())]);
        }
        if let Some(ref s) = id__lt {
            req_builder = req_builder.query(&[("id__lt", &s.to_string())]);
        }
        if let Some(ref s) = id__gte {
            req_builder = req_builder.query(&[("id__gte", &s.to_string())]);
        }
        if let Some(ref s) = id__gt {
            req_builder = req_builder.query(&[("id__gt", &s.to_string())]);
        }
        if let Some(ref s) = name__n {
            req_builder = req_builder.query(&[("name__n", &s.to_string())]);
        }
        if let Some(ref s) = name__ic {
            req_builder = req_builder.query(&[("name__ic", &s.to_string())]);
        }
        if let Some(ref s) = name__nic {
            req_builder = req_builder.query(&[("name__nic", &s.to_string())]);
        }
        if let Some(ref s) = name__iew {
            req_builder = req_builder.query(&[("name__iew", &s.to_string())]);
        }
        if let Some(ref s) = name__niew {
            req_builder = req_builder.query(&[("name__niew", &s.to_string())]);
        }
        if let Some(ref s) = name__isw {
            req_builder = req_builder.query(&[("name__isw", &s.to_string())]);
        }
        if let Some(ref s) = name__nisw {
            req_builder = req_builder.query(&[("name__nisw", &s.to_string())]);
        }
        if let Some(ref s) = name__ie {
            req_builder = req_builder.query(&[("name__ie", &s.to_string())]);
        }
        if let Some(ref s) = name__nie {
            req_builder = req_builder.query(&[("name__nie", &s.to_string())]);
        }
        if let Some(ref s) = description__n {
            req_builder = req_builder.query(&[("description__n", &s.to_string())]);
        }
        if let Some(ref s) = description__ic {
            req_builder = req_builder.query(&[("description__ic", &s.to_string())]);
        }
        if let Some(ref s) = description__nic {
            req_builder = req_builder.query(&[("description__nic", &s.to_string())]);
        }
        if let Some(ref s) = description__iew {
            req_builder = req_builder.query(&[("description__iew", &s.to_string())]);
        }
        if let Some(ref s) = description__niew {
            req_builder = req_builder.query(&[("description__niew", &s.to_string())]);
        }
        if let Some(ref s) = description__isw {
            req_builder = req_builder.query(&[("description__isw", &s.to_string())]);
        }
        if let Some(ref s) = description__nisw {
            req_builder = req_builder.query(&[("description__nisw", &s.to_string())]);
        }
        if let Some(ref s) = description__ie {
            req_builder = req_builder.query(&[("description__ie", &s.to_string())]);
        }
        if let Some(ref s) = description__nie {
            req_builder = req_builder.query(&[("description__nie", &s.to_string())]);
        }
        if let Some(ref s) = connection_status__n {
            req_builder = req_builder.query(&[("connection_status__n", &s.to_string())]);
        }
        if let Some(ref s) = region_id__n {
            req_builder = req_builder.query(&[("region_id__n", &s.to_string())]);
        }
        if let Some(ref s) = region__n {
            req_builder = req_builder.query(&[("region__n", &s.to_string())]);
        }
        if let Some(ref s) = site_id__n {
            req_builder = req_builder.query(&[("site_id__n", &s.to_string())]);
        }
        if let Some(ref s) = site__n {
            req_builder = req_builder.query(&[("site__n", &s.to_string())]);
        }
        if let Some(ref s) = device_id__n {
            req_builder = req_builder.query(&[("device_id__n", &s.to_string())]);
        }
        if let Some(ref s) = device__n {
            req_builder = req_builder.query(&[("device__n", &s.to_string())]);
        }
        if let Some(ref s) = tag__n {
            req_builder = req_builder.query(&[("tag__n", &s.to_string())]);
        }
        if let Some(ref s) = type__n {
            req_builder = req_builder.query(&[("type__n", &s.to_string())]);
        }
        if let Some(ref s) = limit {
            req_builder = req_builder.query(&[("limit", &s.to_string())]);
        }
        if let Some(ref s) = offset {
            req_builder = req_builder.query(&[("offset", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_console_ports_partial_update(
        &self,
        id: i32,
        data: crate::models::WritableConsolePort,
    ) -> Result<crate::models::ConsolePort, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/dcim/console-ports/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.patch(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_console_ports_read(&self, id: i32) -> Result<crate::models::ConsolePort, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/dcim/console-ports/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_console_ports_trace(&self, id: i32) -> Result<crate::models::ConsolePort, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/dcim/console-ports/{id}/trace/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_console_ports_update(
        &self,
        id: i32,
        data: crate::models::WritableConsolePort,
    ) -> Result<crate::models::ConsolePort, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/dcim/console-ports/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.put(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_console_server_port_templates_create(
        &self,
        data: crate::models::WritableConsoleServerPortTemplate,
    ) -> Result<crate::models::ConsoleServerPortTemplate, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/dcim/console-server-port-templates/",
            configuration.base_path
        );
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_console_server_port_templates_delete(&self, id: i32) -> Result<(), Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/dcim/console-server-port-templates/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.delete(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        client.execute(req)?.error_for_status()?;
        Ok(())
    }

    fn dcim_console_server_port_templates_list(
        &self,
        id: Option<&str>,
        name: Option<&str>,
        _type: Option<&str>,
        q: Option<&str>,
        devicetype_id: Option<&str>,
        id__n: Option<&str>,
        id__lte: Option<&str>,
        id__lt: Option<&str>,
        id__gte: Option<&str>,
        id__gt: Option<&str>,
        name__n: Option<&str>,
        name__ic: Option<&str>,
        name__nic: Option<&str>,
        name__iew: Option<&str>,
        name__niew: Option<&str>,
        name__isw: Option<&str>,
        name__nisw: Option<&str>,
        name__ie: Option<&str>,
        name__nie: Option<&str>,
        type__n: Option<&str>,
        devicetype_id__n: Option<&str>,
        limit: Option<i32>,
        offset: Option<i32>,
    ) -> Result<crate::models::InlineResponse2007, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/dcim/console-server-port-templates/",
            configuration.base_path
        );
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = id {
            req_builder = req_builder.query(&[("id", &s.to_string())]);
        }
        if let Some(ref s) = name {
            req_builder = req_builder.query(&[("name", &s.to_string())]);
        }
        if let Some(ref s) = _type {
            req_builder = req_builder.query(&[("type", &s.to_string())]);
        }
        if let Some(ref s) = q {
            req_builder = req_builder.query(&[("q", &s.to_string())]);
        }
        if let Some(ref s) = devicetype_id {
            req_builder = req_builder.query(&[("devicetype_id", &s.to_string())]);
        }
        if let Some(ref s) = id__n {
            req_builder = req_builder.query(&[("id__n", &s.to_string())]);
        }
        if let Some(ref s) = id__lte {
            req_builder = req_builder.query(&[("id__lte", &s.to_string())]);
        }
        if let Some(ref s) = id__lt {
            req_builder = req_builder.query(&[("id__lt", &s.to_string())]);
        }
        if let Some(ref s) = id__gte {
            req_builder = req_builder.query(&[("id__gte", &s.to_string())]);
        }
        if let Some(ref s) = id__gt {
            req_builder = req_builder.query(&[("id__gt", &s.to_string())]);
        }
        if let Some(ref s) = name__n {
            req_builder = req_builder.query(&[("name__n", &s.to_string())]);
        }
        if let Some(ref s) = name__ic {
            req_builder = req_builder.query(&[("name__ic", &s.to_string())]);
        }
        if let Some(ref s) = name__nic {
            req_builder = req_builder.query(&[("name__nic", &s.to_string())]);
        }
        if let Some(ref s) = name__iew {
            req_builder = req_builder.query(&[("name__iew", &s.to_string())]);
        }
        if let Some(ref s) = name__niew {
            req_builder = req_builder.query(&[("name__niew", &s.to_string())]);
        }
        if let Some(ref s) = name__isw {
            req_builder = req_builder.query(&[("name__isw", &s.to_string())]);
        }
        if let Some(ref s) = name__nisw {
            req_builder = req_builder.query(&[("name__nisw", &s.to_string())]);
        }
        if let Some(ref s) = name__ie {
            req_builder = req_builder.query(&[("name__ie", &s.to_string())]);
        }
        if let Some(ref s) = name__nie {
            req_builder = req_builder.query(&[("name__nie", &s.to_string())]);
        }
        if let Some(ref s) = type__n {
            req_builder = req_builder.query(&[("type__n", &s.to_string())]);
        }
        if let Some(ref s) = devicetype_id__n {
            req_builder = req_builder.query(&[("devicetype_id__n", &s.to_string())]);
        }
        if let Some(ref s) = limit {
            req_builder = req_builder.query(&[("limit", &s.to_string())]);
        }
        if let Some(ref s) = offset {
            req_builder = req_builder.query(&[("offset", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_console_server_port_templates_partial_update(
        &self,
        id: i32,
        data: crate::models::WritableConsoleServerPortTemplate,
    ) -> Result<crate::models::ConsoleServerPortTemplate, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/dcim/console-server-port-templates/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.patch(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_console_server_port_templates_read(
        &self,
        id: i32,
    ) -> Result<crate::models::ConsoleServerPortTemplate, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/dcim/console-server-port-templates/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_console_server_port_templates_update(
        &self,
        id: i32,
        data: crate::models::WritableConsoleServerPortTemplate,
    ) -> Result<crate::models::ConsoleServerPortTemplate, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/dcim/console-server-port-templates/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.put(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_console_server_ports_create(
        &self,
        data: crate::models::WritableConsoleServerPort,
    ) -> Result<crate::models::ConsoleServerPort, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/dcim/console-server-ports/", configuration.base_path);
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_console_server_ports_delete(&self, id: i32) -> Result<(), Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/dcim/console-server-ports/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.delete(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        client.execute(req)?.error_for_status()?;
        Ok(())
    }

    fn dcim_console_server_ports_list(
        &self,
        id: Option<&str>,
        name: Option<&str>,
        description: Option<&str>,
        connection_status: Option<&str>,
        q: Option<&str>,
        region_id: Option<&str>,
        region: Option<&str>,
        site_id: Option<&str>,
        site: Option<&str>,
        device_id: Option<&str>,
        device: Option<&str>,
        tag: Option<&str>,
        _type: Option<&str>,
        cabled: Option<&str>,
        id__n: Option<&str>,
        id__lte: Option<&str>,
        id__lt: Option<&str>,
        id__gte: Option<&str>,
        id__gt: Option<&str>,
        name__n: Option<&str>,
        name__ic: Option<&str>,
        name__nic: Option<&str>,
        name__iew: Option<&str>,
        name__niew: Option<&str>,
        name__isw: Option<&str>,
        name__nisw: Option<&str>,
        name__ie: Option<&str>,
        name__nie: Option<&str>,
        description__n: Option<&str>,
        description__ic: Option<&str>,
        description__nic: Option<&str>,
        description__iew: Option<&str>,
        description__niew: Option<&str>,
        description__isw: Option<&str>,
        description__nisw: Option<&str>,
        description__ie: Option<&str>,
        description__nie: Option<&str>,
        connection_status__n: Option<&str>,
        region_id__n: Option<&str>,
        region__n: Option<&str>,
        site_id__n: Option<&str>,
        site__n: Option<&str>,
        device_id__n: Option<&str>,
        device__n: Option<&str>,
        tag__n: Option<&str>,
        type__n: Option<&str>,
        limit: Option<i32>,
        offset: Option<i32>,
    ) -> Result<crate::models::InlineResponse2008, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/dcim/console-server-ports/", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = id {
            req_builder = req_builder.query(&[("id", &s.to_string())]);
        }
        if let Some(ref s) = name {
            req_builder = req_builder.query(&[("name", &s.to_string())]);
        }
        if let Some(ref s) = description {
            req_builder = req_builder.query(&[("description", &s.to_string())]);
        }
        if let Some(ref s) = connection_status {
            req_builder = req_builder.query(&[("connection_status", &s.to_string())]);
        }
        if let Some(ref s) = q {
            req_builder = req_builder.query(&[("q", &s.to_string())]);
        }
        if let Some(ref s) = region_id {
            req_builder = req_builder.query(&[("region_id", &s.to_string())]);
        }
        if let Some(ref s) = region {
            req_builder = req_builder.query(&[("region", &s.to_string())]);
        }
        if let Some(ref s) = site_id {
            req_builder = req_builder.query(&[("site_id", &s.to_string())]);
        }
        if let Some(ref s) = site {
            req_builder = req_builder.query(&[("site", &s.to_string())]);
        }
        if let Some(ref s) = device_id {
            req_builder = req_builder.query(&[("device_id", &s.to_string())]);
        }
        if let Some(ref s) = device {
            req_builder = req_builder.query(&[("device", &s.to_string())]);
        }
        if let Some(ref s) = tag {
            req_builder = req_builder.query(&[("tag", &s.to_string())]);
        }
        if let Some(ref s) = _type {
            req_builder = req_builder.query(&[("type", &s.to_string())]);
        }
        if let Some(ref s) = cabled {
            req_builder = req_builder.query(&[("cabled", &s.to_string())]);
        }
        if let Some(ref s) = id__n {
            req_builder = req_builder.query(&[("id__n", &s.to_string())]);
        }
        if let Some(ref s) = id__lte {
            req_builder = req_builder.query(&[("id__lte", &s.to_string())]);
        }
        if let Some(ref s) = id__lt {
            req_builder = req_builder.query(&[("id__lt", &s.to_string())]);
        }
        if let Some(ref s) = id__gte {
            req_builder = req_builder.query(&[("id__gte", &s.to_string())]);
        }
        if let Some(ref s) = id__gt {
            req_builder = req_builder.query(&[("id__gt", &s.to_string())]);
        }
        if let Some(ref s) = name__n {
            req_builder = req_builder.query(&[("name__n", &s.to_string())]);
        }
        if let Some(ref s) = name__ic {
            req_builder = req_builder.query(&[("name__ic", &s.to_string())]);
        }
        if let Some(ref s) = name__nic {
            req_builder = req_builder.query(&[("name__nic", &s.to_string())]);
        }
        if let Some(ref s) = name__iew {
            req_builder = req_builder.query(&[("name__iew", &s.to_string())]);
        }
        if let Some(ref s) = name__niew {
            req_builder = req_builder.query(&[("name__niew", &s.to_string())]);
        }
        if let Some(ref s) = name__isw {
            req_builder = req_builder.query(&[("name__isw", &s.to_string())]);
        }
        if let Some(ref s) = name__nisw {
            req_builder = req_builder.query(&[("name__nisw", &s.to_string())]);
        }
        if let Some(ref s) = name__ie {
            req_builder = req_builder.query(&[("name__ie", &s.to_string())]);
        }
        if let Some(ref s) = name__nie {
            req_builder = req_builder.query(&[("name__nie", &s.to_string())]);
        }
        if let Some(ref s) = description__n {
            req_builder = req_builder.query(&[("description__n", &s.to_string())]);
        }
        if let Some(ref s) = description__ic {
            req_builder = req_builder.query(&[("description__ic", &s.to_string())]);
        }
        if let Some(ref s) = description__nic {
            req_builder = req_builder.query(&[("description__nic", &s.to_string())]);
        }
        if let Some(ref s) = description__iew {
            req_builder = req_builder.query(&[("description__iew", &s.to_string())]);
        }
        if let Some(ref s) = description__niew {
            req_builder = req_builder.query(&[("description__niew", &s.to_string())]);
        }
        if let Some(ref s) = description__isw {
            req_builder = req_builder.query(&[("description__isw", &s.to_string())]);
        }
        if let Some(ref s) = description__nisw {
            req_builder = req_builder.query(&[("description__nisw", &s.to_string())]);
        }
        if let Some(ref s) = description__ie {
            req_builder = req_builder.query(&[("description__ie", &s.to_string())]);
        }
        if let Some(ref s) = description__nie {
            req_builder = req_builder.query(&[("description__nie", &s.to_string())]);
        }
        if let Some(ref s) = connection_status__n {
            req_builder = req_builder.query(&[("connection_status__n", &s.to_string())]);
        }
        if let Some(ref s) = region_id__n {
            req_builder = req_builder.query(&[("region_id__n", &s.to_string())]);
        }
        if let Some(ref s) = region__n {
            req_builder = req_builder.query(&[("region__n", &s.to_string())]);
        }
        if let Some(ref s) = site_id__n {
            req_builder = req_builder.query(&[("site_id__n", &s.to_string())]);
        }
        if let Some(ref s) = site__n {
            req_builder = req_builder.query(&[("site__n", &s.to_string())]);
        }
        if let Some(ref s) = device_id__n {
            req_builder = req_builder.query(&[("device_id__n", &s.to_string())]);
        }
        if let Some(ref s) = device__n {
            req_builder = req_builder.query(&[("device__n", &s.to_string())]);
        }
        if let Some(ref s) = tag__n {
            req_builder = req_builder.query(&[("tag__n", &s.to_string())]);
        }
        if let Some(ref s) = type__n {
            req_builder = req_builder.query(&[("type__n", &s.to_string())]);
        }
        if let Some(ref s) = limit {
            req_builder = req_builder.query(&[("limit", &s.to_string())]);
        }
        if let Some(ref s) = offset {
            req_builder = req_builder.query(&[("offset", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_console_server_ports_partial_update(
        &self,
        id: i32,
        data: crate::models::WritableConsoleServerPort,
    ) -> Result<crate::models::ConsoleServerPort, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/dcim/console-server-ports/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.patch(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_console_server_ports_read(
        &self,
        id: i32,
    ) -> Result<crate::models::ConsoleServerPort, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/dcim/console-server-ports/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_console_server_ports_trace(
        &self,
        id: i32,
    ) -> Result<crate::models::ConsoleServerPort, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/dcim/console-server-ports/{id}/trace/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_console_server_ports_update(
        &self,
        id: i32,
        data: crate::models::WritableConsoleServerPort,
    ) -> Result<crate::models::ConsoleServerPort, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/dcim/console-server-ports/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.put(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_device_bay_templates_create(
        &self,
        data: crate::models::WritableDeviceBayTemplate,
    ) -> Result<crate::models::DeviceBayTemplate, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/dcim/device-bay-templates/", configuration.base_path);
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_device_bay_templates_delete(&self, id: i32) -> Result<(), Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/dcim/device-bay-templates/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.delete(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        client.execute(req)?.error_for_status()?;
        Ok(())
    }

    fn dcim_device_bay_templates_list(
        &self,
        id: Option<&str>,
        name: Option<&str>,
        q: Option<&str>,
        devicetype_id: Option<&str>,
        id__n: Option<&str>,
        id__lte: Option<&str>,
        id__lt: Option<&str>,
        id__gte: Option<&str>,
        id__gt: Option<&str>,
        name__n: Option<&str>,
        name__ic: Option<&str>,
        name__nic: Option<&str>,
        name__iew: Option<&str>,
        name__niew: Option<&str>,
        name__isw: Option<&str>,
        name__nisw: Option<&str>,
        name__ie: Option<&str>,
        name__nie: Option<&str>,
        devicetype_id__n: Option<&str>,
        limit: Option<i32>,
        offset: Option<i32>,
    ) -> Result<crate::models::InlineResponse2009, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/dcim/device-bay-templates/", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = id {
            req_builder = req_builder.query(&[("id", &s.to_string())]);
        }
        if let Some(ref s) = name {
            req_builder = req_builder.query(&[("name", &s.to_string())]);
        }
        if let Some(ref s) = q {
            req_builder = req_builder.query(&[("q", &s.to_string())]);
        }
        if let Some(ref s) = devicetype_id {
            req_builder = req_builder.query(&[("devicetype_id", &s.to_string())]);
        }
        if let Some(ref s) = id__n {
            req_builder = req_builder.query(&[("id__n", &s.to_string())]);
        }
        if let Some(ref s) = id__lte {
            req_builder = req_builder.query(&[("id__lte", &s.to_string())]);
        }
        if let Some(ref s) = id__lt {
            req_builder = req_builder.query(&[("id__lt", &s.to_string())]);
        }
        if let Some(ref s) = id__gte {
            req_builder = req_builder.query(&[("id__gte", &s.to_string())]);
        }
        if let Some(ref s) = id__gt {
            req_builder = req_builder.query(&[("id__gt", &s.to_string())]);
        }
        if let Some(ref s) = name__n {
            req_builder = req_builder.query(&[("name__n", &s.to_string())]);
        }
        if let Some(ref s) = name__ic {
            req_builder = req_builder.query(&[("name__ic", &s.to_string())]);
        }
        if let Some(ref s) = name__nic {
            req_builder = req_builder.query(&[("name__nic", &s.to_string())]);
        }
        if let Some(ref s) = name__iew {
            req_builder = req_builder.query(&[("name__iew", &s.to_string())]);
        }
        if let Some(ref s) = name__niew {
            req_builder = req_builder.query(&[("name__niew", &s.to_string())]);
        }
        if let Some(ref s) = name__isw {
            req_builder = req_builder.query(&[("name__isw", &s.to_string())]);
        }
        if let Some(ref s) = name__nisw {
            req_builder = req_builder.query(&[("name__nisw", &s.to_string())]);
        }
        if let Some(ref s) = name__ie {
            req_builder = req_builder.query(&[("name__ie", &s.to_string())]);
        }
        if let Some(ref s) = name__nie {
            req_builder = req_builder.query(&[("name__nie", &s.to_string())]);
        }
        if let Some(ref s) = devicetype_id__n {
            req_builder = req_builder.query(&[("devicetype_id__n", &s.to_string())]);
        }
        if let Some(ref s) = limit {
            req_builder = req_builder.query(&[("limit", &s.to_string())]);
        }
        if let Some(ref s) = offset {
            req_builder = req_builder.query(&[("offset", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_device_bay_templates_partial_update(
        &self,
        id: i32,
        data: crate::models::WritableDeviceBayTemplate,
    ) -> Result<crate::models::DeviceBayTemplate, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/dcim/device-bay-templates/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.patch(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_device_bay_templates_read(
        &self,
        id: i32,
    ) -> Result<crate::models::DeviceBayTemplate, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/dcim/device-bay-templates/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_device_bay_templates_update(
        &self,
        id: i32,
        data: crate::models::WritableDeviceBayTemplate,
    ) -> Result<crate::models::DeviceBayTemplate, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/dcim/device-bay-templates/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.put(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_device_bays_create(
        &self,
        data: crate::models::WritableDeviceBay,
    ) -> Result<crate::models::DeviceBay, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/dcim/device-bays/", configuration.base_path);
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_device_bays_delete(&self, id: i32) -> Result<(), Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/dcim/device-bays/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.delete(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        client.execute(req)?.error_for_status()?;
        Ok(())
    }

    fn dcim_device_bays_list(
        &self,
        id: Option<&str>,
        name: Option<&str>,
        description: Option<&str>,
        q: Option<&str>,
        region_id: Option<&str>,
        region: Option<&str>,
        site_id: Option<&str>,
        site: Option<&str>,
        device_id: Option<&str>,
        device: Option<&str>,
        tag: Option<&str>,
        id__n: Option<&str>,
        id__lte: Option<&str>,
        id__lt: Option<&str>,
        id__gte: Option<&str>,
        id__gt: Option<&str>,
        name__n: Option<&str>,
        name__ic: Option<&str>,
        name__nic: Option<&str>,
        name__iew: Option<&str>,
        name__niew: Option<&str>,
        name__isw: Option<&str>,
        name__nisw: Option<&str>,
        name__ie: Option<&str>,
        name__nie: Option<&str>,
        description__n: Option<&str>,
        description__ic: Option<&str>,
        description__nic: Option<&str>,
        description__iew: Option<&str>,
        description__niew: Option<&str>,
        description__isw: Option<&str>,
        description__nisw: Option<&str>,
        description__ie: Option<&str>,
        description__nie: Option<&str>,
        region_id__n: Option<&str>,
        region__n: Option<&str>,
        site_id__n: Option<&str>,
        site__n: Option<&str>,
        device_id__n: Option<&str>,
        device__n: Option<&str>,
        tag__n: Option<&str>,
        limit: Option<i32>,
        offset: Option<i32>,
    ) -> Result<crate::models::InlineResponse20010, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/dcim/device-bays/", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = id {
            req_builder = req_builder.query(&[("id", &s.to_string())]);
        }
        if let Some(ref s) = name {
            req_builder = req_builder.query(&[("name", &s.to_string())]);
        }
        if let Some(ref s) = description {
            req_builder = req_builder.query(&[("description", &s.to_string())]);
        }
        if let Some(ref s) = q {
            req_builder = req_builder.query(&[("q", &s.to_string())]);
        }
        if let Some(ref s) = region_id {
            req_builder = req_builder.query(&[("region_id", &s.to_string())]);
        }
        if let Some(ref s) = region {
            req_builder = req_builder.query(&[("region", &s.to_string())]);
        }
        if let Some(ref s) = site_id {
            req_builder = req_builder.query(&[("site_id", &s.to_string())]);
        }
        if let Some(ref s) = site {
            req_builder = req_builder.query(&[("site", &s.to_string())]);
        }
        if let Some(ref s) = device_id {
            req_builder = req_builder.query(&[("device_id", &s.to_string())]);
        }
        if let Some(ref s) = device {
            req_builder = req_builder.query(&[("device", &s.to_string())]);
        }
        if let Some(ref s) = tag {
            req_builder = req_builder.query(&[("tag", &s.to_string())]);
        }
        if let Some(ref s) = id__n {
            req_builder = req_builder.query(&[("id__n", &s.to_string())]);
        }
        if let Some(ref s) = id__lte {
            req_builder = req_builder.query(&[("id__lte", &s.to_string())]);
        }
        if let Some(ref s) = id__lt {
            req_builder = req_builder.query(&[("id__lt", &s.to_string())]);
        }
        if let Some(ref s) = id__gte {
            req_builder = req_builder.query(&[("id__gte", &s.to_string())]);
        }
        if let Some(ref s) = id__gt {
            req_builder = req_builder.query(&[("id__gt", &s.to_string())]);
        }
        if let Some(ref s) = name__n {
            req_builder = req_builder.query(&[("name__n", &s.to_string())]);
        }
        if let Some(ref s) = name__ic {
            req_builder = req_builder.query(&[("name__ic", &s.to_string())]);
        }
        if let Some(ref s) = name__nic {
            req_builder = req_builder.query(&[("name__nic", &s.to_string())]);
        }
        if let Some(ref s) = name__iew {
            req_builder = req_builder.query(&[("name__iew", &s.to_string())]);
        }
        if let Some(ref s) = name__niew {
            req_builder = req_builder.query(&[("name__niew", &s.to_string())]);
        }
        if let Some(ref s) = name__isw {
            req_builder = req_builder.query(&[("name__isw", &s.to_string())]);
        }
        if let Some(ref s) = name__nisw {
            req_builder = req_builder.query(&[("name__nisw", &s.to_string())]);
        }
        if let Some(ref s) = name__ie {
            req_builder = req_builder.query(&[("name__ie", &s.to_string())]);
        }
        if let Some(ref s) = name__nie {
            req_builder = req_builder.query(&[("name__nie", &s.to_string())]);
        }
        if let Some(ref s) = description__n {
            req_builder = req_builder.query(&[("description__n", &s.to_string())]);
        }
        if let Some(ref s) = description__ic {
            req_builder = req_builder.query(&[("description__ic", &s.to_string())]);
        }
        if let Some(ref s) = description__nic {
            req_builder = req_builder.query(&[("description__nic", &s.to_string())]);
        }
        if let Some(ref s) = description__iew {
            req_builder = req_builder.query(&[("description__iew", &s.to_string())]);
        }
        if let Some(ref s) = description__niew {
            req_builder = req_builder.query(&[("description__niew", &s.to_string())]);
        }
        if let Some(ref s) = description__isw {
            req_builder = req_builder.query(&[("description__isw", &s.to_string())]);
        }
        if let Some(ref s) = description__nisw {
            req_builder = req_builder.query(&[("description__nisw", &s.to_string())]);
        }
        if let Some(ref s) = description__ie {
            req_builder = req_builder.query(&[("description__ie", &s.to_string())]);
        }
        if let Some(ref s) = description__nie {
            req_builder = req_builder.query(&[("description__nie", &s.to_string())]);
        }
        if let Some(ref s) = region_id__n {
            req_builder = req_builder.query(&[("region_id__n", &s.to_string())]);
        }
        if let Some(ref s) = region__n {
            req_builder = req_builder.query(&[("region__n", &s.to_string())]);
        }
        if let Some(ref s) = site_id__n {
            req_builder = req_builder.query(&[("site_id__n", &s.to_string())]);
        }
        if let Some(ref s) = site__n {
            req_builder = req_builder.query(&[("site__n", &s.to_string())]);
        }
        if let Some(ref s) = device_id__n {
            req_builder = req_builder.query(&[("device_id__n", &s.to_string())]);
        }
        if let Some(ref s) = device__n {
            req_builder = req_builder.query(&[("device__n", &s.to_string())]);
        }
        if let Some(ref s) = tag__n {
            req_builder = req_builder.query(&[("tag__n", &s.to_string())]);
        }
        if let Some(ref s) = limit {
            req_builder = req_builder.query(&[("limit", &s.to_string())]);
        }
        if let Some(ref s) = offset {
            req_builder = req_builder.query(&[("offset", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_device_bays_partial_update(
        &self,
        id: i32,
        data: crate::models::WritableDeviceBay,
    ) -> Result<crate::models::DeviceBay, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/dcim/device-bays/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.patch(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_device_bays_read(&self, id: i32) -> Result<crate::models::DeviceBay, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/dcim/device-bays/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_device_bays_update(
        &self,
        id: i32,
        data: crate::models::WritableDeviceBay,
    ) -> Result<crate::models::DeviceBay, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/dcim/device-bays/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.put(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_device_roles_create(
        &self,
        data: crate::models::DeviceRole,
    ) -> Result<crate::models::DeviceRole, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/dcim/device-roles/", configuration.base_path);
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_device_roles_delete(&self, id: i32) -> Result<(), Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/dcim/device-roles/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.delete(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        client.execute(req)?.error_for_status()?;
        Ok(())
    }

    fn dcim_device_roles_list(
        &self,
        id: Option<&str>,
        name: Option<&str>,
        slug: Option<&str>,
        color: Option<&str>,
        vm_role: Option<&str>,
        q: Option<&str>,
        id__n: Option<&str>,
        id__lte: Option<&str>,
        id__lt: Option<&str>,
        id__gte: Option<&str>,
        id__gt: Option<&str>,
        name__n: Option<&str>,
        name__ic: Option<&str>,
        name__nic: Option<&str>,
        name__iew: Option<&str>,
        name__niew: Option<&str>,
        name__isw: Option<&str>,
        name__nisw: Option<&str>,
        name__ie: Option<&str>,
        name__nie: Option<&str>,
        slug__n: Option<&str>,
        slug__ic: Option<&str>,
        slug__nic: Option<&str>,
        slug__iew: Option<&str>,
        slug__niew: Option<&str>,
        slug__isw: Option<&str>,
        slug__nisw: Option<&str>,
        slug__ie: Option<&str>,
        slug__nie: Option<&str>,
        color__n: Option<&str>,
        color__ic: Option<&str>,
        color__nic: Option<&str>,
        color__iew: Option<&str>,
        color__niew: Option<&str>,
        color__isw: Option<&str>,
        color__nisw: Option<&str>,
        color__ie: Option<&str>,
        color__nie: Option<&str>,
        limit: Option<i32>,
        offset: Option<i32>,
    ) -> Result<crate::models::InlineResponse20011, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/dcim/device-roles/", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = id {
            req_builder = req_builder.query(&[("id", &s.to_string())]);
        }
        if let Some(ref s) = name {
            req_builder = req_builder.query(&[("name", &s.to_string())]);
        }
        if let Some(ref s) = slug {
            req_builder = req_builder.query(&[("slug", &s.to_string())]);
        }
        if let Some(ref s) = color {
            req_builder = req_builder.query(&[("color", &s.to_string())]);
        }
        if let Some(ref s) = vm_role {
            req_builder = req_builder.query(&[("vm_role", &s.to_string())]);
        }
        if let Some(ref s) = q {
            req_builder = req_builder.query(&[("q", &s.to_string())]);
        }
        if let Some(ref s) = id__n {
            req_builder = req_builder.query(&[("id__n", &s.to_string())]);
        }
        if let Some(ref s) = id__lte {
            req_builder = req_builder.query(&[("id__lte", &s.to_string())]);
        }
        if let Some(ref s) = id__lt {
            req_builder = req_builder.query(&[("id__lt", &s.to_string())]);
        }
        if let Some(ref s) = id__gte {
            req_builder = req_builder.query(&[("id__gte", &s.to_string())]);
        }
        if let Some(ref s) = id__gt {
            req_builder = req_builder.query(&[("id__gt", &s.to_string())]);
        }
        if let Some(ref s) = name__n {
            req_builder = req_builder.query(&[("name__n", &s.to_string())]);
        }
        if let Some(ref s) = name__ic {
            req_builder = req_builder.query(&[("name__ic", &s.to_string())]);
        }
        if let Some(ref s) = name__nic {
            req_builder = req_builder.query(&[("name__nic", &s.to_string())]);
        }
        if let Some(ref s) = name__iew {
            req_builder = req_builder.query(&[("name__iew", &s.to_string())]);
        }
        if let Some(ref s) = name__niew {
            req_builder = req_builder.query(&[("name__niew", &s.to_string())]);
        }
        if let Some(ref s) = name__isw {
            req_builder = req_builder.query(&[("name__isw", &s.to_string())]);
        }
        if let Some(ref s) = name__nisw {
            req_builder = req_builder.query(&[("name__nisw", &s.to_string())]);
        }
        if let Some(ref s) = name__ie {
            req_builder = req_builder.query(&[("name__ie", &s.to_string())]);
        }
        if let Some(ref s) = name__nie {
            req_builder = req_builder.query(&[("name__nie", &s.to_string())]);
        }
        if let Some(ref s) = slug__n {
            req_builder = req_builder.query(&[("slug__n", &s.to_string())]);
        }
        if let Some(ref s) = slug__ic {
            req_builder = req_builder.query(&[("slug__ic", &s.to_string())]);
        }
        if let Some(ref s) = slug__nic {
            req_builder = req_builder.query(&[("slug__nic", &s.to_string())]);
        }
        if let Some(ref s) = slug__iew {
            req_builder = req_builder.query(&[("slug__iew", &s.to_string())]);
        }
        if let Some(ref s) = slug__niew {
            req_builder = req_builder.query(&[("slug__niew", &s.to_string())]);
        }
        if let Some(ref s) = slug__isw {
            req_builder = req_builder.query(&[("slug__isw", &s.to_string())]);
        }
        if let Some(ref s) = slug__nisw {
            req_builder = req_builder.query(&[("slug__nisw", &s.to_string())]);
        }
        if let Some(ref s) = slug__ie {
            req_builder = req_builder.query(&[("slug__ie", &s.to_string())]);
        }
        if let Some(ref s) = slug__nie {
            req_builder = req_builder.query(&[("slug__nie", &s.to_string())]);
        }
        if let Some(ref s) = color__n {
            req_builder = req_builder.query(&[("color__n", &s.to_string())]);
        }
        if let Some(ref s) = color__ic {
            req_builder = req_builder.query(&[("color__ic", &s.to_string())]);
        }
        if let Some(ref s) = color__nic {
            req_builder = req_builder.query(&[("color__nic", &s.to_string())]);
        }
        if let Some(ref s) = color__iew {
            req_builder = req_builder.query(&[("color__iew", &s.to_string())]);
        }
        if let Some(ref s) = color__niew {
            req_builder = req_builder.query(&[("color__niew", &s.to_string())]);
        }
        if let Some(ref s) = color__isw {
            req_builder = req_builder.query(&[("color__isw", &s.to_string())]);
        }
        if let Some(ref s) = color__nisw {
            req_builder = req_builder.query(&[("color__nisw", &s.to_string())]);
        }
        if let Some(ref s) = color__ie {
            req_builder = req_builder.query(&[("color__ie", &s.to_string())]);
        }
        if let Some(ref s) = color__nie {
            req_builder = req_builder.query(&[("color__nie", &s.to_string())]);
        }
        if let Some(ref s) = limit {
            req_builder = req_builder.query(&[("limit", &s.to_string())]);
        }
        if let Some(ref s) = offset {
            req_builder = req_builder.query(&[("offset", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_device_roles_partial_update(
        &self,
        id: i32,
        data: crate::models::DeviceRole,
    ) -> Result<crate::models::DeviceRole, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/dcim/device-roles/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.patch(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_device_roles_read(&self, id: i32) -> Result<crate::models::DeviceRole, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/dcim/device-roles/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_device_roles_update(
        &self,
        id: i32,
        data: crate::models::DeviceRole,
    ) -> Result<crate::models::DeviceRole, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/dcim/device-roles/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.put(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_device_types_create(
        &self,
        data: crate::models::WritableDeviceType,
    ) -> Result<crate::models::DeviceType, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/dcim/device-types/", configuration.base_path);
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_device_types_delete(&self, id: i32) -> Result<(), Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/dcim/device-types/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.delete(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        client.execute(req)?.error_for_status()?;
        Ok(())
    }

    fn dcim_device_types_list(
        &self,
        model: Option<&str>,
        slug: Option<&str>,
        part_number: Option<&str>,
        u_height: Option<&str>,
        is_full_depth: Option<&str>,
        subdevice_role: Option<&str>,
        created: Option<&str>,
        created__gte: Option<&str>,
        created__lte: Option<&str>,
        last_updated: Option<&str>,
        last_updated__gte: Option<&str>,
        last_updated__lte: Option<&str>,
        id__in: Option<&str>,
        q: Option<&str>,
        manufacturer_id: Option<&str>,
        manufacturer: Option<&str>,
        console_ports: Option<&str>,
        console_server_ports: Option<&str>,
        power_ports: Option<&str>,
        power_outlets: Option<&str>,
        interfaces: Option<&str>,
        pass_through_ports: Option<&str>,
        device_bays: Option<&str>,
        tag: Option<&str>,
        model__n: Option<&str>,
        model__ic: Option<&str>,
        model__nic: Option<&str>,
        model__iew: Option<&str>,
        model__niew: Option<&str>,
        model__isw: Option<&str>,
        model__nisw: Option<&str>,
        model__ie: Option<&str>,
        model__nie: Option<&str>,
        slug__n: Option<&str>,
        slug__ic: Option<&str>,
        slug__nic: Option<&str>,
        slug__iew: Option<&str>,
        slug__niew: Option<&str>,
        slug__isw: Option<&str>,
        slug__nisw: Option<&str>,
        slug__ie: Option<&str>,
        slug__nie: Option<&str>,
        part_number__n: Option<&str>,
        part_number__ic: Option<&str>,
        part_number__nic: Option<&str>,
        part_number__iew: Option<&str>,
        part_number__niew: Option<&str>,
        part_number__isw: Option<&str>,
        part_number__nisw: Option<&str>,
        part_number__ie: Option<&str>,
        part_number__nie: Option<&str>,
        u_height__n: Option<&str>,
        u_height__lte: Option<&str>,
        u_height__lt: Option<&str>,
        u_height__gte: Option<&str>,
        u_height__gt: Option<&str>,
        subdevice_role__n: Option<&str>,
        manufacturer_id__n: Option<&str>,
        manufacturer__n: Option<&str>,
        tag__n: Option<&str>,
        limit: Option<i32>,
        offset: Option<i32>,
    ) -> Result<crate::models::InlineResponse20012, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/dcim/device-types/", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = model {
            req_builder = req_builder.query(&[("model", &s.to_string())]);
        }
        if let Some(ref s) = slug {
            req_builder = req_builder.query(&[("slug", &s.to_string())]);
        }
        if let Some(ref s) = part_number {
            req_builder = req_builder.query(&[("part_number", &s.to_string())]);
        }
        if let Some(ref s) = u_height {
            req_builder = req_builder.query(&[("u_height", &s.to_string())]);
        }
        if let Some(ref s) = is_full_depth {
            req_builder = req_builder.query(&[("is_full_depth", &s.to_string())]);
        }
        if let Some(ref s) = subdevice_role {
            req_builder = req_builder.query(&[("subdevice_role", &s.to_string())]);
        }
        if let Some(ref s) = created {
            req_builder = req_builder.query(&[("created", &s.to_string())]);
        }
        if let Some(ref s) = created__gte {
            req_builder = req_builder.query(&[("created__gte", &s.to_string())]);
        }
        if let Some(ref s) = created__lte {
            req_builder = req_builder.query(&[("created__lte", &s.to_string())]);
        }
        if let Some(ref s) = last_updated {
            req_builder = req_builder.query(&[("last_updated", &s.to_string())]);
        }
        if let Some(ref s) = last_updated__gte {
            req_builder = req_builder.query(&[("last_updated__gte", &s.to_string())]);
        }
        if let Some(ref s) = last_updated__lte {
            req_builder = req_builder.query(&[("last_updated__lte", &s.to_string())]);
        }
        if let Some(ref s) = id__in {
            req_builder = req_builder.query(&[("id__in", &s.to_string())]);
        }
        if let Some(ref s) = q {
            req_builder = req_builder.query(&[("q", &s.to_string())]);
        }
        if let Some(ref s) = manufacturer_id {
            req_builder = req_builder.query(&[("manufacturer_id", &s.to_string())]);
        }
        if let Some(ref s) = manufacturer {
            req_builder = req_builder.query(&[("manufacturer", &s.to_string())]);
        }
        if let Some(ref s) = console_ports {
            req_builder = req_builder.query(&[("console_ports", &s.to_string())]);
        }
        if let Some(ref s) = console_server_ports {
            req_builder = req_builder.query(&[("console_server_ports", &s.to_string())]);
        }
        if let Some(ref s) = power_ports {
            req_builder = req_builder.query(&[("power_ports", &s.to_string())]);
        }
        if let Some(ref s) = power_outlets {
            req_builder = req_builder.query(&[("power_outlets", &s.to_string())]);
        }
        if let Some(ref s) = interfaces {
            req_builder = req_builder.query(&[("interfaces", &s.to_string())]);
        }
        if let Some(ref s) = pass_through_ports {
            req_builder = req_builder.query(&[("pass_through_ports", &s.to_string())]);
        }
        if let Some(ref s) = device_bays {
            req_builder = req_builder.query(&[("device_bays", &s.to_string())]);
        }
        if let Some(ref s) = tag {
            req_builder = req_builder.query(&[("tag", &s.to_string())]);
        }
        if let Some(ref s) = model__n {
            req_builder = req_builder.query(&[("model__n", &s.to_string())]);
        }
        if let Some(ref s) = model__ic {
            req_builder = req_builder.query(&[("model__ic", &s.to_string())]);
        }
        if let Some(ref s) = model__nic {
            req_builder = req_builder.query(&[("model__nic", &s.to_string())]);
        }
        if let Some(ref s) = model__iew {
            req_builder = req_builder.query(&[("model__iew", &s.to_string())]);
        }
        if let Some(ref s) = model__niew {
            req_builder = req_builder.query(&[("model__niew", &s.to_string())]);
        }
        if let Some(ref s) = model__isw {
            req_builder = req_builder.query(&[("model__isw", &s.to_string())]);
        }
        if let Some(ref s) = model__nisw {
            req_builder = req_builder.query(&[("model__nisw", &s.to_string())]);
        }
        if let Some(ref s) = model__ie {
            req_builder = req_builder.query(&[("model__ie", &s.to_string())]);
        }
        if let Some(ref s) = model__nie {
            req_builder = req_builder.query(&[("model__nie", &s.to_string())]);
        }
        if let Some(ref s) = slug__n {
            req_builder = req_builder.query(&[("slug__n", &s.to_string())]);
        }
        if let Some(ref s) = slug__ic {
            req_builder = req_builder.query(&[("slug__ic", &s.to_string())]);
        }
        if let Some(ref s) = slug__nic {
            req_builder = req_builder.query(&[("slug__nic", &s.to_string())]);
        }
        if let Some(ref s) = slug__iew {
            req_builder = req_builder.query(&[("slug__iew", &s.to_string())]);
        }
        if let Some(ref s) = slug__niew {
            req_builder = req_builder.query(&[("slug__niew", &s.to_string())]);
        }
        if let Some(ref s) = slug__isw {
            req_builder = req_builder.query(&[("slug__isw", &s.to_string())]);
        }
        if let Some(ref s) = slug__nisw {
            req_builder = req_builder.query(&[("slug__nisw", &s.to_string())]);
        }
        if let Some(ref s) = slug__ie {
            req_builder = req_builder.query(&[("slug__ie", &s.to_string())]);
        }
        if let Some(ref s) = slug__nie {
            req_builder = req_builder.query(&[("slug__nie", &s.to_string())]);
        }
        if let Some(ref s) = part_number__n {
            req_builder = req_builder.query(&[("part_number__n", &s.to_string())]);
        }
        if let Some(ref s) = part_number__ic {
            req_builder = req_builder.query(&[("part_number__ic", &s.to_string())]);
        }
        if let Some(ref s) = part_number__nic {
            req_builder = req_builder.query(&[("part_number__nic", &s.to_string())]);
        }
        if let Some(ref s) = part_number__iew {
            req_builder = req_builder.query(&[("part_number__iew", &s.to_string())]);
        }
        if let Some(ref s) = part_number__niew {
            req_builder = req_builder.query(&[("part_number__niew", &s.to_string())]);
        }
        if let Some(ref s) = part_number__isw {
            req_builder = req_builder.query(&[("part_number__isw", &s.to_string())]);
        }
        if let Some(ref s) = part_number__nisw {
            req_builder = req_builder.query(&[("part_number__nisw", &s.to_string())]);
        }
        if let Some(ref s) = part_number__ie {
            req_builder = req_builder.query(&[("part_number__ie", &s.to_string())]);
        }
        if let Some(ref s) = part_number__nie {
            req_builder = req_builder.query(&[("part_number__nie", &s.to_string())]);
        }
        if let Some(ref s) = u_height__n {
            req_builder = req_builder.query(&[("u_height__n", &s.to_string())]);
        }
        if let Some(ref s) = u_height__lte {
            req_builder = req_builder.query(&[("u_height__lte", &s.to_string())]);
        }
        if let Some(ref s) = u_height__lt {
            req_builder = req_builder.query(&[("u_height__lt", &s.to_string())]);
        }
        if let Some(ref s) = u_height__gte {
            req_builder = req_builder.query(&[("u_height__gte", &s.to_string())]);
        }
        if let Some(ref s) = u_height__gt {
            req_builder = req_builder.query(&[("u_height__gt", &s.to_string())]);
        }
        if let Some(ref s) = subdevice_role__n {
            req_builder = req_builder.query(&[("subdevice_role__n", &s.to_string())]);
        }
        if let Some(ref s) = manufacturer_id__n {
            req_builder = req_builder.query(&[("manufacturer_id__n", &s.to_string())]);
        }
        if let Some(ref s) = manufacturer__n {
            req_builder = req_builder.query(&[("manufacturer__n", &s.to_string())]);
        }
        if let Some(ref s) = tag__n {
            req_builder = req_builder.query(&[("tag__n", &s.to_string())]);
        }
        if let Some(ref s) = limit {
            req_builder = req_builder.query(&[("limit", &s.to_string())]);
        }
        if let Some(ref s) = offset {
            req_builder = req_builder.query(&[("offset", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_device_types_partial_update(
        &self,
        id: i32,
        data: crate::models::WritableDeviceType,
    ) -> Result<crate::models::DeviceType, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/dcim/device-types/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.patch(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_device_types_read(&self, id: i32) -> Result<crate::models::DeviceType, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/dcim/device-types/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_device_types_update(
        &self,
        id: i32,
        data: crate::models::WritableDeviceType,
    ) -> Result<crate::models::DeviceType, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/dcim/device-types/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.put(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_devices_create(
        &self,
        data: crate::models::WritableDeviceWithConfigContext,
    ) -> Result<crate::models::DeviceWithConfigContext, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/dcim/devices/", configuration.base_path);
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_devices_delete(&self, id: i32) -> Result<(), Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/dcim/devices/{id}/", configuration.base_path, id = id);
        let mut req_builder = client.delete(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        client.execute(req)?.error_for_status()?;
        Ok(())
    }

    fn dcim_devices_graphs(
        &self,
        id: i32,
    ) -> Result<crate::models::DeviceWithConfigContext, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/dcim/devices/{id}/graphs/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_devices_list(
        &self,
        id: Option<&str>,
        name: Option<&str>,
        asset_tag: Option<&str>,
        face: Option<&str>,
        position: Option<&str>,
        vc_position: Option<&str>,
        vc_priority: Option<&str>,
        tenant_group_id: Option<&str>,
        tenant_group: Option<&str>,
        tenant_id: Option<&str>,
        tenant: Option<&str>,
        local_context_data: Option<&str>,
        created: Option<&str>,
        created__gte: Option<&str>,
        created__lte: Option<&str>,
        last_updated: Option<&str>,
        last_updated__gte: Option<&str>,
        last_updated__lte: Option<&str>,
        id__in: Option<&str>,
        q: Option<&str>,
        manufacturer_id: Option<&str>,
        manufacturer: Option<&str>,
        device_type_id: Option<&str>,
        role_id: Option<&str>,
        role: Option<&str>,
        platform_id: Option<&str>,
        platform: Option<&str>,
        region_id: Option<&str>,
        region: Option<&str>,
        site_id: Option<&str>,
        site: Option<&str>,
        rack_group_id: Option<&str>,
        rack_id: Option<&str>,
        cluster_id: Option<&str>,
        model: Option<&str>,
        status: Option<&str>,
        is_full_depth: Option<&str>,
        mac_address: Option<&str>,
        serial: Option<&str>,
        has_primary_ip: Option<&str>,
        virtual_chassis_id: Option<&str>,
        virtual_chassis_member: Option<&str>,
        console_ports: Option<&str>,
        console_server_ports: Option<&str>,
        power_ports: Option<&str>,
        power_outlets: Option<&str>,
        interfaces: Option<&str>,
        pass_through_ports: Option<&str>,
        device_bays: Option<&str>,
        tag: Option<&str>,
        id__n: Option<&str>,
        id__lte: Option<&str>,
        id__lt: Option<&str>,
        id__gte: Option<&str>,
        id__gt: Option<&str>,
        name__n: Option<&str>,
        name__ic: Option<&str>,
        name__nic: Option<&str>,
        name__iew: Option<&str>,
        name__niew: Option<&str>,
        name__isw: Option<&str>,
        name__nisw: Option<&str>,
        name__ie: Option<&str>,
        name__nie: Option<&str>,
        asset_tag__n: Option<&str>,
        asset_tag__ic: Option<&str>,
        asset_tag__nic: Option<&str>,
        asset_tag__iew: Option<&str>,
        asset_tag__niew: Option<&str>,
        asset_tag__isw: Option<&str>,
        asset_tag__nisw: Option<&str>,
        asset_tag__ie: Option<&str>,
        asset_tag__nie: Option<&str>,
        face__n: Option<&str>,
        position__n: Option<&str>,
        position__lte: Option<&str>,
        position__lt: Option<&str>,
        position__gte: Option<&str>,
        position__gt: Option<&str>,
        vc_position__n: Option<&str>,
        vc_position__lte: Option<&str>,
        vc_position__lt: Option<&str>,
        vc_position__gte: Option<&str>,
        vc_position__gt: Option<&str>,
        vc_priority__n: Option<&str>,
        vc_priority__lte: Option<&str>,
        vc_priority__lt: Option<&str>,
        vc_priority__gte: Option<&str>,
        vc_priority__gt: Option<&str>,
        tenant_group_id__n: Option<&str>,
        tenant_group__n: Option<&str>,
        tenant_id__n: Option<&str>,
        tenant__n: Option<&str>,
        manufacturer_id__n: Option<&str>,
        manufacturer__n: Option<&str>,
        device_type_id__n: Option<&str>,
        role_id__n: Option<&str>,
        role__n: Option<&str>,
        platform_id__n: Option<&str>,
        platform__n: Option<&str>,
        region_id__n: Option<&str>,
        region__n: Option<&str>,
        site_id__n: Option<&str>,
        site__n: Option<&str>,
        rack_group_id__n: Option<&str>,
        rack_id__n: Option<&str>,
        cluster_id__n: Option<&str>,
        model__n: Option<&str>,
        status__n: Option<&str>,
        mac_address__n: Option<&str>,
        mac_address__ic: Option<&str>,
        mac_address__nic: Option<&str>,
        mac_address__iew: Option<&str>,
        mac_address__niew: Option<&str>,
        mac_address__isw: Option<&str>,
        mac_address__nisw: Option<&str>,
        mac_address__ie: Option<&str>,
        mac_address__nie: Option<&str>,
        virtual_chassis_id__n: Option<&str>,
        tag__n: Option<&str>,
        limit: Option<i32>,
        offset: Option<i32>,
    ) -> Result<crate::models::InlineResponse20013, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/dcim/devices/", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = id {
            req_builder = req_builder.query(&[("id", &s.to_string())]);
        }
        if let Some(ref s) = name {
            req_builder = req_builder.query(&[("name", &s.to_string())]);
        }
        if let Some(ref s) = asset_tag {
            req_builder = req_builder.query(&[("asset_tag", &s.to_string())]);
        }
        if let Some(ref s) = face {
            req_builder = req_builder.query(&[("face", &s.to_string())]);
        }
        if let Some(ref s) = position {
            req_builder = req_builder.query(&[("position", &s.to_string())]);
        }
        if let Some(ref s) = vc_position {
            req_builder = req_builder.query(&[("vc_position", &s.to_string())]);
        }
        if let Some(ref s) = vc_priority {
            req_builder = req_builder.query(&[("vc_priority", &s.to_string())]);
        }
        if let Some(ref s) = tenant_group_id {
            req_builder = req_builder.query(&[("tenant_group_id", &s.to_string())]);
        }
        if let Some(ref s) = tenant_group {
            req_builder = req_builder.query(&[("tenant_group", &s.to_string())]);
        }
        if let Some(ref s) = tenant_id {
            req_builder = req_builder.query(&[("tenant_id", &s.to_string())]);
        }
        if let Some(ref s) = tenant {
            req_builder = req_builder.query(&[("tenant", &s.to_string())]);
        }
        if let Some(ref s) = local_context_data {
            req_builder = req_builder.query(&[("local_context_data", &s.to_string())]);
        }
        if let Some(ref s) = created {
            req_builder = req_builder.query(&[("created", &s.to_string())]);
        }
        if let Some(ref s) = created__gte {
            req_builder = req_builder.query(&[("created__gte", &s.to_string())]);
        }
        if let Some(ref s) = created__lte {
            req_builder = req_builder.query(&[("created__lte", &s.to_string())]);
        }
        if let Some(ref s) = last_updated {
            req_builder = req_builder.query(&[("last_updated", &s.to_string())]);
        }
        if let Some(ref s) = last_updated__gte {
            req_builder = req_builder.query(&[("last_updated__gte", &s.to_string())]);
        }
        if let Some(ref s) = last_updated__lte {
            req_builder = req_builder.query(&[("last_updated__lte", &s.to_string())]);
        }
        if let Some(ref s) = id__in {
            req_builder = req_builder.query(&[("id__in", &s.to_string())]);
        }
        if let Some(ref s) = q {
            req_builder = req_builder.query(&[("q", &s.to_string())]);
        }
        if let Some(ref s) = manufacturer_id {
            req_builder = req_builder.query(&[("manufacturer_id", &s.to_string())]);
        }
        if let Some(ref s) = manufacturer {
            req_builder = req_builder.query(&[("manufacturer", &s.to_string())]);
        }
        if let Some(ref s) = device_type_id {
            req_builder = req_builder.query(&[("device_type_id", &s.to_string())]);
        }
        if let Some(ref s) = role_id {
            req_builder = req_builder.query(&[("role_id", &s.to_string())]);
        }
        if let Some(ref s) = role {
            req_builder = req_builder.query(&[("role", &s.to_string())]);
        }
        if let Some(ref s) = platform_id {
            req_builder = req_builder.query(&[("platform_id", &s.to_string())]);
        }
        if let Some(ref s) = platform {
            req_builder = req_builder.query(&[("platform", &s.to_string())]);
        }
        if let Some(ref s) = region_id {
            req_builder = req_builder.query(&[("region_id", &s.to_string())]);
        }
        if let Some(ref s) = region {
            req_builder = req_builder.query(&[("region", &s.to_string())]);
        }
        if let Some(ref s) = site_id {
            req_builder = req_builder.query(&[("site_id", &s.to_string())]);
        }
        if let Some(ref s) = site {
            req_builder = req_builder.query(&[("site", &s.to_string())]);
        }
        if let Some(ref s) = rack_group_id {
            req_builder = req_builder.query(&[("rack_group_id", &s.to_string())]);
        }
        if let Some(ref s) = rack_id {
            req_builder = req_builder.query(&[("rack_id", &s.to_string())]);
        }
        if let Some(ref s) = cluster_id {
            req_builder = req_builder.query(&[("cluster_id", &s.to_string())]);
        }
        if let Some(ref s) = model {
            req_builder = req_builder.query(&[("model", &s.to_string())]);
        }
        if let Some(ref s) = status {
            req_builder = req_builder.query(&[("status", &s.to_string())]);
        }
        if let Some(ref s) = is_full_depth {
            req_builder = req_builder.query(&[("is_full_depth", &s.to_string())]);
        }
        if let Some(ref s) = mac_address {
            req_builder = req_builder.query(&[("mac_address", &s.to_string())]);
        }
        if let Some(ref s) = serial {
            req_builder = req_builder.query(&[("serial", &s.to_string())]);
        }
        if let Some(ref s) = has_primary_ip {
            req_builder = req_builder.query(&[("has_primary_ip", &s.to_string())]);
        }
        if let Some(ref s) = virtual_chassis_id {
            req_builder = req_builder.query(&[("virtual_chassis_id", &s.to_string())]);
        }
        if let Some(ref s) = virtual_chassis_member {
            req_builder = req_builder.query(&[("virtual_chassis_member", &s.to_string())]);
        }
        if let Some(ref s) = console_ports {
            req_builder = req_builder.query(&[("console_ports", &s.to_string())]);
        }
        if let Some(ref s) = console_server_ports {
            req_builder = req_builder.query(&[("console_server_ports", &s.to_string())]);
        }
        if let Some(ref s) = power_ports {
            req_builder = req_builder.query(&[("power_ports", &s.to_string())]);
        }
        if let Some(ref s) = power_outlets {
            req_builder = req_builder.query(&[("power_outlets", &s.to_string())]);
        }
        if let Some(ref s) = interfaces {
            req_builder = req_builder.query(&[("interfaces", &s.to_string())]);
        }
        if let Some(ref s) = pass_through_ports {
            req_builder = req_builder.query(&[("pass_through_ports", &s.to_string())]);
        }
        if let Some(ref s) = device_bays {
            req_builder = req_builder.query(&[("device_bays", &s.to_string())]);
        }
        if let Some(ref s) = tag {
            req_builder = req_builder.query(&[("tag", &s.to_string())]);
        }
        if let Some(ref s) = id__n {
            req_builder = req_builder.query(&[("id__n", &s.to_string())]);
        }
        if let Some(ref s) = id__lte {
            req_builder = req_builder.query(&[("id__lte", &s.to_string())]);
        }
        if let Some(ref s) = id__lt {
            req_builder = req_builder.query(&[("id__lt", &s.to_string())]);
        }
        if let Some(ref s) = id__gte {
            req_builder = req_builder.query(&[("id__gte", &s.to_string())]);
        }
        if let Some(ref s) = id__gt {
            req_builder = req_builder.query(&[("id__gt", &s.to_string())]);
        }
        if let Some(ref s) = name__n {
            req_builder = req_builder.query(&[("name__n", &s.to_string())]);
        }
        if let Some(ref s) = name__ic {
            req_builder = req_builder.query(&[("name__ic", &s.to_string())]);
        }
        if let Some(ref s) = name__nic {
            req_builder = req_builder.query(&[("name__nic", &s.to_string())]);
        }
        if let Some(ref s) = name__iew {
            req_builder = req_builder.query(&[("name__iew", &s.to_string())]);
        }
        if let Some(ref s) = name__niew {
            req_builder = req_builder.query(&[("name__niew", &s.to_string())]);
        }
        if let Some(ref s) = name__isw {
            req_builder = req_builder.query(&[("name__isw", &s.to_string())]);
        }
        if let Some(ref s) = name__nisw {
            req_builder = req_builder.query(&[("name__nisw", &s.to_string())]);
        }
        if let Some(ref s) = name__ie {
            req_builder = req_builder.query(&[("name__ie", &s.to_string())]);
        }
        if let Some(ref s) = name__nie {
            req_builder = req_builder.query(&[("name__nie", &s.to_string())]);
        }
        if let Some(ref s) = asset_tag__n {
            req_builder = req_builder.query(&[("asset_tag__n", &s.to_string())]);
        }
        if let Some(ref s) = asset_tag__ic {
            req_builder = req_builder.query(&[("asset_tag__ic", &s.to_string())]);
        }
        if let Some(ref s) = asset_tag__nic {
            req_builder = req_builder.query(&[("asset_tag__nic", &s.to_string())]);
        }
        if let Some(ref s) = asset_tag__iew {
            req_builder = req_builder.query(&[("asset_tag__iew", &s.to_string())]);
        }
        if let Some(ref s) = asset_tag__niew {
            req_builder = req_builder.query(&[("asset_tag__niew", &s.to_string())]);
        }
        if let Some(ref s) = asset_tag__isw {
            req_builder = req_builder.query(&[("asset_tag__isw", &s.to_string())]);
        }
        if let Some(ref s) = asset_tag__nisw {
            req_builder = req_builder.query(&[("asset_tag__nisw", &s.to_string())]);
        }
        if let Some(ref s) = asset_tag__ie {
            req_builder = req_builder.query(&[("asset_tag__ie", &s.to_string())]);
        }
        if let Some(ref s) = asset_tag__nie {
            req_builder = req_builder.query(&[("asset_tag__nie", &s.to_string())]);
        }
        if let Some(ref s) = face__n {
            req_builder = req_builder.query(&[("face__n", &s.to_string())]);
        }
        if let Some(ref s) = position__n {
            req_builder = req_builder.query(&[("position__n", &s.to_string())]);
        }
        if let Some(ref s) = position__lte {
            req_builder = req_builder.query(&[("position__lte", &s.to_string())]);
        }
        if let Some(ref s) = position__lt {
            req_builder = req_builder.query(&[("position__lt", &s.to_string())]);
        }
        if let Some(ref s) = position__gte {
            req_builder = req_builder.query(&[("position__gte", &s.to_string())]);
        }
        if let Some(ref s) = position__gt {
            req_builder = req_builder.query(&[("position__gt", &s.to_string())]);
        }
        if let Some(ref s) = vc_position__n {
            req_builder = req_builder.query(&[("vc_position__n", &s.to_string())]);
        }
        if let Some(ref s) = vc_position__lte {
            req_builder = req_builder.query(&[("vc_position__lte", &s.to_string())]);
        }
        if let Some(ref s) = vc_position__lt {
            req_builder = req_builder.query(&[("vc_position__lt", &s.to_string())]);
        }
        if let Some(ref s) = vc_position__gte {
            req_builder = req_builder.query(&[("vc_position__gte", &s.to_string())]);
        }
        if let Some(ref s) = vc_position__gt {
            req_builder = req_builder.query(&[("vc_position__gt", &s.to_string())]);
        }
        if let Some(ref s) = vc_priority__n {
            req_builder = req_builder.query(&[("vc_priority__n", &s.to_string())]);
        }
        if let Some(ref s) = vc_priority__lte {
            req_builder = req_builder.query(&[("vc_priority__lte", &s.to_string())]);
        }
        if let Some(ref s) = vc_priority__lt {
            req_builder = req_builder.query(&[("vc_priority__lt", &s.to_string())]);
        }
        if let Some(ref s) = vc_priority__gte {
            req_builder = req_builder.query(&[("vc_priority__gte", &s.to_string())]);
        }
        if let Some(ref s) = vc_priority__gt {
            req_builder = req_builder.query(&[("vc_priority__gt", &s.to_string())]);
        }
        if let Some(ref s) = tenant_group_id__n {
            req_builder = req_builder.query(&[("tenant_group_id__n", &s.to_string())]);
        }
        if let Some(ref s) = tenant_group__n {
            req_builder = req_builder.query(&[("tenant_group__n", &s.to_string())]);
        }
        if let Some(ref s) = tenant_id__n {
            req_builder = req_builder.query(&[("tenant_id__n", &s.to_string())]);
        }
        if let Some(ref s) = tenant__n {
            req_builder = req_builder.query(&[("tenant__n", &s.to_string())]);
        }
        if let Some(ref s) = manufacturer_id__n {
            req_builder = req_builder.query(&[("manufacturer_id__n", &s.to_string())]);
        }
        if let Some(ref s) = manufacturer__n {
            req_builder = req_builder.query(&[("manufacturer__n", &s.to_string())]);
        }
        if let Some(ref s) = device_type_id__n {
            req_builder = req_builder.query(&[("device_type_id__n", &s.to_string())]);
        }
        if let Some(ref s) = role_id__n {
            req_builder = req_builder.query(&[("role_id__n", &s.to_string())]);
        }
        if let Some(ref s) = role__n {
            req_builder = req_builder.query(&[("role__n", &s.to_string())]);
        }
        if let Some(ref s) = platform_id__n {
            req_builder = req_builder.query(&[("platform_id__n", &s.to_string())]);
        }
        if let Some(ref s) = platform__n {
            req_builder = req_builder.query(&[("platform__n", &s.to_string())]);
        }
        if let Some(ref s) = region_id__n {
            req_builder = req_builder.query(&[("region_id__n", &s.to_string())]);
        }
        if let Some(ref s) = region__n {
            req_builder = req_builder.query(&[("region__n", &s.to_string())]);
        }
        if let Some(ref s) = site_id__n {
            req_builder = req_builder.query(&[("site_id__n", &s.to_string())]);
        }
        if let Some(ref s) = site__n {
            req_builder = req_builder.query(&[("site__n", &s.to_string())]);
        }
        if let Some(ref s) = rack_group_id__n {
            req_builder = req_builder.query(&[("rack_group_id__n", &s.to_string())]);
        }
        if let Some(ref s) = rack_id__n {
            req_builder = req_builder.query(&[("rack_id__n", &s.to_string())]);
        }
        if let Some(ref s) = cluster_id__n {
            req_builder = req_builder.query(&[("cluster_id__n", &s.to_string())]);
        }
        if let Some(ref s) = model__n {
            req_builder = req_builder.query(&[("model__n", &s.to_string())]);
        }
        if let Some(ref s) = status__n {
            req_builder = req_builder.query(&[("status__n", &s.to_string())]);
        }
        if let Some(ref s) = mac_address__n {
            req_builder = req_builder.query(&[("mac_address__n", &s.to_string())]);
        }
        if let Some(ref s) = mac_address__ic {
            req_builder = req_builder.query(&[("mac_address__ic", &s.to_string())]);
        }
        if let Some(ref s) = mac_address__nic {
            req_builder = req_builder.query(&[("mac_address__nic", &s.to_string())]);
        }
        if let Some(ref s) = mac_address__iew {
            req_builder = req_builder.query(&[("mac_address__iew", &s.to_string())]);
        }
        if let Some(ref s) = mac_address__niew {
            req_builder = req_builder.query(&[("mac_address__niew", &s.to_string())]);
        }
        if let Some(ref s) = mac_address__isw {
            req_builder = req_builder.query(&[("mac_address__isw", &s.to_string())]);
        }
        if let Some(ref s) = mac_address__nisw {
            req_builder = req_builder.query(&[("mac_address__nisw", &s.to_string())]);
        }
        if let Some(ref s) = mac_address__ie {
            req_builder = req_builder.query(&[("mac_address__ie", &s.to_string())]);
        }
        if let Some(ref s) = mac_address__nie {
            req_builder = req_builder.query(&[("mac_address__nie", &s.to_string())]);
        }
        if let Some(ref s) = virtual_chassis_id__n {
            req_builder = req_builder.query(&[("virtual_chassis_id__n", &s.to_string())]);
        }
        if let Some(ref s) = tag__n {
            req_builder = req_builder.query(&[("tag__n", &s.to_string())]);
        }
        if let Some(ref s) = limit {
            req_builder = req_builder.query(&[("limit", &s.to_string())]);
        }
        if let Some(ref s) = offset {
            req_builder = req_builder.query(&[("offset", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_devices_napalm(
        &self,
        id: i32,
        method: &str,
    ) -> Result<crate::models::DeviceNapalm, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/dcim/devices/{id}/napalm/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.get(uri_str.as_str());

        req_builder = req_builder.query(&[("method", &method.to_string())]);
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_devices_partial_update(
        &self,
        id: i32,
        data: crate::models::WritableDeviceWithConfigContext,
    ) -> Result<crate::models::DeviceWithConfigContext, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/dcim/devices/{id}/", configuration.base_path, id = id);
        let mut req_builder = client.patch(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_devices_read(&self, id: i32) -> Result<crate::models::DeviceWithConfigContext, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/dcim/devices/{id}/", configuration.base_path, id = id);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_devices_update(
        &self,
        id: i32,
        data: crate::models::WritableDeviceWithConfigContext,
    ) -> Result<crate::models::DeviceWithConfigContext, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/dcim/devices/{id}/", configuration.base_path, id = id);
        let mut req_builder = client.put(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_front_port_templates_create(
        &self,
        data: crate::models::WritableFrontPortTemplate,
    ) -> Result<crate::models::FrontPortTemplate, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/dcim/front-port-templates/", configuration.base_path);
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_front_port_templates_delete(&self, id: i32) -> Result<(), Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/dcim/front-port-templates/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.delete(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        client.execute(req)?.error_for_status()?;
        Ok(())
    }

    fn dcim_front_port_templates_list(
        &self,
        id: Option<&str>,
        name: Option<&str>,
        _type: Option<&str>,
        q: Option<&str>,
        devicetype_id: Option<&str>,
        id__n: Option<&str>,
        id__lte: Option<&str>,
        id__lt: Option<&str>,
        id__gte: Option<&str>,
        id__gt: Option<&str>,
        name__n: Option<&str>,
        name__ic: Option<&str>,
        name__nic: Option<&str>,
        name__iew: Option<&str>,
        name__niew: Option<&str>,
        name__isw: Option<&str>,
        name__nisw: Option<&str>,
        name__ie: Option<&str>,
        name__nie: Option<&str>,
        type__n: Option<&str>,
        devicetype_id__n: Option<&str>,
        limit: Option<i32>,
        offset: Option<i32>,
    ) -> Result<crate::models::InlineResponse20014, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/dcim/front-port-templates/", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = id {
            req_builder = req_builder.query(&[("id", &s.to_string())]);
        }
        if let Some(ref s) = name {
            req_builder = req_builder.query(&[("name", &s.to_string())]);
        }
        if let Some(ref s) = _type {
            req_builder = req_builder.query(&[("type", &s.to_string())]);
        }
        if let Some(ref s) = q {
            req_builder = req_builder.query(&[("q", &s.to_string())]);
        }
        if let Some(ref s) = devicetype_id {
            req_builder = req_builder.query(&[("devicetype_id", &s.to_string())]);
        }
        if let Some(ref s) = id__n {
            req_builder = req_builder.query(&[("id__n", &s.to_string())]);
        }
        if let Some(ref s) = id__lte {
            req_builder = req_builder.query(&[("id__lte", &s.to_string())]);
        }
        if let Some(ref s) = id__lt {
            req_builder = req_builder.query(&[("id__lt", &s.to_string())]);
        }
        if let Some(ref s) = id__gte {
            req_builder = req_builder.query(&[("id__gte", &s.to_string())]);
        }
        if let Some(ref s) = id__gt {
            req_builder = req_builder.query(&[("id__gt", &s.to_string())]);
        }
        if let Some(ref s) = name__n {
            req_builder = req_builder.query(&[("name__n", &s.to_string())]);
        }
        if let Some(ref s) = name__ic {
            req_builder = req_builder.query(&[("name__ic", &s.to_string())]);
        }
        if let Some(ref s) = name__nic {
            req_builder = req_builder.query(&[("name__nic", &s.to_string())]);
        }
        if let Some(ref s) = name__iew {
            req_builder = req_builder.query(&[("name__iew", &s.to_string())]);
        }
        if let Some(ref s) = name__niew {
            req_builder = req_builder.query(&[("name__niew", &s.to_string())]);
        }
        if let Some(ref s) = name__isw {
            req_builder = req_builder.query(&[("name__isw", &s.to_string())]);
        }
        if let Some(ref s) = name__nisw {
            req_builder = req_builder.query(&[("name__nisw", &s.to_string())]);
        }
        if let Some(ref s) = name__ie {
            req_builder = req_builder.query(&[("name__ie", &s.to_string())]);
        }
        if let Some(ref s) = name__nie {
            req_builder = req_builder.query(&[("name__nie", &s.to_string())]);
        }
        if let Some(ref s) = type__n {
            req_builder = req_builder.query(&[("type__n", &s.to_string())]);
        }
        if let Some(ref s) = devicetype_id__n {
            req_builder = req_builder.query(&[("devicetype_id__n", &s.to_string())]);
        }
        if let Some(ref s) = limit {
            req_builder = req_builder.query(&[("limit", &s.to_string())]);
        }
        if let Some(ref s) = offset {
            req_builder = req_builder.query(&[("offset", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_front_port_templates_partial_update(
        &self,
        id: i32,
        data: crate::models::WritableFrontPortTemplate,
    ) -> Result<crate::models::FrontPortTemplate, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/dcim/front-port-templates/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.patch(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_front_port_templates_read(
        &self,
        id: i32,
    ) -> Result<crate::models::FrontPortTemplate, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/dcim/front-port-templates/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_front_port_templates_update(
        &self,
        id: i32,
        data: crate::models::WritableFrontPortTemplate,
    ) -> Result<crate::models::FrontPortTemplate, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/dcim/front-port-templates/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.put(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_front_ports_create(
        &self,
        data: crate::models::WritableFrontPort,
    ) -> Result<crate::models::FrontPort, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/dcim/front-ports/", configuration.base_path);
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_front_ports_delete(&self, id: i32) -> Result<(), Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/dcim/front-ports/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.delete(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        client.execute(req)?.error_for_status()?;
        Ok(())
    }

    fn dcim_front_ports_list(
        &self,
        id: Option<&str>,
        name: Option<&str>,
        _type: Option<&str>,
        description: Option<&str>,
        q: Option<&str>,
        region_id: Option<&str>,
        region: Option<&str>,
        site_id: Option<&str>,
        site: Option<&str>,
        device_id: Option<&str>,
        device: Option<&str>,
        tag: Option<&str>,
        cabled: Option<&str>,
        id__n: Option<&str>,
        id__lte: Option<&str>,
        id__lt: Option<&str>,
        id__gte: Option<&str>,
        id__gt: Option<&str>,
        name__n: Option<&str>,
        name__ic: Option<&str>,
        name__nic: Option<&str>,
        name__iew: Option<&str>,
        name__niew: Option<&str>,
        name__isw: Option<&str>,
        name__nisw: Option<&str>,
        name__ie: Option<&str>,
        name__nie: Option<&str>,
        type__n: Option<&str>,
        description__n: Option<&str>,
        description__ic: Option<&str>,
        description__nic: Option<&str>,
        description__iew: Option<&str>,
        description__niew: Option<&str>,
        description__isw: Option<&str>,
        description__nisw: Option<&str>,
        description__ie: Option<&str>,
        description__nie: Option<&str>,
        region_id__n: Option<&str>,
        region__n: Option<&str>,
        site_id__n: Option<&str>,
        site__n: Option<&str>,
        device_id__n: Option<&str>,
        device__n: Option<&str>,
        tag__n: Option<&str>,
        limit: Option<i32>,
        offset: Option<i32>,
    ) -> Result<crate::models::InlineResponse20015, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/dcim/front-ports/", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = id {
            req_builder = req_builder.query(&[("id", &s.to_string())]);
        }
        if let Some(ref s) = name {
            req_builder = req_builder.query(&[("name", &s.to_string())]);
        }
        if let Some(ref s) = _type {
            req_builder = req_builder.query(&[("type", &s.to_string())]);
        }
        if let Some(ref s) = description {
            req_builder = req_builder.query(&[("description", &s.to_string())]);
        }
        if let Some(ref s) = q {
            req_builder = req_builder.query(&[("q", &s.to_string())]);
        }
        if let Some(ref s) = region_id {
            req_builder = req_builder.query(&[("region_id", &s.to_string())]);
        }
        if let Some(ref s) = region {
            req_builder = req_builder.query(&[("region", &s.to_string())]);
        }
        if let Some(ref s) = site_id {
            req_builder = req_builder.query(&[("site_id", &s.to_string())]);
        }
        if let Some(ref s) = site {
            req_builder = req_builder.query(&[("site", &s.to_string())]);
        }
        if let Some(ref s) = device_id {
            req_builder = req_builder.query(&[("device_id", &s.to_string())]);
        }
        if let Some(ref s) = device {
            req_builder = req_builder.query(&[("device", &s.to_string())]);
        }
        if let Some(ref s) = tag {
            req_builder = req_builder.query(&[("tag", &s.to_string())]);
        }
        if let Some(ref s) = cabled {
            req_builder = req_builder.query(&[("cabled", &s.to_string())]);
        }
        if let Some(ref s) = id__n {
            req_builder = req_builder.query(&[("id__n", &s.to_string())]);
        }
        if let Some(ref s) = id__lte {
            req_builder = req_builder.query(&[("id__lte", &s.to_string())]);
        }
        if let Some(ref s) = id__lt {
            req_builder = req_builder.query(&[("id__lt", &s.to_string())]);
        }
        if let Some(ref s) = id__gte {
            req_builder = req_builder.query(&[("id__gte", &s.to_string())]);
        }
        if let Some(ref s) = id__gt {
            req_builder = req_builder.query(&[("id__gt", &s.to_string())]);
        }
        if let Some(ref s) = name__n {
            req_builder = req_builder.query(&[("name__n", &s.to_string())]);
        }
        if let Some(ref s) = name__ic {
            req_builder = req_builder.query(&[("name__ic", &s.to_string())]);
        }
        if let Some(ref s) = name__nic {
            req_builder = req_builder.query(&[("name__nic", &s.to_string())]);
        }
        if let Some(ref s) = name__iew {
            req_builder = req_builder.query(&[("name__iew", &s.to_string())]);
        }
        if let Some(ref s) = name__niew {
            req_builder = req_builder.query(&[("name__niew", &s.to_string())]);
        }
        if let Some(ref s) = name__isw {
            req_builder = req_builder.query(&[("name__isw", &s.to_string())]);
        }
        if let Some(ref s) = name__nisw {
            req_builder = req_builder.query(&[("name__nisw", &s.to_string())]);
        }
        if let Some(ref s) = name__ie {
            req_builder = req_builder.query(&[("name__ie", &s.to_string())]);
        }
        if let Some(ref s) = name__nie {
            req_builder = req_builder.query(&[("name__nie", &s.to_string())]);
        }
        if let Some(ref s) = type__n {
            req_builder = req_builder.query(&[("type__n", &s.to_string())]);
        }
        if let Some(ref s) = description__n {
            req_builder = req_builder.query(&[("description__n", &s.to_string())]);
        }
        if let Some(ref s) = description__ic {
            req_builder = req_builder.query(&[("description__ic", &s.to_string())]);
        }
        if let Some(ref s) = description__nic {
            req_builder = req_builder.query(&[("description__nic", &s.to_string())]);
        }
        if let Some(ref s) = description__iew {
            req_builder = req_builder.query(&[("description__iew", &s.to_string())]);
        }
        if let Some(ref s) = description__niew {
            req_builder = req_builder.query(&[("description__niew", &s.to_string())]);
        }
        if let Some(ref s) = description__isw {
            req_builder = req_builder.query(&[("description__isw", &s.to_string())]);
        }
        if let Some(ref s) = description__nisw {
            req_builder = req_builder.query(&[("description__nisw", &s.to_string())]);
        }
        if let Some(ref s) = description__ie {
            req_builder = req_builder.query(&[("description__ie", &s.to_string())]);
        }
        if let Some(ref s) = description__nie {
            req_builder = req_builder.query(&[("description__nie", &s.to_string())]);
        }
        if let Some(ref s) = region_id__n {
            req_builder = req_builder.query(&[("region_id__n", &s.to_string())]);
        }
        if let Some(ref s) = region__n {
            req_builder = req_builder.query(&[("region__n", &s.to_string())]);
        }
        if let Some(ref s) = site_id__n {
            req_builder = req_builder.query(&[("site_id__n", &s.to_string())]);
        }
        if let Some(ref s) = site__n {
            req_builder = req_builder.query(&[("site__n", &s.to_string())]);
        }
        if let Some(ref s) = device_id__n {
            req_builder = req_builder.query(&[("device_id__n", &s.to_string())]);
        }
        if let Some(ref s) = device__n {
            req_builder = req_builder.query(&[("device__n", &s.to_string())]);
        }
        if let Some(ref s) = tag__n {
            req_builder = req_builder.query(&[("tag__n", &s.to_string())]);
        }
        if let Some(ref s) = limit {
            req_builder = req_builder.query(&[("limit", &s.to_string())]);
        }
        if let Some(ref s) = offset {
            req_builder = req_builder.query(&[("offset", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_front_ports_partial_update(
        &self,
        id: i32,
        data: crate::models::WritableFrontPort,
    ) -> Result<crate::models::FrontPort, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/dcim/front-ports/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.patch(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_front_ports_read(&self, id: i32) -> Result<crate::models::FrontPort, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/dcim/front-ports/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_front_ports_update(
        &self,
        id: i32,
        data: crate::models::WritableFrontPort,
    ) -> Result<crate::models::FrontPort, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/dcim/front-ports/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.put(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_interface_connections_list(
        &self,
        connection_status: Option<&str>,
        site: Option<&str>,
        device_id: Option<&str>,
        device: Option<&str>,
        connection_status__n: Option<&str>,
        limit: Option<i32>,
        offset: Option<i32>,
    ) -> Result<crate::models::InlineResponse20016, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/dcim/interface-connections/", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = connection_status {
            req_builder = req_builder.query(&[("connection_status", &s.to_string())]);
        }
        if let Some(ref s) = site {
            req_builder = req_builder.query(&[("site", &s.to_string())]);
        }
        if let Some(ref s) = device_id {
            req_builder = req_builder.query(&[("device_id", &s.to_string())]);
        }
        if let Some(ref s) = device {
            req_builder = req_builder.query(&[("device", &s.to_string())]);
        }
        if let Some(ref s) = connection_status__n {
            req_builder = req_builder.query(&[("connection_status__n", &s.to_string())]);
        }
        if let Some(ref s) = limit {
            req_builder = req_builder.query(&[("limit", &s.to_string())]);
        }
        if let Some(ref s) = offset {
            req_builder = req_builder.query(&[("offset", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_interface_templates_create(
        &self,
        data: crate::models::WritableInterfaceTemplate,
    ) -> Result<crate::models::InterfaceTemplate, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/dcim/interface-templates/", configuration.base_path);
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_interface_templates_delete(&self, id: i32) -> Result<(), Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/dcim/interface-templates/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.delete(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        client.execute(req)?.error_for_status()?;
        Ok(())
    }

    fn dcim_interface_templates_list(
        &self,
        id: Option<&str>,
        name: Option<&str>,
        _type: Option<&str>,
        mgmt_only: Option<&str>,
        q: Option<&str>,
        devicetype_id: Option<&str>,
        id__n: Option<&str>,
        id__lte: Option<&str>,
        id__lt: Option<&str>,
        id__gte: Option<&str>,
        id__gt: Option<&str>,
        name__n: Option<&str>,
        name__ic: Option<&str>,
        name__nic: Option<&str>,
        name__iew: Option<&str>,
        name__niew: Option<&str>,
        name__isw: Option<&str>,
        name__nisw: Option<&str>,
        name__ie: Option<&str>,
        name__nie: Option<&str>,
        type__n: Option<&str>,
        devicetype_id__n: Option<&str>,
        limit: Option<i32>,
        offset: Option<i32>,
    ) -> Result<crate::models::InlineResponse20017, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/dcim/interface-templates/", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = id {
            req_builder = req_builder.query(&[("id", &s.to_string())]);
        }
        if let Some(ref s) = name {
            req_builder = req_builder.query(&[("name", &s.to_string())]);
        }
        if let Some(ref s) = _type {
            req_builder = req_builder.query(&[("type", &s.to_string())]);
        }
        if let Some(ref s) = mgmt_only {
            req_builder = req_builder.query(&[("mgmt_only", &s.to_string())]);
        }
        if let Some(ref s) = q {
            req_builder = req_builder.query(&[("q", &s.to_string())]);
        }
        if let Some(ref s) = devicetype_id {
            req_builder = req_builder.query(&[("devicetype_id", &s.to_string())]);
        }
        if let Some(ref s) = id__n {
            req_builder = req_builder.query(&[("id__n", &s.to_string())]);
        }
        if let Some(ref s) = id__lte {
            req_builder = req_builder.query(&[("id__lte", &s.to_string())]);
        }
        if let Some(ref s) = id__lt {
            req_builder = req_builder.query(&[("id__lt", &s.to_string())]);
        }
        if let Some(ref s) = id__gte {
            req_builder = req_builder.query(&[("id__gte", &s.to_string())]);
        }
        if let Some(ref s) = id__gt {
            req_builder = req_builder.query(&[("id__gt", &s.to_string())]);
        }
        if let Some(ref s) = name__n {
            req_builder = req_builder.query(&[("name__n", &s.to_string())]);
        }
        if let Some(ref s) = name__ic {
            req_builder = req_builder.query(&[("name__ic", &s.to_string())]);
        }
        if let Some(ref s) = name__nic {
            req_builder = req_builder.query(&[("name__nic", &s.to_string())]);
        }
        if let Some(ref s) = name__iew {
            req_builder = req_builder.query(&[("name__iew", &s.to_string())]);
        }
        if let Some(ref s) = name__niew {
            req_builder = req_builder.query(&[("name__niew", &s.to_string())]);
        }
        if let Some(ref s) = name__isw {
            req_builder = req_builder.query(&[("name__isw", &s.to_string())]);
        }
        if let Some(ref s) = name__nisw {
            req_builder = req_builder.query(&[("name__nisw", &s.to_string())]);
        }
        if let Some(ref s) = name__ie {
            req_builder = req_builder.query(&[("name__ie", &s.to_string())]);
        }
        if let Some(ref s) = name__nie {
            req_builder = req_builder.query(&[("name__nie", &s.to_string())]);
        }
        if let Some(ref s) = type__n {
            req_builder = req_builder.query(&[("type__n", &s.to_string())]);
        }
        if let Some(ref s) = devicetype_id__n {
            req_builder = req_builder.query(&[("devicetype_id__n", &s.to_string())]);
        }
        if let Some(ref s) = limit {
            req_builder = req_builder.query(&[("limit", &s.to_string())]);
        }
        if let Some(ref s) = offset {
            req_builder = req_builder.query(&[("offset", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_interface_templates_partial_update(
        &self,
        id: i32,
        data: crate::models::WritableInterfaceTemplate,
    ) -> Result<crate::models::InterfaceTemplate, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/dcim/interface-templates/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.patch(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_interface_templates_read(
        &self,
        id: i32,
    ) -> Result<crate::models::InterfaceTemplate, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/dcim/interface-templates/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_interface_templates_update(
        &self,
        id: i32,
        data: crate::models::WritableInterfaceTemplate,
    ) -> Result<crate::models::InterfaceTemplate, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/dcim/interface-templates/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.put(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_interfaces_create(
        &self,
        data: crate::models::WritableDeviceInterface,
    ) -> Result<crate::models::DeviceInterface, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/dcim/interfaces/", configuration.base_path);
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_interfaces_delete(&self, id: i32) -> Result<(), Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/dcim/interfaces/{id}/", configuration.base_path, id = id);
        let mut req_builder = client.delete(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        client.execute(req)?.error_for_status()?;
        Ok(())
    }

    fn dcim_interfaces_graphs(&self, id: i32) -> Result<crate::models::DeviceInterface, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/dcim/interfaces/{id}/graphs/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_interfaces_list(
        &self,
        id: Option<&str>,
        name: Option<&str>,
        connection_status: Option<&str>,
        _type: Option<&str>,
        enabled: Option<&str>,
        mtu: Option<&str>,
        mgmt_only: Option<&str>,
        mode: Option<&str>,
        description: Option<&str>,
        q: Option<&str>,
        region_id: Option<&str>,
        region: Option<&str>,
        site_id: Option<&str>,
        site: Option<&str>,
        device_id: Option<&str>,
        device: Option<&str>,
        tag: Option<&str>,
        cabled: Option<&str>,
        kind: Option<&str>,
        lag_id: Option<&str>,
        mac_address: Option<&str>,
        vlan_id: Option<&str>,
        vlan: Option<&str>,
        id__n: Option<&str>,
        id__lte: Option<&str>,
        id__lt: Option<&str>,
        id__gte: Option<&str>,
        id__gt: Option<&str>,
        name__n: Option<&str>,
        name__ic: Option<&str>,
        name__nic: Option<&str>,
        name__iew: Option<&str>,
        name__niew: Option<&str>,
        name__isw: Option<&str>,
        name__nisw: Option<&str>,
        name__ie: Option<&str>,
        name__nie: Option<&str>,
        connection_status__n: Option<&str>,
        type__n: Option<&str>,
        mtu__n: Option<&str>,
        mtu__lte: Option<&str>,
        mtu__lt: Option<&str>,
        mtu__gte: Option<&str>,
        mtu__gt: Option<&str>,
        mode__n: Option<&str>,
        description__n: Option<&str>,
        description__ic: Option<&str>,
        description__nic: Option<&str>,
        description__iew: Option<&str>,
        description__niew: Option<&str>,
        description__isw: Option<&str>,
        description__nisw: Option<&str>,
        description__ie: Option<&str>,
        description__nie: Option<&str>,
        region_id__n: Option<&str>,
        region__n: Option<&str>,
        site_id__n: Option<&str>,
        site__n: Option<&str>,
        tag__n: Option<&str>,
        lag_id__n: Option<&str>,
        mac_address__n: Option<&str>,
        mac_address__ic: Option<&str>,
        mac_address__nic: Option<&str>,
        mac_address__iew: Option<&str>,
        mac_address__niew: Option<&str>,
        mac_address__isw: Option<&str>,
        mac_address__nisw: Option<&str>,
        mac_address__ie: Option<&str>,
        mac_address__nie: Option<&str>,
        limit: Option<i32>,
        offset: Option<i32>,
    ) -> Result<crate::models::InlineResponse20018, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/dcim/interfaces/", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = id {
            req_builder = req_builder.query(&[("id", &s.to_string())]);
        }
        if let Some(ref s) = name {
            req_builder = req_builder.query(&[("name", &s.to_string())]);
        }
        if let Some(ref s) = connection_status {
            req_builder = req_builder.query(&[("connection_status", &s.to_string())]);
        }
        if let Some(ref s) = _type {
            req_builder = req_builder.query(&[("type", &s.to_string())]);
        }
        if let Some(ref s) = enabled {
            req_builder = req_builder.query(&[("enabled", &s.to_string())]);
        }
        if let Some(ref s) = mtu {
            req_builder = req_builder.query(&[("mtu", &s.to_string())]);
        }
        if let Some(ref s) = mgmt_only {
            req_builder = req_builder.query(&[("mgmt_only", &s.to_string())]);
        }
        if let Some(ref s) = mode {
            req_builder = req_builder.query(&[("mode", &s.to_string())]);
        }
        if let Some(ref s) = description {
            req_builder = req_builder.query(&[("description", &s.to_string())]);
        }
        if let Some(ref s) = q {
            req_builder = req_builder.query(&[("q", &s.to_string())]);
        }
        if let Some(ref s) = region_id {
            req_builder = req_builder.query(&[("region_id", &s.to_string())]);
        }
        if let Some(ref s) = region {
            req_builder = req_builder.query(&[("region", &s.to_string())]);
        }
        if let Some(ref s) = site_id {
            req_builder = req_builder.query(&[("site_id", &s.to_string())]);
        }
        if let Some(ref s) = site {
            req_builder = req_builder.query(&[("site", &s.to_string())]);
        }
        if let Some(ref s) = device_id {
            req_builder = req_builder.query(&[("device_id", &s.to_string())]);
        }
        if let Some(ref s) = device {
            req_builder = req_builder.query(&[("device", &s.to_string())]);
        }
        if let Some(ref s) = tag {
            req_builder = req_builder.query(&[("tag", &s.to_string())]);
        }
        if let Some(ref s) = cabled {
            req_builder = req_builder.query(&[("cabled", &s.to_string())]);
        }
        if let Some(ref s) = kind {
            req_builder = req_builder.query(&[("kind", &s.to_string())]);
        }
        if let Some(ref s) = lag_id {
            req_builder = req_builder.query(&[("lag_id", &s.to_string())]);
        }
        if let Some(ref s) = mac_address {
            req_builder = req_builder.query(&[("mac_address", &s.to_string())]);
        }
        if let Some(ref s) = vlan_id {
            req_builder = req_builder.query(&[("vlan_id", &s.to_string())]);
        }
        if let Some(ref s) = vlan {
            req_builder = req_builder.query(&[("vlan", &s.to_string())]);
        }
        if let Some(ref s) = id__n {
            req_builder = req_builder.query(&[("id__n", &s.to_string())]);
        }
        if let Some(ref s) = id__lte {
            req_builder = req_builder.query(&[("id__lte", &s.to_string())]);
        }
        if let Some(ref s) = id__lt {
            req_builder = req_builder.query(&[("id__lt", &s.to_string())]);
        }
        if let Some(ref s) = id__gte {
            req_builder = req_builder.query(&[("id__gte", &s.to_string())]);
        }
        if let Some(ref s) = id__gt {
            req_builder = req_builder.query(&[("id__gt", &s.to_string())]);
        }
        if let Some(ref s) = name__n {
            req_builder = req_builder.query(&[("name__n", &s.to_string())]);
        }
        if let Some(ref s) = name__ic {
            req_builder = req_builder.query(&[("name__ic", &s.to_string())]);
        }
        if let Some(ref s) = name__nic {
            req_builder = req_builder.query(&[("name__nic", &s.to_string())]);
        }
        if let Some(ref s) = name__iew {
            req_builder = req_builder.query(&[("name__iew", &s.to_string())]);
        }
        if let Some(ref s) = name__niew {
            req_builder = req_builder.query(&[("name__niew", &s.to_string())]);
        }
        if let Some(ref s) = name__isw {
            req_builder = req_builder.query(&[("name__isw", &s.to_string())]);
        }
        if let Some(ref s) = name__nisw {
            req_builder = req_builder.query(&[("name__nisw", &s.to_string())]);
        }
        if let Some(ref s) = name__ie {
            req_builder = req_builder.query(&[("name__ie", &s.to_string())]);
        }
        if let Some(ref s) = name__nie {
            req_builder = req_builder.query(&[("name__nie", &s.to_string())]);
        }
        if let Some(ref s) = connection_status__n {
            req_builder = req_builder.query(&[("connection_status__n", &s.to_string())]);
        }
        if let Some(ref s) = type__n {
            req_builder = req_builder.query(&[("type__n", &s.to_string())]);
        }
        if let Some(ref s) = mtu__n {
            req_builder = req_builder.query(&[("mtu__n", &s.to_string())]);
        }
        if let Some(ref s) = mtu__lte {
            req_builder = req_builder.query(&[("mtu__lte", &s.to_string())]);
        }
        if let Some(ref s) = mtu__lt {
            req_builder = req_builder.query(&[("mtu__lt", &s.to_string())]);
        }
        if let Some(ref s) = mtu__gte {
            req_builder = req_builder.query(&[("mtu__gte", &s.to_string())]);
        }
        if let Some(ref s) = mtu__gt {
            req_builder = req_builder.query(&[("mtu__gt", &s.to_string())]);
        }
        if let Some(ref s) = mode__n {
            req_builder = req_builder.query(&[("mode__n", &s.to_string())]);
        }
        if let Some(ref s) = description__n {
            req_builder = req_builder.query(&[("description__n", &s.to_string())]);
        }
        if let Some(ref s) = description__ic {
            req_builder = req_builder.query(&[("description__ic", &s.to_string())]);
        }
        if let Some(ref s) = description__nic {
            req_builder = req_builder.query(&[("description__nic", &s.to_string())]);
        }
        if let Some(ref s) = description__iew {
            req_builder = req_builder.query(&[("description__iew", &s.to_string())]);
        }
        if let Some(ref s) = description__niew {
            req_builder = req_builder.query(&[("description__niew", &s.to_string())]);
        }
        if let Some(ref s) = description__isw {
            req_builder = req_builder.query(&[("description__isw", &s.to_string())]);
        }
        if let Some(ref s) = description__nisw {
            req_builder = req_builder.query(&[("description__nisw", &s.to_string())]);
        }
        if let Some(ref s) = description__ie {
            req_builder = req_builder.query(&[("description__ie", &s.to_string())]);
        }
        if let Some(ref s) = description__nie {
            req_builder = req_builder.query(&[("description__nie", &s.to_string())]);
        }
        if let Some(ref s) = region_id__n {
            req_builder = req_builder.query(&[("region_id__n", &s.to_string())]);
        }
        if let Some(ref s) = region__n {
            req_builder = req_builder.query(&[("region__n", &s.to_string())]);
        }
        if let Some(ref s) = site_id__n {
            req_builder = req_builder.query(&[("site_id__n", &s.to_string())]);
        }
        if let Some(ref s) = site__n {
            req_builder = req_builder.query(&[("site__n", &s.to_string())]);
        }
        if let Some(ref s) = tag__n {
            req_builder = req_builder.query(&[("tag__n", &s.to_string())]);
        }
        if let Some(ref s) = lag_id__n {
            req_builder = req_builder.query(&[("lag_id__n", &s.to_string())]);
        }
        if let Some(ref s) = mac_address__n {
            req_builder = req_builder.query(&[("mac_address__n", &s.to_string())]);
        }
        if let Some(ref s) = mac_address__ic {
            req_builder = req_builder.query(&[("mac_address__ic", &s.to_string())]);
        }
        if let Some(ref s) = mac_address__nic {
            req_builder = req_builder.query(&[("mac_address__nic", &s.to_string())]);
        }
        if let Some(ref s) = mac_address__iew {
            req_builder = req_builder.query(&[("mac_address__iew", &s.to_string())]);
        }
        if let Some(ref s) = mac_address__niew {
            req_builder = req_builder.query(&[("mac_address__niew", &s.to_string())]);
        }
        if let Some(ref s) = mac_address__isw {
            req_builder = req_builder.query(&[("mac_address__isw", &s.to_string())]);
        }
        if let Some(ref s) = mac_address__nisw {
            req_builder = req_builder.query(&[("mac_address__nisw", &s.to_string())]);
        }
        if let Some(ref s) = mac_address__ie {
            req_builder = req_builder.query(&[("mac_address__ie", &s.to_string())]);
        }
        if let Some(ref s) = mac_address__nie {
            req_builder = req_builder.query(&[("mac_address__nie", &s.to_string())]);
        }
        if let Some(ref s) = limit {
            req_builder = req_builder.query(&[("limit", &s.to_string())]);
        }
        if let Some(ref s) = offset {
            req_builder = req_builder.query(&[("offset", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_interfaces_partial_update(
        &self,
        id: i32,
        data: crate::models::WritableDeviceInterface,
    ) -> Result<crate::models::DeviceInterface, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/dcim/interfaces/{id}/", configuration.base_path, id = id);
        let mut req_builder = client.patch(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_interfaces_read(&self, id: i32) -> Result<crate::models::DeviceInterface, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/dcim/interfaces/{id}/", configuration.base_path, id = id);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_interfaces_trace(&self, id: i32) -> Result<crate::models::DeviceInterface, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/dcim/interfaces/{id}/trace/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_interfaces_update(
        &self,
        id: i32,
        data: crate::models::WritableDeviceInterface,
    ) -> Result<crate::models::DeviceInterface, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/dcim/interfaces/{id}/", configuration.base_path, id = id);
        let mut req_builder = client.put(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_inventory_items_create(
        &self,
        data: crate::models::WritableInventoryItem,
    ) -> Result<crate::models::InventoryItem, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/dcim/inventory-items/", configuration.base_path);
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_inventory_items_delete(&self, id: i32) -> Result<(), Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/dcim/inventory-items/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.delete(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        client.execute(req)?.error_for_status()?;
        Ok(())
    }

    fn dcim_inventory_items_list(
        &self,
        id: Option<&str>,
        name: Option<&str>,
        part_id: Option<&str>,
        asset_tag: Option<&str>,
        discovered: Option<&str>,
        q: Option<&str>,
        region_id: Option<&str>,
        region: Option<&str>,
        site_id: Option<&str>,
        site: Option<&str>,
        device_id: Option<&str>,
        device: Option<&str>,
        tag: Option<&str>,
        parent_id: Option<&str>,
        manufacturer_id: Option<&str>,
        manufacturer: Option<&str>,
        serial: Option<&str>,
        id__n: Option<&str>,
        id__lte: Option<&str>,
        id__lt: Option<&str>,
        id__gte: Option<&str>,
        id__gt: Option<&str>,
        name__n: Option<&str>,
        name__ic: Option<&str>,
        name__nic: Option<&str>,
        name__iew: Option<&str>,
        name__niew: Option<&str>,
        name__isw: Option<&str>,
        name__nisw: Option<&str>,
        name__ie: Option<&str>,
        name__nie: Option<&str>,
        part_id__n: Option<&str>,
        part_id__ic: Option<&str>,
        part_id__nic: Option<&str>,
        part_id__iew: Option<&str>,
        part_id__niew: Option<&str>,
        part_id__isw: Option<&str>,
        part_id__nisw: Option<&str>,
        part_id__ie: Option<&str>,
        part_id__nie: Option<&str>,
        asset_tag__n: Option<&str>,
        asset_tag__ic: Option<&str>,
        asset_tag__nic: Option<&str>,
        asset_tag__iew: Option<&str>,
        asset_tag__niew: Option<&str>,
        asset_tag__isw: Option<&str>,
        asset_tag__nisw: Option<&str>,
        asset_tag__ie: Option<&str>,
        asset_tag__nie: Option<&str>,
        region_id__n: Option<&str>,
        region__n: Option<&str>,
        site_id__n: Option<&str>,
        site__n: Option<&str>,
        device_id__n: Option<&str>,
        device__n: Option<&str>,
        tag__n: Option<&str>,
        parent_id__n: Option<&str>,
        manufacturer_id__n: Option<&str>,
        manufacturer__n: Option<&str>,
        limit: Option<i32>,
        offset: Option<i32>,
    ) -> Result<crate::models::InlineResponse20019, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/dcim/inventory-items/", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = id {
            req_builder = req_builder.query(&[("id", &s.to_string())]);
        }
        if let Some(ref s) = name {
            req_builder = req_builder.query(&[("name", &s.to_string())]);
        }
        if let Some(ref s) = part_id {
            req_builder = req_builder.query(&[("part_id", &s.to_string())]);
        }
        if let Some(ref s) = asset_tag {
            req_builder = req_builder.query(&[("asset_tag", &s.to_string())]);
        }
        if let Some(ref s) = discovered {
            req_builder = req_builder.query(&[("discovered", &s.to_string())]);
        }
        if let Some(ref s) = q {
            req_builder = req_builder.query(&[("q", &s.to_string())]);
        }
        if let Some(ref s) = region_id {
            req_builder = req_builder.query(&[("region_id", &s.to_string())]);
        }
        if let Some(ref s) = region {
            req_builder = req_builder.query(&[("region", &s.to_string())]);
        }
        if let Some(ref s) = site_id {
            req_builder = req_builder.query(&[("site_id", &s.to_string())]);
        }
        if let Some(ref s) = site {
            req_builder = req_builder.query(&[("site", &s.to_string())]);
        }
        if let Some(ref s) = device_id {
            req_builder = req_builder.query(&[("device_id", &s.to_string())]);
        }
        if let Some(ref s) = device {
            req_builder = req_builder.query(&[("device", &s.to_string())]);
        }
        if let Some(ref s) = tag {
            req_builder = req_builder.query(&[("tag", &s.to_string())]);
        }
        if let Some(ref s) = parent_id {
            req_builder = req_builder.query(&[("parent_id", &s.to_string())]);
        }
        if let Some(ref s) = manufacturer_id {
            req_builder = req_builder.query(&[("manufacturer_id", &s.to_string())]);
        }
        if let Some(ref s) = manufacturer {
            req_builder = req_builder.query(&[("manufacturer", &s.to_string())]);
        }
        if let Some(ref s) = serial {
            req_builder = req_builder.query(&[("serial", &s.to_string())]);
        }
        if let Some(ref s) = id__n {
            req_builder = req_builder.query(&[("id__n", &s.to_string())]);
        }
        if let Some(ref s) = id__lte {
            req_builder = req_builder.query(&[("id__lte", &s.to_string())]);
        }
        if let Some(ref s) = id__lt {
            req_builder = req_builder.query(&[("id__lt", &s.to_string())]);
        }
        if let Some(ref s) = id__gte {
            req_builder = req_builder.query(&[("id__gte", &s.to_string())]);
        }
        if let Some(ref s) = id__gt {
            req_builder = req_builder.query(&[("id__gt", &s.to_string())]);
        }
        if let Some(ref s) = name__n {
            req_builder = req_builder.query(&[("name__n", &s.to_string())]);
        }
        if let Some(ref s) = name__ic {
            req_builder = req_builder.query(&[("name__ic", &s.to_string())]);
        }
        if let Some(ref s) = name__nic {
            req_builder = req_builder.query(&[("name__nic", &s.to_string())]);
        }
        if let Some(ref s) = name__iew {
            req_builder = req_builder.query(&[("name__iew", &s.to_string())]);
        }
        if let Some(ref s) = name__niew {
            req_builder = req_builder.query(&[("name__niew", &s.to_string())]);
        }
        if let Some(ref s) = name__isw {
            req_builder = req_builder.query(&[("name__isw", &s.to_string())]);
        }
        if let Some(ref s) = name__nisw {
            req_builder = req_builder.query(&[("name__nisw", &s.to_string())]);
        }
        if let Some(ref s) = name__ie {
            req_builder = req_builder.query(&[("name__ie", &s.to_string())]);
        }
        if let Some(ref s) = name__nie {
            req_builder = req_builder.query(&[("name__nie", &s.to_string())]);
        }
        if let Some(ref s) = part_id__n {
            req_builder = req_builder.query(&[("part_id__n", &s.to_string())]);
        }
        if let Some(ref s) = part_id__ic {
            req_builder = req_builder.query(&[("part_id__ic", &s.to_string())]);
        }
        if let Some(ref s) = part_id__nic {
            req_builder = req_builder.query(&[("part_id__nic", &s.to_string())]);
        }
        if let Some(ref s) = part_id__iew {
            req_builder = req_builder.query(&[("part_id__iew", &s.to_string())]);
        }
        if let Some(ref s) = part_id__niew {
            req_builder = req_builder.query(&[("part_id__niew", &s.to_string())]);
        }
        if let Some(ref s) = part_id__isw {
            req_builder = req_builder.query(&[("part_id__isw", &s.to_string())]);
        }
        if let Some(ref s) = part_id__nisw {
            req_builder = req_builder.query(&[("part_id__nisw", &s.to_string())]);
        }
        if let Some(ref s) = part_id__ie {
            req_builder = req_builder.query(&[("part_id__ie", &s.to_string())]);
        }
        if let Some(ref s) = part_id__nie {
            req_builder = req_builder.query(&[("part_id__nie", &s.to_string())]);
        }
        if let Some(ref s) = asset_tag__n {
            req_builder = req_builder.query(&[("asset_tag__n", &s.to_string())]);
        }
        if let Some(ref s) = asset_tag__ic {
            req_builder = req_builder.query(&[("asset_tag__ic", &s.to_string())]);
        }
        if let Some(ref s) = asset_tag__nic {
            req_builder = req_builder.query(&[("asset_tag__nic", &s.to_string())]);
        }
        if let Some(ref s) = asset_tag__iew {
            req_builder = req_builder.query(&[("asset_tag__iew", &s.to_string())]);
        }
        if let Some(ref s) = asset_tag__niew {
            req_builder = req_builder.query(&[("asset_tag__niew", &s.to_string())]);
        }
        if let Some(ref s) = asset_tag__isw {
            req_builder = req_builder.query(&[("asset_tag__isw", &s.to_string())]);
        }
        if let Some(ref s) = asset_tag__nisw {
            req_builder = req_builder.query(&[("asset_tag__nisw", &s.to_string())]);
        }
        if let Some(ref s) = asset_tag__ie {
            req_builder = req_builder.query(&[("asset_tag__ie", &s.to_string())]);
        }
        if let Some(ref s) = asset_tag__nie {
            req_builder = req_builder.query(&[("asset_tag__nie", &s.to_string())]);
        }
        if let Some(ref s) = region_id__n {
            req_builder = req_builder.query(&[("region_id__n", &s.to_string())]);
        }
        if let Some(ref s) = region__n {
            req_builder = req_builder.query(&[("region__n", &s.to_string())]);
        }
        if let Some(ref s) = site_id__n {
            req_builder = req_builder.query(&[("site_id__n", &s.to_string())]);
        }
        if let Some(ref s) = site__n {
            req_builder = req_builder.query(&[("site__n", &s.to_string())]);
        }
        if let Some(ref s) = device_id__n {
            req_builder = req_builder.query(&[("device_id__n", &s.to_string())]);
        }
        if let Some(ref s) = device__n {
            req_builder = req_builder.query(&[("device__n", &s.to_string())]);
        }
        if let Some(ref s) = tag__n {
            req_builder = req_builder.query(&[("tag__n", &s.to_string())]);
        }
        if let Some(ref s) = parent_id__n {
            req_builder = req_builder.query(&[("parent_id__n", &s.to_string())]);
        }
        if let Some(ref s) = manufacturer_id__n {
            req_builder = req_builder.query(&[("manufacturer_id__n", &s.to_string())]);
        }
        if let Some(ref s) = manufacturer__n {
            req_builder = req_builder.query(&[("manufacturer__n", &s.to_string())]);
        }
        if let Some(ref s) = limit {
            req_builder = req_builder.query(&[("limit", &s.to_string())]);
        }
        if let Some(ref s) = offset {
            req_builder = req_builder.query(&[("offset", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_inventory_items_partial_update(
        &self,
        id: i32,
        data: crate::models::WritableInventoryItem,
    ) -> Result<crate::models::InventoryItem, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/dcim/inventory-items/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.patch(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_inventory_items_read(&self, id: i32) -> Result<crate::models::InventoryItem, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/dcim/inventory-items/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_inventory_items_update(
        &self,
        id: i32,
        data: crate::models::WritableInventoryItem,
    ) -> Result<crate::models::InventoryItem, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/dcim/inventory-items/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.put(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_manufacturers_create(
        &self,
        data: crate::models::Manufacturer,
    ) -> Result<crate::models::Manufacturer, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/dcim/manufacturers/", configuration.base_path);
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_manufacturers_delete(&self, id: i32) -> Result<(), Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/dcim/manufacturers/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.delete(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        client.execute(req)?.error_for_status()?;
        Ok(())
    }

    fn dcim_manufacturers_list(
        &self,
        id: Option<&str>,
        name: Option<&str>,
        slug: Option<&str>,
        q: Option<&str>,
        id__n: Option<&str>,
        id__lte: Option<&str>,
        id__lt: Option<&str>,
        id__gte: Option<&str>,
        id__gt: Option<&str>,
        name__n: Option<&str>,
        name__ic: Option<&str>,
        name__nic: Option<&str>,
        name__iew: Option<&str>,
        name__niew: Option<&str>,
        name__isw: Option<&str>,
        name__nisw: Option<&str>,
        name__ie: Option<&str>,
        name__nie: Option<&str>,
        slug__n: Option<&str>,
        slug__ic: Option<&str>,
        slug__nic: Option<&str>,
        slug__iew: Option<&str>,
        slug__niew: Option<&str>,
        slug__isw: Option<&str>,
        slug__nisw: Option<&str>,
        slug__ie: Option<&str>,
        slug__nie: Option<&str>,
        limit: Option<i32>,
        offset: Option<i32>,
    ) -> Result<crate::models::InlineResponse20020, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/dcim/manufacturers/", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = id {
            req_builder = req_builder.query(&[("id", &s.to_string())]);
        }
        if let Some(ref s) = name {
            req_builder = req_builder.query(&[("name", &s.to_string())]);
        }
        if let Some(ref s) = slug {
            req_builder = req_builder.query(&[("slug", &s.to_string())]);
        }
        if let Some(ref s) = q {
            req_builder = req_builder.query(&[("q", &s.to_string())]);
        }
        if let Some(ref s) = id__n {
            req_builder = req_builder.query(&[("id__n", &s.to_string())]);
        }
        if let Some(ref s) = id__lte {
            req_builder = req_builder.query(&[("id__lte", &s.to_string())]);
        }
        if let Some(ref s) = id__lt {
            req_builder = req_builder.query(&[("id__lt", &s.to_string())]);
        }
        if let Some(ref s) = id__gte {
            req_builder = req_builder.query(&[("id__gte", &s.to_string())]);
        }
        if let Some(ref s) = id__gt {
            req_builder = req_builder.query(&[("id__gt", &s.to_string())]);
        }
        if let Some(ref s) = name__n {
            req_builder = req_builder.query(&[("name__n", &s.to_string())]);
        }
        if let Some(ref s) = name__ic {
            req_builder = req_builder.query(&[("name__ic", &s.to_string())]);
        }
        if let Some(ref s) = name__nic {
            req_builder = req_builder.query(&[("name__nic", &s.to_string())]);
        }
        if let Some(ref s) = name__iew {
            req_builder = req_builder.query(&[("name__iew", &s.to_string())]);
        }
        if let Some(ref s) = name__niew {
            req_builder = req_builder.query(&[("name__niew", &s.to_string())]);
        }
        if let Some(ref s) = name__isw {
            req_builder = req_builder.query(&[("name__isw", &s.to_string())]);
        }
        if let Some(ref s) = name__nisw {
            req_builder = req_builder.query(&[("name__nisw", &s.to_string())]);
        }
        if let Some(ref s) = name__ie {
            req_builder = req_builder.query(&[("name__ie", &s.to_string())]);
        }
        if let Some(ref s) = name__nie {
            req_builder = req_builder.query(&[("name__nie", &s.to_string())]);
        }
        if let Some(ref s) = slug__n {
            req_builder = req_builder.query(&[("slug__n", &s.to_string())]);
        }
        if let Some(ref s) = slug__ic {
            req_builder = req_builder.query(&[("slug__ic", &s.to_string())]);
        }
        if let Some(ref s) = slug__nic {
            req_builder = req_builder.query(&[("slug__nic", &s.to_string())]);
        }
        if let Some(ref s) = slug__iew {
            req_builder = req_builder.query(&[("slug__iew", &s.to_string())]);
        }
        if let Some(ref s) = slug__niew {
            req_builder = req_builder.query(&[("slug__niew", &s.to_string())]);
        }
        if let Some(ref s) = slug__isw {
            req_builder = req_builder.query(&[("slug__isw", &s.to_string())]);
        }
        if let Some(ref s) = slug__nisw {
            req_builder = req_builder.query(&[("slug__nisw", &s.to_string())]);
        }
        if let Some(ref s) = slug__ie {
            req_builder = req_builder.query(&[("slug__ie", &s.to_string())]);
        }
        if let Some(ref s) = slug__nie {
            req_builder = req_builder.query(&[("slug__nie", &s.to_string())]);
        }
        if let Some(ref s) = limit {
            req_builder = req_builder.query(&[("limit", &s.to_string())]);
        }
        if let Some(ref s) = offset {
            req_builder = req_builder.query(&[("offset", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_manufacturers_partial_update(
        &self,
        id: i32,
        data: crate::models::Manufacturer,
    ) -> Result<crate::models::Manufacturer, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/dcim/manufacturers/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.patch(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_manufacturers_read(&self, id: i32) -> Result<crate::models::Manufacturer, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/dcim/manufacturers/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_manufacturers_update(
        &self,
        id: i32,
        data: crate::models::Manufacturer,
    ) -> Result<crate::models::Manufacturer, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/dcim/manufacturers/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.put(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_platforms_create(
        &self,
        data: crate::models::WritablePlatform,
    ) -> Result<crate::models::Platform, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/dcim/platforms/", configuration.base_path);
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_platforms_delete(&self, id: i32) -> Result<(), Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/dcim/platforms/{id}/", configuration.base_path, id = id);
        let mut req_builder = client.delete(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        client.execute(req)?.error_for_status()?;
        Ok(())
    }

    fn dcim_platforms_list(
        &self,
        id: Option<&str>,
        name: Option<&str>,
        slug: Option<&str>,
        napalm_driver: Option<&str>,
        q: Option<&str>,
        manufacturer_id: Option<&str>,
        manufacturer: Option<&str>,
        id__n: Option<&str>,
        id__lte: Option<&str>,
        id__lt: Option<&str>,
        id__gte: Option<&str>,
        id__gt: Option<&str>,
        name__n: Option<&str>,
        name__ic: Option<&str>,
        name__nic: Option<&str>,
        name__iew: Option<&str>,
        name__niew: Option<&str>,
        name__isw: Option<&str>,
        name__nisw: Option<&str>,
        name__ie: Option<&str>,
        name__nie: Option<&str>,
        slug__n: Option<&str>,
        slug__ic: Option<&str>,
        slug__nic: Option<&str>,
        slug__iew: Option<&str>,
        slug__niew: Option<&str>,
        slug__isw: Option<&str>,
        slug__nisw: Option<&str>,
        slug__ie: Option<&str>,
        slug__nie: Option<&str>,
        napalm_driver__n: Option<&str>,
        napalm_driver__ic: Option<&str>,
        napalm_driver__nic: Option<&str>,
        napalm_driver__iew: Option<&str>,
        napalm_driver__niew: Option<&str>,
        napalm_driver__isw: Option<&str>,
        napalm_driver__nisw: Option<&str>,
        napalm_driver__ie: Option<&str>,
        napalm_driver__nie: Option<&str>,
        manufacturer_id__n: Option<&str>,
        manufacturer__n: Option<&str>,
        limit: Option<i32>,
        offset: Option<i32>,
    ) -> Result<crate::models::InlineResponse20021, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/dcim/platforms/", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = id {
            req_builder = req_builder.query(&[("id", &s.to_string())]);
        }
        if let Some(ref s) = name {
            req_builder = req_builder.query(&[("name", &s.to_string())]);
        }
        if let Some(ref s) = slug {
            req_builder = req_builder.query(&[("slug", &s.to_string())]);
        }
        if let Some(ref s) = napalm_driver {
            req_builder = req_builder.query(&[("napalm_driver", &s.to_string())]);
        }
        if let Some(ref s) = q {
            req_builder = req_builder.query(&[("q", &s.to_string())]);
        }
        if let Some(ref s) = manufacturer_id {
            req_builder = req_builder.query(&[("manufacturer_id", &s.to_string())]);
        }
        if let Some(ref s) = manufacturer {
            req_builder = req_builder.query(&[("manufacturer", &s.to_string())]);
        }
        if let Some(ref s) = id__n {
            req_builder = req_builder.query(&[("id__n", &s.to_string())]);
        }
        if let Some(ref s) = id__lte {
            req_builder = req_builder.query(&[("id__lte", &s.to_string())]);
        }
        if let Some(ref s) = id__lt {
            req_builder = req_builder.query(&[("id__lt", &s.to_string())]);
        }
        if let Some(ref s) = id__gte {
            req_builder = req_builder.query(&[("id__gte", &s.to_string())]);
        }
        if let Some(ref s) = id__gt {
            req_builder = req_builder.query(&[("id__gt", &s.to_string())]);
        }
        if let Some(ref s) = name__n {
            req_builder = req_builder.query(&[("name__n", &s.to_string())]);
        }
        if let Some(ref s) = name__ic {
            req_builder = req_builder.query(&[("name__ic", &s.to_string())]);
        }
        if let Some(ref s) = name__nic {
            req_builder = req_builder.query(&[("name__nic", &s.to_string())]);
        }
        if let Some(ref s) = name__iew {
            req_builder = req_builder.query(&[("name__iew", &s.to_string())]);
        }
        if let Some(ref s) = name__niew {
            req_builder = req_builder.query(&[("name__niew", &s.to_string())]);
        }
        if let Some(ref s) = name__isw {
            req_builder = req_builder.query(&[("name__isw", &s.to_string())]);
        }
        if let Some(ref s) = name__nisw {
            req_builder = req_builder.query(&[("name__nisw", &s.to_string())]);
        }
        if let Some(ref s) = name__ie {
            req_builder = req_builder.query(&[("name__ie", &s.to_string())]);
        }
        if let Some(ref s) = name__nie {
            req_builder = req_builder.query(&[("name__nie", &s.to_string())]);
        }
        if let Some(ref s) = slug__n {
            req_builder = req_builder.query(&[("slug__n", &s.to_string())]);
        }
        if let Some(ref s) = slug__ic {
            req_builder = req_builder.query(&[("slug__ic", &s.to_string())]);
        }
        if let Some(ref s) = slug__nic {
            req_builder = req_builder.query(&[("slug__nic", &s.to_string())]);
        }
        if let Some(ref s) = slug__iew {
            req_builder = req_builder.query(&[("slug__iew", &s.to_string())]);
        }
        if let Some(ref s) = slug__niew {
            req_builder = req_builder.query(&[("slug__niew", &s.to_string())]);
        }
        if let Some(ref s) = slug__isw {
            req_builder = req_builder.query(&[("slug__isw", &s.to_string())]);
        }
        if let Some(ref s) = slug__nisw {
            req_builder = req_builder.query(&[("slug__nisw", &s.to_string())]);
        }
        if let Some(ref s) = slug__ie {
            req_builder = req_builder.query(&[("slug__ie", &s.to_string())]);
        }
        if let Some(ref s) = slug__nie {
            req_builder = req_builder.query(&[("slug__nie", &s.to_string())]);
        }
        if let Some(ref s) = napalm_driver__n {
            req_builder = req_builder.query(&[("napalm_driver__n", &s.to_string())]);
        }
        if let Some(ref s) = napalm_driver__ic {
            req_builder = req_builder.query(&[("napalm_driver__ic", &s.to_string())]);
        }
        if let Some(ref s) = napalm_driver__nic {
            req_builder = req_builder.query(&[("napalm_driver__nic", &s.to_string())]);
        }
        if let Some(ref s) = napalm_driver__iew {
            req_builder = req_builder.query(&[("napalm_driver__iew", &s.to_string())]);
        }
        if let Some(ref s) = napalm_driver__niew {
            req_builder = req_builder.query(&[("napalm_driver__niew", &s.to_string())]);
        }
        if let Some(ref s) = napalm_driver__isw {
            req_builder = req_builder.query(&[("napalm_driver__isw", &s.to_string())]);
        }
        if let Some(ref s) = napalm_driver__nisw {
            req_builder = req_builder.query(&[("napalm_driver__nisw", &s.to_string())]);
        }
        if let Some(ref s) = napalm_driver__ie {
            req_builder = req_builder.query(&[("napalm_driver__ie", &s.to_string())]);
        }
        if let Some(ref s) = napalm_driver__nie {
            req_builder = req_builder.query(&[("napalm_driver__nie", &s.to_string())]);
        }
        if let Some(ref s) = manufacturer_id__n {
            req_builder = req_builder.query(&[("manufacturer_id__n", &s.to_string())]);
        }
        if let Some(ref s) = manufacturer__n {
            req_builder = req_builder.query(&[("manufacturer__n", &s.to_string())]);
        }
        if let Some(ref s) = limit {
            req_builder = req_builder.query(&[("limit", &s.to_string())]);
        }
        if let Some(ref s) = offset {
            req_builder = req_builder.query(&[("offset", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_platforms_partial_update(
        &self,
        id: i32,
        data: crate::models::WritablePlatform,
    ) -> Result<crate::models::Platform, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/dcim/platforms/{id}/", configuration.base_path, id = id);
        let mut req_builder = client.patch(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_platforms_read(&self, id: i32) -> Result<crate::models::Platform, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/dcim/platforms/{id}/", configuration.base_path, id = id);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_platforms_update(
        &self,
        id: i32,
        data: crate::models::WritablePlatform,
    ) -> Result<crate::models::Platform, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/dcim/platforms/{id}/", configuration.base_path, id = id);
        let mut req_builder = client.put(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_power_connections_list(
        &self,
        name: Option<&str>,
        connection_status: Option<&str>,
        site: Option<&str>,
        device_id: Option<&str>,
        device: Option<&str>,
        name__n: Option<&str>,
        name__ic: Option<&str>,
        name__nic: Option<&str>,
        name__iew: Option<&str>,
        name__niew: Option<&str>,
        name__isw: Option<&str>,
        name__nisw: Option<&str>,
        name__ie: Option<&str>,
        name__nie: Option<&str>,
        connection_status__n: Option<&str>,
        limit: Option<i32>,
        offset: Option<i32>,
    ) -> Result<crate::models::InlineResponse20022, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/dcim/power-connections/", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = name {
            req_builder = req_builder.query(&[("name", &s.to_string())]);
        }
        if let Some(ref s) = connection_status {
            req_builder = req_builder.query(&[("connection_status", &s.to_string())]);
        }
        if let Some(ref s) = site {
            req_builder = req_builder.query(&[("site", &s.to_string())]);
        }
        if let Some(ref s) = device_id {
            req_builder = req_builder.query(&[("device_id", &s.to_string())]);
        }
        if let Some(ref s) = device {
            req_builder = req_builder.query(&[("device", &s.to_string())]);
        }
        if let Some(ref s) = name__n {
            req_builder = req_builder.query(&[("name__n", &s.to_string())]);
        }
        if let Some(ref s) = name__ic {
            req_builder = req_builder.query(&[("name__ic", &s.to_string())]);
        }
        if let Some(ref s) = name__nic {
            req_builder = req_builder.query(&[("name__nic", &s.to_string())]);
        }
        if let Some(ref s) = name__iew {
            req_builder = req_builder.query(&[("name__iew", &s.to_string())]);
        }
        if let Some(ref s) = name__niew {
            req_builder = req_builder.query(&[("name__niew", &s.to_string())]);
        }
        if let Some(ref s) = name__isw {
            req_builder = req_builder.query(&[("name__isw", &s.to_string())]);
        }
        if let Some(ref s) = name__nisw {
            req_builder = req_builder.query(&[("name__nisw", &s.to_string())]);
        }
        if let Some(ref s) = name__ie {
            req_builder = req_builder.query(&[("name__ie", &s.to_string())]);
        }
        if let Some(ref s) = name__nie {
            req_builder = req_builder.query(&[("name__nie", &s.to_string())]);
        }
        if let Some(ref s) = connection_status__n {
            req_builder = req_builder.query(&[("connection_status__n", &s.to_string())]);
        }
        if let Some(ref s) = limit {
            req_builder = req_builder.query(&[("limit", &s.to_string())]);
        }
        if let Some(ref s) = offset {
            req_builder = req_builder.query(&[("offset", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_power_feeds_create(
        &self,
        data: crate::models::WritablePowerFeed,
    ) -> Result<crate::models::PowerFeed, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/dcim/power-feeds/", configuration.base_path);
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_power_feeds_delete(&self, id: i32) -> Result<(), Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/dcim/power-feeds/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.delete(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        client.execute(req)?.error_for_status()?;
        Ok(())
    }

    fn dcim_power_feeds_list(
        &self,
        name: Option<&str>,
        status: Option<&str>,
        _type: Option<&str>,
        supply: Option<&str>,
        phase: Option<&str>,
        voltage: Option<&str>,
        amperage: Option<&str>,
        max_utilization: Option<&str>,
        created: Option<&str>,
        created__gte: Option<&str>,
        created__lte: Option<&str>,
        last_updated: Option<&str>,
        last_updated__gte: Option<&str>,
        last_updated__lte: Option<&str>,
        id__in: Option<&str>,
        q: Option<&str>,
        region_id: Option<&str>,
        region: Option<&str>,
        site_id: Option<&str>,
        site: Option<&str>,
        power_panel_id: Option<&str>,
        rack_id: Option<&str>,
        tag: Option<&str>,
        name__n: Option<&str>,
        name__ic: Option<&str>,
        name__nic: Option<&str>,
        name__iew: Option<&str>,
        name__niew: Option<&str>,
        name__isw: Option<&str>,
        name__nisw: Option<&str>,
        name__ie: Option<&str>,
        name__nie: Option<&str>,
        status__n: Option<&str>,
        type__n: Option<&str>,
        supply__n: Option<&str>,
        phase__n: Option<&str>,
        voltage__n: Option<&str>,
        voltage__lte: Option<&str>,
        voltage__lt: Option<&str>,
        voltage__gte: Option<&str>,
        voltage__gt: Option<&str>,
        amperage__n: Option<&str>,
        amperage__lte: Option<&str>,
        amperage__lt: Option<&str>,
        amperage__gte: Option<&str>,
        amperage__gt: Option<&str>,
        max_utilization__n: Option<&str>,
        max_utilization__lte: Option<&str>,
        max_utilization__lt: Option<&str>,
        max_utilization__gte: Option<&str>,
        max_utilization__gt: Option<&str>,
        region_id__n: Option<&str>,
        region__n: Option<&str>,
        site_id__n: Option<&str>,
        site__n: Option<&str>,
        power_panel_id__n: Option<&str>,
        rack_id__n: Option<&str>,
        tag__n: Option<&str>,
        limit: Option<i32>,
        offset: Option<i32>,
    ) -> Result<crate::models::InlineResponse20023, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/dcim/power-feeds/", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = name {
            req_builder = req_builder.query(&[("name", &s.to_string())]);
        }
        if let Some(ref s) = status {
            req_builder = req_builder.query(&[("status", &s.to_string())]);
        }
        if let Some(ref s) = _type {
            req_builder = req_builder.query(&[("type", &s.to_string())]);
        }
        if let Some(ref s) = supply {
            req_builder = req_builder.query(&[("supply", &s.to_string())]);
        }
        if let Some(ref s) = phase {
            req_builder = req_builder.query(&[("phase", &s.to_string())]);
        }
        if let Some(ref s) = voltage {
            req_builder = req_builder.query(&[("voltage", &s.to_string())]);
        }
        if let Some(ref s) = amperage {
            req_builder = req_builder.query(&[("amperage", &s.to_string())]);
        }
        if let Some(ref s) = max_utilization {
            req_builder = req_builder.query(&[("max_utilization", &s.to_string())]);
        }
        if let Some(ref s) = created {
            req_builder = req_builder.query(&[("created", &s.to_string())]);
        }
        if let Some(ref s) = created__gte {
            req_builder = req_builder.query(&[("created__gte", &s.to_string())]);
        }
        if let Some(ref s) = created__lte {
            req_builder = req_builder.query(&[("created__lte", &s.to_string())]);
        }
        if let Some(ref s) = last_updated {
            req_builder = req_builder.query(&[("last_updated", &s.to_string())]);
        }
        if let Some(ref s) = last_updated__gte {
            req_builder = req_builder.query(&[("last_updated__gte", &s.to_string())]);
        }
        if let Some(ref s) = last_updated__lte {
            req_builder = req_builder.query(&[("last_updated__lte", &s.to_string())]);
        }
        if let Some(ref s) = id__in {
            req_builder = req_builder.query(&[("id__in", &s.to_string())]);
        }
        if let Some(ref s) = q {
            req_builder = req_builder.query(&[("q", &s.to_string())]);
        }
        if let Some(ref s) = region_id {
            req_builder = req_builder.query(&[("region_id", &s.to_string())]);
        }
        if let Some(ref s) = region {
            req_builder = req_builder.query(&[("region", &s.to_string())]);
        }
        if let Some(ref s) = site_id {
            req_builder = req_builder.query(&[("site_id", &s.to_string())]);
        }
        if let Some(ref s) = site {
            req_builder = req_builder.query(&[("site", &s.to_string())]);
        }
        if let Some(ref s) = power_panel_id {
            req_builder = req_builder.query(&[("power_panel_id", &s.to_string())]);
        }
        if let Some(ref s) = rack_id {
            req_builder = req_builder.query(&[("rack_id", &s.to_string())]);
        }
        if let Some(ref s) = tag {
            req_builder = req_builder.query(&[("tag", &s.to_string())]);
        }
        if let Some(ref s) = name__n {
            req_builder = req_builder.query(&[("name__n", &s.to_string())]);
        }
        if let Some(ref s) = name__ic {
            req_builder = req_builder.query(&[("name__ic", &s.to_string())]);
        }
        if let Some(ref s) = name__nic {
            req_builder = req_builder.query(&[("name__nic", &s.to_string())]);
        }
        if let Some(ref s) = name__iew {
            req_builder = req_builder.query(&[("name__iew", &s.to_string())]);
        }
        if let Some(ref s) = name__niew {
            req_builder = req_builder.query(&[("name__niew", &s.to_string())]);
        }
        if let Some(ref s) = name__isw {
            req_builder = req_builder.query(&[("name__isw", &s.to_string())]);
        }
        if let Some(ref s) = name__nisw {
            req_builder = req_builder.query(&[("name__nisw", &s.to_string())]);
        }
        if let Some(ref s) = name__ie {
            req_builder = req_builder.query(&[("name__ie", &s.to_string())]);
        }
        if let Some(ref s) = name__nie {
            req_builder = req_builder.query(&[("name__nie", &s.to_string())]);
        }
        if let Some(ref s) = status__n {
            req_builder = req_builder.query(&[("status__n", &s.to_string())]);
        }
        if let Some(ref s) = type__n {
            req_builder = req_builder.query(&[("type__n", &s.to_string())]);
        }
        if let Some(ref s) = supply__n {
            req_builder = req_builder.query(&[("supply__n", &s.to_string())]);
        }
        if let Some(ref s) = phase__n {
            req_builder = req_builder.query(&[("phase__n", &s.to_string())]);
        }
        if let Some(ref s) = voltage__n {
            req_builder = req_builder.query(&[("voltage__n", &s.to_string())]);
        }
        if let Some(ref s) = voltage__lte {
            req_builder = req_builder.query(&[("voltage__lte", &s.to_string())]);
        }
        if let Some(ref s) = voltage__lt {
            req_builder = req_builder.query(&[("voltage__lt", &s.to_string())]);
        }
        if let Some(ref s) = voltage__gte {
            req_builder = req_builder.query(&[("voltage__gte", &s.to_string())]);
        }
        if let Some(ref s) = voltage__gt {
            req_builder = req_builder.query(&[("voltage__gt", &s.to_string())]);
        }
        if let Some(ref s) = amperage__n {
            req_builder = req_builder.query(&[("amperage__n", &s.to_string())]);
        }
        if let Some(ref s) = amperage__lte {
            req_builder = req_builder.query(&[("amperage__lte", &s.to_string())]);
        }
        if let Some(ref s) = amperage__lt {
            req_builder = req_builder.query(&[("amperage__lt", &s.to_string())]);
        }
        if let Some(ref s) = amperage__gte {
            req_builder = req_builder.query(&[("amperage__gte", &s.to_string())]);
        }
        if let Some(ref s) = amperage__gt {
            req_builder = req_builder.query(&[("amperage__gt", &s.to_string())]);
        }
        if let Some(ref s) = max_utilization__n {
            req_builder = req_builder.query(&[("max_utilization__n", &s.to_string())]);
        }
        if let Some(ref s) = max_utilization__lte {
            req_builder = req_builder.query(&[("max_utilization__lte", &s.to_string())]);
        }
        if let Some(ref s) = max_utilization__lt {
            req_builder = req_builder.query(&[("max_utilization__lt", &s.to_string())]);
        }
        if let Some(ref s) = max_utilization__gte {
            req_builder = req_builder.query(&[("max_utilization__gte", &s.to_string())]);
        }
        if let Some(ref s) = max_utilization__gt {
            req_builder = req_builder.query(&[("max_utilization__gt", &s.to_string())]);
        }
        if let Some(ref s) = region_id__n {
            req_builder = req_builder.query(&[("region_id__n", &s.to_string())]);
        }
        if let Some(ref s) = region__n {
            req_builder = req_builder.query(&[("region__n", &s.to_string())]);
        }
        if let Some(ref s) = site_id__n {
            req_builder = req_builder.query(&[("site_id__n", &s.to_string())]);
        }
        if let Some(ref s) = site__n {
            req_builder = req_builder.query(&[("site__n", &s.to_string())]);
        }
        if let Some(ref s) = power_panel_id__n {
            req_builder = req_builder.query(&[("power_panel_id__n", &s.to_string())]);
        }
        if let Some(ref s) = rack_id__n {
            req_builder = req_builder.query(&[("rack_id__n", &s.to_string())]);
        }
        if let Some(ref s) = tag__n {
            req_builder = req_builder.query(&[("tag__n", &s.to_string())]);
        }
        if let Some(ref s) = limit {
            req_builder = req_builder.query(&[("limit", &s.to_string())]);
        }
        if let Some(ref s) = offset {
            req_builder = req_builder.query(&[("offset", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_power_feeds_partial_update(
        &self,
        id: i32,
        data: crate::models::WritablePowerFeed,
    ) -> Result<crate::models::PowerFeed, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/dcim/power-feeds/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.patch(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_power_feeds_read(&self, id: i32) -> Result<crate::models::PowerFeed, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/dcim/power-feeds/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_power_feeds_update(
        &self,
        id: i32,
        data: crate::models::WritablePowerFeed,
    ) -> Result<crate::models::PowerFeed, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/dcim/power-feeds/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.put(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_power_outlet_templates_create(
        &self,
        data: crate::models::WritablePowerOutletTemplate,
    ) -> Result<crate::models::PowerOutletTemplate, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/dcim/power-outlet-templates/", configuration.base_path);
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_power_outlet_templates_delete(&self, id: i32) -> Result<(), Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/dcim/power-outlet-templates/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.delete(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        client.execute(req)?.error_for_status()?;
        Ok(())
    }

    fn dcim_power_outlet_templates_list(
        &self,
        id: Option<&str>,
        name: Option<&str>,
        _type: Option<&str>,
        feed_leg: Option<&str>,
        q: Option<&str>,
        devicetype_id: Option<&str>,
        id__n: Option<&str>,
        id__lte: Option<&str>,
        id__lt: Option<&str>,
        id__gte: Option<&str>,
        id__gt: Option<&str>,
        name__n: Option<&str>,
        name__ic: Option<&str>,
        name__nic: Option<&str>,
        name__iew: Option<&str>,
        name__niew: Option<&str>,
        name__isw: Option<&str>,
        name__nisw: Option<&str>,
        name__ie: Option<&str>,
        name__nie: Option<&str>,
        type__n: Option<&str>,
        feed_leg__n: Option<&str>,
        devicetype_id__n: Option<&str>,
        limit: Option<i32>,
        offset: Option<i32>,
    ) -> Result<crate::models::InlineResponse20024, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/dcim/power-outlet-templates/", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = id {
            req_builder = req_builder.query(&[("id", &s.to_string())]);
        }
        if let Some(ref s) = name {
            req_builder = req_builder.query(&[("name", &s.to_string())]);
        }
        if let Some(ref s) = _type {
            req_builder = req_builder.query(&[("type", &s.to_string())]);
        }
        if let Some(ref s) = feed_leg {
            req_builder = req_builder.query(&[("feed_leg", &s.to_string())]);
        }
        if let Some(ref s) = q {
            req_builder = req_builder.query(&[("q", &s.to_string())]);
        }
        if let Some(ref s) = devicetype_id {
            req_builder = req_builder.query(&[("devicetype_id", &s.to_string())]);
        }
        if let Some(ref s) = id__n {
            req_builder = req_builder.query(&[("id__n", &s.to_string())]);
        }
        if let Some(ref s) = id__lte {
            req_builder = req_builder.query(&[("id__lte", &s.to_string())]);
        }
        if let Some(ref s) = id__lt {
            req_builder = req_builder.query(&[("id__lt", &s.to_string())]);
        }
        if let Some(ref s) = id__gte {
            req_builder = req_builder.query(&[("id__gte", &s.to_string())]);
        }
        if let Some(ref s) = id__gt {
            req_builder = req_builder.query(&[("id__gt", &s.to_string())]);
        }
        if let Some(ref s) = name__n {
            req_builder = req_builder.query(&[("name__n", &s.to_string())]);
        }
        if let Some(ref s) = name__ic {
            req_builder = req_builder.query(&[("name__ic", &s.to_string())]);
        }
        if let Some(ref s) = name__nic {
            req_builder = req_builder.query(&[("name__nic", &s.to_string())]);
        }
        if let Some(ref s) = name__iew {
            req_builder = req_builder.query(&[("name__iew", &s.to_string())]);
        }
        if let Some(ref s) = name__niew {
            req_builder = req_builder.query(&[("name__niew", &s.to_string())]);
        }
        if let Some(ref s) = name__isw {
            req_builder = req_builder.query(&[("name__isw", &s.to_string())]);
        }
        if let Some(ref s) = name__nisw {
            req_builder = req_builder.query(&[("name__nisw", &s.to_string())]);
        }
        if let Some(ref s) = name__ie {
            req_builder = req_builder.query(&[("name__ie", &s.to_string())]);
        }
        if let Some(ref s) = name__nie {
            req_builder = req_builder.query(&[("name__nie", &s.to_string())]);
        }
        if let Some(ref s) = type__n {
            req_builder = req_builder.query(&[("type__n", &s.to_string())]);
        }
        if let Some(ref s) = feed_leg__n {
            req_builder = req_builder.query(&[("feed_leg__n", &s.to_string())]);
        }
        if let Some(ref s) = devicetype_id__n {
            req_builder = req_builder.query(&[("devicetype_id__n", &s.to_string())]);
        }
        if let Some(ref s) = limit {
            req_builder = req_builder.query(&[("limit", &s.to_string())]);
        }
        if let Some(ref s) = offset {
            req_builder = req_builder.query(&[("offset", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_power_outlet_templates_partial_update(
        &self,
        id: i32,
        data: crate::models::WritablePowerOutletTemplate,
    ) -> Result<crate::models::PowerOutletTemplate, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/dcim/power-outlet-templates/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.patch(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_power_outlet_templates_read(
        &self,
        id: i32,
    ) -> Result<crate::models::PowerOutletTemplate, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/dcim/power-outlet-templates/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_power_outlet_templates_update(
        &self,
        id: i32,
        data: crate::models::WritablePowerOutletTemplate,
    ) -> Result<crate::models::PowerOutletTemplate, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/dcim/power-outlet-templates/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.put(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_power_outlets_create(
        &self,
        data: crate::models::WritablePowerOutlet,
    ) -> Result<crate::models::PowerOutlet, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/dcim/power-outlets/", configuration.base_path);
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_power_outlets_delete(&self, id: i32) -> Result<(), Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/dcim/power-outlets/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.delete(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        client.execute(req)?.error_for_status()?;
        Ok(())
    }

    fn dcim_power_outlets_list(
        &self,
        id: Option<&str>,
        name: Option<&str>,
        feed_leg: Option<&str>,
        description: Option<&str>,
        connection_status: Option<&str>,
        q: Option<&str>,
        region_id: Option<&str>,
        region: Option<&str>,
        site_id: Option<&str>,
        site: Option<&str>,
        device_id: Option<&str>,
        device: Option<&str>,
        tag: Option<&str>,
        _type: Option<&str>,
        cabled: Option<&str>,
        id__n: Option<&str>,
        id__lte: Option<&str>,
        id__lt: Option<&str>,
        id__gte: Option<&str>,
        id__gt: Option<&str>,
        name__n: Option<&str>,
        name__ic: Option<&str>,
        name__nic: Option<&str>,
        name__iew: Option<&str>,
        name__niew: Option<&str>,
        name__isw: Option<&str>,
        name__nisw: Option<&str>,
        name__ie: Option<&str>,
        name__nie: Option<&str>,
        feed_leg__n: Option<&str>,
        description__n: Option<&str>,
        description__ic: Option<&str>,
        description__nic: Option<&str>,
        description__iew: Option<&str>,
        description__niew: Option<&str>,
        description__isw: Option<&str>,
        description__nisw: Option<&str>,
        description__ie: Option<&str>,
        description__nie: Option<&str>,
        connection_status__n: Option<&str>,
        region_id__n: Option<&str>,
        region__n: Option<&str>,
        site_id__n: Option<&str>,
        site__n: Option<&str>,
        device_id__n: Option<&str>,
        device__n: Option<&str>,
        tag__n: Option<&str>,
        type__n: Option<&str>,
        limit: Option<i32>,
        offset: Option<i32>,
    ) -> Result<crate::models::InlineResponse20025, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/dcim/power-outlets/", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = id {
            req_builder = req_builder.query(&[("id", &s.to_string())]);
        }
        if let Some(ref s) = name {
            req_builder = req_builder.query(&[("name", &s.to_string())]);
        }
        if let Some(ref s) = feed_leg {
            req_builder = req_builder.query(&[("feed_leg", &s.to_string())]);
        }
        if let Some(ref s) = description {
            req_builder = req_builder.query(&[("description", &s.to_string())]);
        }
        if let Some(ref s) = connection_status {
            req_builder = req_builder.query(&[("connection_status", &s.to_string())]);
        }
        if let Some(ref s) = q {
            req_builder = req_builder.query(&[("q", &s.to_string())]);
        }
        if let Some(ref s) = region_id {
            req_builder = req_builder.query(&[("region_id", &s.to_string())]);
        }
        if let Some(ref s) = region {
            req_builder = req_builder.query(&[("region", &s.to_string())]);
        }
        if let Some(ref s) = site_id {
            req_builder = req_builder.query(&[("site_id", &s.to_string())]);
        }
        if let Some(ref s) = site {
            req_builder = req_builder.query(&[("site", &s.to_string())]);
        }
        if let Some(ref s) = device_id {
            req_builder = req_builder.query(&[("device_id", &s.to_string())]);
        }
        if let Some(ref s) = device {
            req_builder = req_builder.query(&[("device", &s.to_string())]);
        }
        if let Some(ref s) = tag {
            req_builder = req_builder.query(&[("tag", &s.to_string())]);
        }
        if let Some(ref s) = _type {
            req_builder = req_builder.query(&[("type", &s.to_string())]);
        }
        if let Some(ref s) = cabled {
            req_builder = req_builder.query(&[("cabled", &s.to_string())]);
        }
        if let Some(ref s) = id__n {
            req_builder = req_builder.query(&[("id__n", &s.to_string())]);
        }
        if let Some(ref s) = id__lte {
            req_builder = req_builder.query(&[("id__lte", &s.to_string())]);
        }
        if let Some(ref s) = id__lt {
            req_builder = req_builder.query(&[("id__lt", &s.to_string())]);
        }
        if let Some(ref s) = id__gte {
            req_builder = req_builder.query(&[("id__gte", &s.to_string())]);
        }
        if let Some(ref s) = id__gt {
            req_builder = req_builder.query(&[("id__gt", &s.to_string())]);
        }
        if let Some(ref s) = name__n {
            req_builder = req_builder.query(&[("name__n", &s.to_string())]);
        }
        if let Some(ref s) = name__ic {
            req_builder = req_builder.query(&[("name__ic", &s.to_string())]);
        }
        if let Some(ref s) = name__nic {
            req_builder = req_builder.query(&[("name__nic", &s.to_string())]);
        }
        if let Some(ref s) = name__iew {
            req_builder = req_builder.query(&[("name__iew", &s.to_string())]);
        }
        if let Some(ref s) = name__niew {
            req_builder = req_builder.query(&[("name__niew", &s.to_string())]);
        }
        if let Some(ref s) = name__isw {
            req_builder = req_builder.query(&[("name__isw", &s.to_string())]);
        }
        if let Some(ref s) = name__nisw {
            req_builder = req_builder.query(&[("name__nisw", &s.to_string())]);
        }
        if let Some(ref s) = name__ie {
            req_builder = req_builder.query(&[("name__ie", &s.to_string())]);
        }
        if let Some(ref s) = name__nie {
            req_builder = req_builder.query(&[("name__nie", &s.to_string())]);
        }
        if let Some(ref s) = feed_leg__n {
            req_builder = req_builder.query(&[("feed_leg__n", &s.to_string())]);
        }
        if let Some(ref s) = description__n {
            req_builder = req_builder.query(&[("description__n", &s.to_string())]);
        }
        if let Some(ref s) = description__ic {
            req_builder = req_builder.query(&[("description__ic", &s.to_string())]);
        }
        if let Some(ref s) = description__nic {
            req_builder = req_builder.query(&[("description__nic", &s.to_string())]);
        }
        if let Some(ref s) = description__iew {
            req_builder = req_builder.query(&[("description__iew", &s.to_string())]);
        }
        if let Some(ref s) = description__niew {
            req_builder = req_builder.query(&[("description__niew", &s.to_string())]);
        }
        if let Some(ref s) = description__isw {
            req_builder = req_builder.query(&[("description__isw", &s.to_string())]);
        }
        if let Some(ref s) = description__nisw {
            req_builder = req_builder.query(&[("description__nisw", &s.to_string())]);
        }
        if let Some(ref s) = description__ie {
            req_builder = req_builder.query(&[("description__ie", &s.to_string())]);
        }
        if let Some(ref s) = description__nie {
            req_builder = req_builder.query(&[("description__nie", &s.to_string())]);
        }
        if let Some(ref s) = connection_status__n {
            req_builder = req_builder.query(&[("connection_status__n", &s.to_string())]);
        }
        if let Some(ref s) = region_id__n {
            req_builder = req_builder.query(&[("region_id__n", &s.to_string())]);
        }
        if let Some(ref s) = region__n {
            req_builder = req_builder.query(&[("region__n", &s.to_string())]);
        }
        if let Some(ref s) = site_id__n {
            req_builder = req_builder.query(&[("site_id__n", &s.to_string())]);
        }
        if let Some(ref s) = site__n {
            req_builder = req_builder.query(&[("site__n", &s.to_string())]);
        }
        if let Some(ref s) = device_id__n {
            req_builder = req_builder.query(&[("device_id__n", &s.to_string())]);
        }
        if let Some(ref s) = device__n {
            req_builder = req_builder.query(&[("device__n", &s.to_string())]);
        }
        if let Some(ref s) = tag__n {
            req_builder = req_builder.query(&[("tag__n", &s.to_string())]);
        }
        if let Some(ref s) = type__n {
            req_builder = req_builder.query(&[("type__n", &s.to_string())]);
        }
        if let Some(ref s) = limit {
            req_builder = req_builder.query(&[("limit", &s.to_string())]);
        }
        if let Some(ref s) = offset {
            req_builder = req_builder.query(&[("offset", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_power_outlets_partial_update(
        &self,
        id: i32,
        data: crate::models::WritablePowerOutlet,
    ) -> Result<crate::models::PowerOutlet, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/dcim/power-outlets/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.patch(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_power_outlets_read(&self, id: i32) -> Result<crate::models::PowerOutlet, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/dcim/power-outlets/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_power_outlets_trace(&self, id: i32) -> Result<crate::models::PowerOutlet, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/dcim/power-outlets/{id}/trace/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_power_outlets_update(
        &self,
        id: i32,
        data: crate::models::WritablePowerOutlet,
    ) -> Result<crate::models::PowerOutlet, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/dcim/power-outlets/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.put(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_power_panels_create(
        &self,
        data: crate::models::WritablePowerPanel,
    ) -> Result<crate::models::PowerPanel, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/dcim/power-panels/", configuration.base_path);
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_power_panels_delete(&self, id: i32) -> Result<(), Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/dcim/power-panels/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.delete(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        client.execute(req)?.error_for_status()?;
        Ok(())
    }

    fn dcim_power_panels_list(
        &self,
        name: Option<&str>,
        id__in: Option<&str>,
        q: Option<&str>,
        region_id: Option<&str>,
        region: Option<&str>,
        site_id: Option<&str>,
        site: Option<&str>,
        rack_group_id: Option<&str>,
        name__n: Option<&str>,
        name__ic: Option<&str>,
        name__nic: Option<&str>,
        name__iew: Option<&str>,
        name__niew: Option<&str>,
        name__isw: Option<&str>,
        name__nisw: Option<&str>,
        name__ie: Option<&str>,
        name__nie: Option<&str>,
        region_id__n: Option<&str>,
        region__n: Option<&str>,
        site_id__n: Option<&str>,
        site__n: Option<&str>,
        rack_group_id__n: Option<&str>,
        limit: Option<i32>,
        offset: Option<i32>,
    ) -> Result<crate::models::InlineResponse20026, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/dcim/power-panels/", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = name {
            req_builder = req_builder.query(&[("name", &s.to_string())]);
        }
        if let Some(ref s) = id__in {
            req_builder = req_builder.query(&[("id__in", &s.to_string())]);
        }
        if let Some(ref s) = q {
            req_builder = req_builder.query(&[("q", &s.to_string())]);
        }
        if let Some(ref s) = region_id {
            req_builder = req_builder.query(&[("region_id", &s.to_string())]);
        }
        if let Some(ref s) = region {
            req_builder = req_builder.query(&[("region", &s.to_string())]);
        }
        if let Some(ref s) = site_id {
            req_builder = req_builder.query(&[("site_id", &s.to_string())]);
        }
        if let Some(ref s) = site {
            req_builder = req_builder.query(&[("site", &s.to_string())]);
        }
        if let Some(ref s) = rack_group_id {
            req_builder = req_builder.query(&[("rack_group_id", &s.to_string())]);
        }
        if let Some(ref s) = name__n {
            req_builder = req_builder.query(&[("name__n", &s.to_string())]);
        }
        if let Some(ref s) = name__ic {
            req_builder = req_builder.query(&[("name__ic", &s.to_string())]);
        }
        if let Some(ref s) = name__nic {
            req_builder = req_builder.query(&[("name__nic", &s.to_string())]);
        }
        if let Some(ref s) = name__iew {
            req_builder = req_builder.query(&[("name__iew", &s.to_string())]);
        }
        if let Some(ref s) = name__niew {
            req_builder = req_builder.query(&[("name__niew", &s.to_string())]);
        }
        if let Some(ref s) = name__isw {
            req_builder = req_builder.query(&[("name__isw", &s.to_string())]);
        }
        if let Some(ref s) = name__nisw {
            req_builder = req_builder.query(&[("name__nisw", &s.to_string())]);
        }
        if let Some(ref s) = name__ie {
            req_builder = req_builder.query(&[("name__ie", &s.to_string())]);
        }
        if let Some(ref s) = name__nie {
            req_builder = req_builder.query(&[("name__nie", &s.to_string())]);
        }
        if let Some(ref s) = region_id__n {
            req_builder = req_builder.query(&[("region_id__n", &s.to_string())]);
        }
        if let Some(ref s) = region__n {
            req_builder = req_builder.query(&[("region__n", &s.to_string())]);
        }
        if let Some(ref s) = site_id__n {
            req_builder = req_builder.query(&[("site_id__n", &s.to_string())]);
        }
        if let Some(ref s) = site__n {
            req_builder = req_builder.query(&[("site__n", &s.to_string())]);
        }
        if let Some(ref s) = rack_group_id__n {
            req_builder = req_builder.query(&[("rack_group_id__n", &s.to_string())]);
        }
        if let Some(ref s) = limit {
            req_builder = req_builder.query(&[("limit", &s.to_string())]);
        }
        if let Some(ref s) = offset {
            req_builder = req_builder.query(&[("offset", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_power_panels_partial_update(
        &self,
        id: i32,
        data: crate::models::WritablePowerPanel,
    ) -> Result<crate::models::PowerPanel, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/dcim/power-panels/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.patch(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_power_panels_read(&self, id: i32) -> Result<crate::models::PowerPanel, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/dcim/power-panels/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_power_panels_update(
        &self,
        id: i32,
        data: crate::models::WritablePowerPanel,
    ) -> Result<crate::models::PowerPanel, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/dcim/power-panels/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.put(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_power_port_templates_create(
        &self,
        data: crate::models::WritablePowerPortTemplate,
    ) -> Result<crate::models::PowerPortTemplate, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/dcim/power-port-templates/", configuration.base_path);
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_power_port_templates_delete(&self, id: i32) -> Result<(), Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/dcim/power-port-templates/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.delete(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        client.execute(req)?.error_for_status()?;
        Ok(())
    }

    fn dcim_power_port_templates_list(
        &self,
        id: Option<&str>,
        name: Option<&str>,
        _type: Option<&str>,
        maximum_draw: Option<&str>,
        allocated_draw: Option<&str>,
        q: Option<&str>,
        devicetype_id: Option<&str>,
        id__n: Option<&str>,
        id__lte: Option<&str>,
        id__lt: Option<&str>,
        id__gte: Option<&str>,
        id__gt: Option<&str>,
        name__n: Option<&str>,
        name__ic: Option<&str>,
        name__nic: Option<&str>,
        name__iew: Option<&str>,
        name__niew: Option<&str>,
        name__isw: Option<&str>,
        name__nisw: Option<&str>,
        name__ie: Option<&str>,
        name__nie: Option<&str>,
        type__n: Option<&str>,
        maximum_draw__n: Option<&str>,
        maximum_draw__lte: Option<&str>,
        maximum_draw__lt: Option<&str>,
        maximum_draw__gte: Option<&str>,
        maximum_draw__gt: Option<&str>,
        allocated_draw__n: Option<&str>,
        allocated_draw__lte: Option<&str>,
        allocated_draw__lt: Option<&str>,
        allocated_draw__gte: Option<&str>,
        allocated_draw__gt: Option<&str>,
        devicetype_id__n: Option<&str>,
        limit: Option<i32>,
        offset: Option<i32>,
    ) -> Result<crate::models::InlineResponse20027, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/dcim/power-port-templates/", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = id {
            req_builder = req_builder.query(&[("id", &s.to_string())]);
        }
        if let Some(ref s) = name {
            req_builder = req_builder.query(&[("name", &s.to_string())]);
        }
        if let Some(ref s) = _type {
            req_builder = req_builder.query(&[("type", &s.to_string())]);
        }
        if let Some(ref s) = maximum_draw {
            req_builder = req_builder.query(&[("maximum_draw", &s.to_string())]);
        }
        if let Some(ref s) = allocated_draw {
            req_builder = req_builder.query(&[("allocated_draw", &s.to_string())]);
        }
        if let Some(ref s) = q {
            req_builder = req_builder.query(&[("q", &s.to_string())]);
        }
        if let Some(ref s) = devicetype_id {
            req_builder = req_builder.query(&[("devicetype_id", &s.to_string())]);
        }
        if let Some(ref s) = id__n {
            req_builder = req_builder.query(&[("id__n", &s.to_string())]);
        }
        if let Some(ref s) = id__lte {
            req_builder = req_builder.query(&[("id__lte", &s.to_string())]);
        }
        if let Some(ref s) = id__lt {
            req_builder = req_builder.query(&[("id__lt", &s.to_string())]);
        }
        if let Some(ref s) = id__gte {
            req_builder = req_builder.query(&[("id__gte", &s.to_string())]);
        }
        if let Some(ref s) = id__gt {
            req_builder = req_builder.query(&[("id__gt", &s.to_string())]);
        }
        if let Some(ref s) = name__n {
            req_builder = req_builder.query(&[("name__n", &s.to_string())]);
        }
        if let Some(ref s) = name__ic {
            req_builder = req_builder.query(&[("name__ic", &s.to_string())]);
        }
        if let Some(ref s) = name__nic {
            req_builder = req_builder.query(&[("name__nic", &s.to_string())]);
        }
        if let Some(ref s) = name__iew {
            req_builder = req_builder.query(&[("name__iew", &s.to_string())]);
        }
        if let Some(ref s) = name__niew {
            req_builder = req_builder.query(&[("name__niew", &s.to_string())]);
        }
        if let Some(ref s) = name__isw {
            req_builder = req_builder.query(&[("name__isw", &s.to_string())]);
        }
        if let Some(ref s) = name__nisw {
            req_builder = req_builder.query(&[("name__nisw", &s.to_string())]);
        }
        if let Some(ref s) = name__ie {
            req_builder = req_builder.query(&[("name__ie", &s.to_string())]);
        }
        if let Some(ref s) = name__nie {
            req_builder = req_builder.query(&[("name__nie", &s.to_string())]);
        }
        if let Some(ref s) = type__n {
            req_builder = req_builder.query(&[("type__n", &s.to_string())]);
        }
        if let Some(ref s) = maximum_draw__n {
            req_builder = req_builder.query(&[("maximum_draw__n", &s.to_string())]);
        }
        if let Some(ref s) = maximum_draw__lte {
            req_builder = req_builder.query(&[("maximum_draw__lte", &s.to_string())]);
        }
        if let Some(ref s) = maximum_draw__lt {
            req_builder = req_builder.query(&[("maximum_draw__lt", &s.to_string())]);
        }
        if let Some(ref s) = maximum_draw__gte {
            req_builder = req_builder.query(&[("maximum_draw__gte", &s.to_string())]);
        }
        if let Some(ref s) = maximum_draw__gt {
            req_builder = req_builder.query(&[("maximum_draw__gt", &s.to_string())]);
        }
        if let Some(ref s) = allocated_draw__n {
            req_builder = req_builder.query(&[("allocated_draw__n", &s.to_string())]);
        }
        if let Some(ref s) = allocated_draw__lte {
            req_builder = req_builder.query(&[("allocated_draw__lte", &s.to_string())]);
        }
        if let Some(ref s) = allocated_draw__lt {
            req_builder = req_builder.query(&[("allocated_draw__lt", &s.to_string())]);
        }
        if let Some(ref s) = allocated_draw__gte {
            req_builder = req_builder.query(&[("allocated_draw__gte", &s.to_string())]);
        }
        if let Some(ref s) = allocated_draw__gt {
            req_builder = req_builder.query(&[("allocated_draw__gt", &s.to_string())]);
        }
        if let Some(ref s) = devicetype_id__n {
            req_builder = req_builder.query(&[("devicetype_id__n", &s.to_string())]);
        }
        if let Some(ref s) = limit {
            req_builder = req_builder.query(&[("limit", &s.to_string())]);
        }
        if let Some(ref s) = offset {
            req_builder = req_builder.query(&[("offset", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_power_port_templates_partial_update(
        &self,
        id: i32,
        data: crate::models::WritablePowerPortTemplate,
    ) -> Result<crate::models::PowerPortTemplate, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/dcim/power-port-templates/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.patch(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_power_port_templates_read(
        &self,
        id: i32,
    ) -> Result<crate::models::PowerPortTemplate, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/dcim/power-port-templates/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_power_port_templates_update(
        &self,
        id: i32,
        data: crate::models::WritablePowerPortTemplate,
    ) -> Result<crate::models::PowerPortTemplate, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/dcim/power-port-templates/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.put(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_power_ports_create(
        &self,
        data: crate::models::WritablePowerPort,
    ) -> Result<crate::models::PowerPort, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/dcim/power-ports/", configuration.base_path);
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_power_ports_delete(&self, id: i32) -> Result<(), Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/dcim/power-ports/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.delete(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        client.execute(req)?.error_for_status()?;
        Ok(())
    }

    fn dcim_power_ports_list(
        &self,
        id: Option<&str>,
        name: Option<&str>,
        maximum_draw: Option<&str>,
        allocated_draw: Option<&str>,
        description: Option<&str>,
        connection_status: Option<&str>,
        q: Option<&str>,
        region_id: Option<&str>,
        region: Option<&str>,
        site_id: Option<&str>,
        site: Option<&str>,
        device_id: Option<&str>,
        device: Option<&str>,
        tag: Option<&str>,
        _type: Option<&str>,
        cabled: Option<&str>,
        id__n: Option<&str>,
        id__lte: Option<&str>,
        id__lt: Option<&str>,
        id__gte: Option<&str>,
        id__gt: Option<&str>,
        name__n: Option<&str>,
        name__ic: Option<&str>,
        name__nic: Option<&str>,
        name__iew: Option<&str>,
        name__niew: Option<&str>,
        name__isw: Option<&str>,
        name__nisw: Option<&str>,
        name__ie: Option<&str>,
        name__nie: Option<&str>,
        maximum_draw__n: Option<&str>,
        maximum_draw__lte: Option<&str>,
        maximum_draw__lt: Option<&str>,
        maximum_draw__gte: Option<&str>,
        maximum_draw__gt: Option<&str>,
        allocated_draw__n: Option<&str>,
        allocated_draw__lte: Option<&str>,
        allocated_draw__lt: Option<&str>,
        allocated_draw__gte: Option<&str>,
        allocated_draw__gt: Option<&str>,
        description__n: Option<&str>,
        description__ic: Option<&str>,
        description__nic: Option<&str>,
        description__iew: Option<&str>,
        description__niew: Option<&str>,
        description__isw: Option<&str>,
        description__nisw: Option<&str>,
        description__ie: Option<&str>,
        description__nie: Option<&str>,
        connection_status__n: Option<&str>,
        region_id__n: Option<&str>,
        region__n: Option<&str>,
        site_id__n: Option<&str>,
        site__n: Option<&str>,
        device_id__n: Option<&str>,
        device__n: Option<&str>,
        tag__n: Option<&str>,
        type__n: Option<&str>,
        limit: Option<i32>,
        offset: Option<i32>,
    ) -> Result<crate::models::InlineResponse20022, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/dcim/power-ports/", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = id {
            req_builder = req_builder.query(&[("id", &s.to_string())]);
        }
        if let Some(ref s) = name {
            req_builder = req_builder.query(&[("name", &s.to_string())]);
        }
        if let Some(ref s) = maximum_draw {
            req_builder = req_builder.query(&[("maximum_draw", &s.to_string())]);
        }
        if let Some(ref s) = allocated_draw {
            req_builder = req_builder.query(&[("allocated_draw", &s.to_string())]);
        }
        if let Some(ref s) = description {
            req_builder = req_builder.query(&[("description", &s.to_string())]);
        }
        if let Some(ref s) = connection_status {
            req_builder = req_builder.query(&[("connection_status", &s.to_string())]);
        }
        if let Some(ref s) = q {
            req_builder = req_builder.query(&[("q", &s.to_string())]);
        }
        if let Some(ref s) = region_id {
            req_builder = req_builder.query(&[("region_id", &s.to_string())]);
        }
        if let Some(ref s) = region {
            req_builder = req_builder.query(&[("region", &s.to_string())]);
        }
        if let Some(ref s) = site_id {
            req_builder = req_builder.query(&[("site_id", &s.to_string())]);
        }
        if let Some(ref s) = site {
            req_builder = req_builder.query(&[("site", &s.to_string())]);
        }
        if let Some(ref s) = device_id {
            req_builder = req_builder.query(&[("device_id", &s.to_string())]);
        }
        if let Some(ref s) = device {
            req_builder = req_builder.query(&[("device", &s.to_string())]);
        }
        if let Some(ref s) = tag {
            req_builder = req_builder.query(&[("tag", &s.to_string())]);
        }
        if let Some(ref s) = _type {
            req_builder = req_builder.query(&[("type", &s.to_string())]);
        }
        if let Some(ref s) = cabled {
            req_builder = req_builder.query(&[("cabled", &s.to_string())]);
        }
        if let Some(ref s) = id__n {
            req_builder = req_builder.query(&[("id__n", &s.to_string())]);
        }
        if let Some(ref s) = id__lte {
            req_builder = req_builder.query(&[("id__lte", &s.to_string())]);
        }
        if let Some(ref s) = id__lt {
            req_builder = req_builder.query(&[("id__lt", &s.to_string())]);
        }
        if let Some(ref s) = id__gte {
            req_builder = req_builder.query(&[("id__gte", &s.to_string())]);
        }
        if let Some(ref s) = id__gt {
            req_builder = req_builder.query(&[("id__gt", &s.to_string())]);
        }
        if let Some(ref s) = name__n {
            req_builder = req_builder.query(&[("name__n", &s.to_string())]);
        }
        if let Some(ref s) = name__ic {
            req_builder = req_builder.query(&[("name__ic", &s.to_string())]);
        }
        if let Some(ref s) = name__nic {
            req_builder = req_builder.query(&[("name__nic", &s.to_string())]);
        }
        if let Some(ref s) = name__iew {
            req_builder = req_builder.query(&[("name__iew", &s.to_string())]);
        }
        if let Some(ref s) = name__niew {
            req_builder = req_builder.query(&[("name__niew", &s.to_string())]);
        }
        if let Some(ref s) = name__isw {
            req_builder = req_builder.query(&[("name__isw", &s.to_string())]);
        }
        if let Some(ref s) = name__nisw {
            req_builder = req_builder.query(&[("name__nisw", &s.to_string())]);
        }
        if let Some(ref s) = name__ie {
            req_builder = req_builder.query(&[("name__ie", &s.to_string())]);
        }
        if let Some(ref s) = name__nie {
            req_builder = req_builder.query(&[("name__nie", &s.to_string())]);
        }
        if let Some(ref s) = maximum_draw__n {
            req_builder = req_builder.query(&[("maximum_draw__n", &s.to_string())]);
        }
        if let Some(ref s) = maximum_draw__lte {
            req_builder = req_builder.query(&[("maximum_draw__lte", &s.to_string())]);
        }
        if let Some(ref s) = maximum_draw__lt {
            req_builder = req_builder.query(&[("maximum_draw__lt", &s.to_string())]);
        }
        if let Some(ref s) = maximum_draw__gte {
            req_builder = req_builder.query(&[("maximum_draw__gte", &s.to_string())]);
        }
        if let Some(ref s) = maximum_draw__gt {
            req_builder = req_builder.query(&[("maximum_draw__gt", &s.to_string())]);
        }
        if let Some(ref s) = allocated_draw__n {
            req_builder = req_builder.query(&[("allocated_draw__n", &s.to_string())]);
        }
        if let Some(ref s) = allocated_draw__lte {
            req_builder = req_builder.query(&[("allocated_draw__lte", &s.to_string())]);
        }
        if let Some(ref s) = allocated_draw__lt {
            req_builder = req_builder.query(&[("allocated_draw__lt", &s.to_string())]);
        }
        if let Some(ref s) = allocated_draw__gte {
            req_builder = req_builder.query(&[("allocated_draw__gte", &s.to_string())]);
        }
        if let Some(ref s) = allocated_draw__gt {
            req_builder = req_builder.query(&[("allocated_draw__gt", &s.to_string())]);
        }
        if let Some(ref s) = description__n {
            req_builder = req_builder.query(&[("description__n", &s.to_string())]);
        }
        if let Some(ref s) = description__ic {
            req_builder = req_builder.query(&[("description__ic", &s.to_string())]);
        }
        if let Some(ref s) = description__nic {
            req_builder = req_builder.query(&[("description__nic", &s.to_string())]);
        }
        if let Some(ref s) = description__iew {
            req_builder = req_builder.query(&[("description__iew", &s.to_string())]);
        }
        if let Some(ref s) = description__niew {
            req_builder = req_builder.query(&[("description__niew", &s.to_string())]);
        }
        if let Some(ref s) = description__isw {
            req_builder = req_builder.query(&[("description__isw", &s.to_string())]);
        }
        if let Some(ref s) = description__nisw {
            req_builder = req_builder.query(&[("description__nisw", &s.to_string())]);
        }
        if let Some(ref s) = description__ie {
            req_builder = req_builder.query(&[("description__ie", &s.to_string())]);
        }
        if let Some(ref s) = description__nie {
            req_builder = req_builder.query(&[("description__nie", &s.to_string())]);
        }
        if let Some(ref s) = connection_status__n {
            req_builder = req_builder.query(&[("connection_status__n", &s.to_string())]);
        }
        if let Some(ref s) = region_id__n {
            req_builder = req_builder.query(&[("region_id__n", &s.to_string())]);
        }
        if let Some(ref s) = region__n {
            req_builder = req_builder.query(&[("region__n", &s.to_string())]);
        }
        if let Some(ref s) = site_id__n {
            req_builder = req_builder.query(&[("site_id__n", &s.to_string())]);
        }
        if let Some(ref s) = site__n {
            req_builder = req_builder.query(&[("site__n", &s.to_string())]);
        }
        if let Some(ref s) = device_id__n {
            req_builder = req_builder.query(&[("device_id__n", &s.to_string())]);
        }
        if let Some(ref s) = device__n {
            req_builder = req_builder.query(&[("device__n", &s.to_string())]);
        }
        if let Some(ref s) = tag__n {
            req_builder = req_builder.query(&[("tag__n", &s.to_string())]);
        }
        if let Some(ref s) = type__n {
            req_builder = req_builder.query(&[("type__n", &s.to_string())]);
        }
        if let Some(ref s) = limit {
            req_builder = req_builder.query(&[("limit", &s.to_string())]);
        }
        if let Some(ref s) = offset {
            req_builder = req_builder.query(&[("offset", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_power_ports_partial_update(
        &self,
        id: i32,
        data: crate::models::WritablePowerPort,
    ) -> Result<crate::models::PowerPort, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/dcim/power-ports/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.patch(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_power_ports_read(&self, id: i32) -> Result<crate::models::PowerPort, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/dcim/power-ports/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_power_ports_trace(&self, id: i32) -> Result<crate::models::PowerPort, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/dcim/power-ports/{id}/trace/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_power_ports_update(
        &self,
        id: i32,
        data: crate::models::WritablePowerPort,
    ) -> Result<crate::models::PowerPort, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/dcim/power-ports/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.put(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_rack_groups_create(
        &self,
        data: crate::models::WritableRackGroup,
    ) -> Result<crate::models::RackGroup, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/dcim/rack-groups/", configuration.base_path);
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_rack_groups_delete(&self, id: i32) -> Result<(), Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/dcim/rack-groups/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.delete(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        client.execute(req)?.error_for_status()?;
        Ok(())
    }

    fn dcim_rack_groups_list(
        &self,
        id: Option<&str>,
        name: Option<&str>,
        slug: Option<&str>,
        q: Option<&str>,
        region_id: Option<&str>,
        region: Option<&str>,
        site_id: Option<&str>,
        site: Option<&str>,
        id__n: Option<&str>,
        id__lte: Option<&str>,
        id__lt: Option<&str>,
        id__gte: Option<&str>,
        id__gt: Option<&str>,
        name__n: Option<&str>,
        name__ic: Option<&str>,
        name__nic: Option<&str>,
        name__iew: Option<&str>,
        name__niew: Option<&str>,
        name__isw: Option<&str>,
        name__nisw: Option<&str>,
        name__ie: Option<&str>,
        name__nie: Option<&str>,
        slug__n: Option<&str>,
        slug__ic: Option<&str>,
        slug__nic: Option<&str>,
        slug__iew: Option<&str>,
        slug__niew: Option<&str>,
        slug__isw: Option<&str>,
        slug__nisw: Option<&str>,
        slug__ie: Option<&str>,
        slug__nie: Option<&str>,
        region_id__n: Option<&str>,
        region__n: Option<&str>,
        site_id__n: Option<&str>,
        site__n: Option<&str>,
        limit: Option<i32>,
        offset: Option<i32>,
    ) -> Result<crate::models::InlineResponse20028, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/dcim/rack-groups/", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = id {
            req_builder = req_builder.query(&[("id", &s.to_string())]);
        }
        if let Some(ref s) = name {
            req_builder = req_builder.query(&[("name", &s.to_string())]);
        }
        if let Some(ref s) = slug {
            req_builder = req_builder.query(&[("slug", &s.to_string())]);
        }
        if let Some(ref s) = q {
            req_builder = req_builder.query(&[("q", &s.to_string())]);
        }
        if let Some(ref s) = region_id {
            req_builder = req_builder.query(&[("region_id", &s.to_string())]);
        }
        if let Some(ref s) = region {
            req_builder = req_builder.query(&[("region", &s.to_string())]);
        }
        if let Some(ref s) = site_id {
            req_builder = req_builder.query(&[("site_id", &s.to_string())]);
        }
        if let Some(ref s) = site {
            req_builder = req_builder.query(&[("site", &s.to_string())]);
        }
        if let Some(ref s) = id__n {
            req_builder = req_builder.query(&[("id__n", &s.to_string())]);
        }
        if let Some(ref s) = id__lte {
            req_builder = req_builder.query(&[("id__lte", &s.to_string())]);
        }
        if let Some(ref s) = id__lt {
            req_builder = req_builder.query(&[("id__lt", &s.to_string())]);
        }
        if let Some(ref s) = id__gte {
            req_builder = req_builder.query(&[("id__gte", &s.to_string())]);
        }
        if let Some(ref s) = id__gt {
            req_builder = req_builder.query(&[("id__gt", &s.to_string())]);
        }
        if let Some(ref s) = name__n {
            req_builder = req_builder.query(&[("name__n", &s.to_string())]);
        }
        if let Some(ref s) = name__ic {
            req_builder = req_builder.query(&[("name__ic", &s.to_string())]);
        }
        if let Some(ref s) = name__nic {
            req_builder = req_builder.query(&[("name__nic", &s.to_string())]);
        }
        if let Some(ref s) = name__iew {
            req_builder = req_builder.query(&[("name__iew", &s.to_string())]);
        }
        if let Some(ref s) = name__niew {
            req_builder = req_builder.query(&[("name__niew", &s.to_string())]);
        }
        if let Some(ref s) = name__isw {
            req_builder = req_builder.query(&[("name__isw", &s.to_string())]);
        }
        if let Some(ref s) = name__nisw {
            req_builder = req_builder.query(&[("name__nisw", &s.to_string())]);
        }
        if let Some(ref s) = name__ie {
            req_builder = req_builder.query(&[("name__ie", &s.to_string())]);
        }
        if let Some(ref s) = name__nie {
            req_builder = req_builder.query(&[("name__nie", &s.to_string())]);
        }
        if let Some(ref s) = slug__n {
            req_builder = req_builder.query(&[("slug__n", &s.to_string())]);
        }
        if let Some(ref s) = slug__ic {
            req_builder = req_builder.query(&[("slug__ic", &s.to_string())]);
        }
        if let Some(ref s) = slug__nic {
            req_builder = req_builder.query(&[("slug__nic", &s.to_string())]);
        }
        if let Some(ref s) = slug__iew {
            req_builder = req_builder.query(&[("slug__iew", &s.to_string())]);
        }
        if let Some(ref s) = slug__niew {
            req_builder = req_builder.query(&[("slug__niew", &s.to_string())]);
        }
        if let Some(ref s) = slug__isw {
            req_builder = req_builder.query(&[("slug__isw", &s.to_string())]);
        }
        if let Some(ref s) = slug__nisw {
            req_builder = req_builder.query(&[("slug__nisw", &s.to_string())]);
        }
        if let Some(ref s) = slug__ie {
            req_builder = req_builder.query(&[("slug__ie", &s.to_string())]);
        }
        if let Some(ref s) = slug__nie {
            req_builder = req_builder.query(&[("slug__nie", &s.to_string())]);
        }
        if let Some(ref s) = region_id__n {
            req_builder = req_builder.query(&[("region_id__n", &s.to_string())]);
        }
        if let Some(ref s) = region__n {
            req_builder = req_builder.query(&[("region__n", &s.to_string())]);
        }
        if let Some(ref s) = site_id__n {
            req_builder = req_builder.query(&[("site_id__n", &s.to_string())]);
        }
        if let Some(ref s) = site__n {
            req_builder = req_builder.query(&[("site__n", &s.to_string())]);
        }
        if let Some(ref s) = limit {
            req_builder = req_builder.query(&[("limit", &s.to_string())]);
        }
        if let Some(ref s) = offset {
            req_builder = req_builder.query(&[("offset", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_rack_groups_partial_update(
        &self,
        id: i32,
        data: crate::models::WritableRackGroup,
    ) -> Result<crate::models::RackGroup, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/dcim/rack-groups/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.patch(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_rack_groups_read(&self, id: i32) -> Result<crate::models::RackGroup, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/dcim/rack-groups/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_rack_groups_update(
        &self,
        id: i32,
        data: crate::models::WritableRackGroup,
    ) -> Result<crate::models::RackGroup, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/dcim/rack-groups/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.put(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_rack_reservations_create(
        &self,
        data: crate::models::WritableRackReservation,
    ) -> Result<crate::models::RackReservation, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/dcim/rack-reservations/", configuration.base_path);
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_rack_reservations_delete(&self, id: i32) -> Result<(), Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/dcim/rack-reservations/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.delete(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        client.execute(req)?.error_for_status()?;
        Ok(())
    }

    fn dcim_rack_reservations_list(
        &self,
        created: Option<&str>,
        tenant_group_id: Option<&str>,
        tenant_group: Option<&str>,
        tenant_id: Option<&str>,
        tenant: Option<&str>,
        id__in: Option<&str>,
        q: Option<&str>,
        rack_id: Option<&str>,
        site_id: Option<&str>,
        site: Option<&str>,
        group_id: Option<&str>,
        group: Option<&str>,
        user_id: Option<&str>,
        user: Option<&str>,
        created__n: Option<&str>,
        created__lte: Option<&str>,
        created__lt: Option<&str>,
        created__gte: Option<&str>,
        created__gt: Option<&str>,
        tenant_group_id__n: Option<&str>,
        tenant_group__n: Option<&str>,
        tenant_id__n: Option<&str>,
        tenant__n: Option<&str>,
        rack_id__n: Option<&str>,
        site_id__n: Option<&str>,
        site__n: Option<&str>,
        group_id__n: Option<&str>,
        group__n: Option<&str>,
        user_id__n: Option<&str>,
        user__n: Option<&str>,
        limit: Option<i32>,
        offset: Option<i32>,
    ) -> Result<crate::models::InlineResponse20029, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/dcim/rack-reservations/", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = created {
            req_builder = req_builder.query(&[("created", &s.to_string())]);
        }
        if let Some(ref s) = tenant_group_id {
            req_builder = req_builder.query(&[("tenant_group_id", &s.to_string())]);
        }
        if let Some(ref s) = tenant_group {
            req_builder = req_builder.query(&[("tenant_group", &s.to_string())]);
        }
        if let Some(ref s) = tenant_id {
            req_builder = req_builder.query(&[("tenant_id", &s.to_string())]);
        }
        if let Some(ref s) = tenant {
            req_builder = req_builder.query(&[("tenant", &s.to_string())]);
        }
        if let Some(ref s) = id__in {
            req_builder = req_builder.query(&[("id__in", &s.to_string())]);
        }
        if let Some(ref s) = q {
            req_builder = req_builder.query(&[("q", &s.to_string())]);
        }
        if let Some(ref s) = rack_id {
            req_builder = req_builder.query(&[("rack_id", &s.to_string())]);
        }
        if let Some(ref s) = site_id {
            req_builder = req_builder.query(&[("site_id", &s.to_string())]);
        }
        if let Some(ref s) = site {
            req_builder = req_builder.query(&[("site", &s.to_string())]);
        }
        if let Some(ref s) = group_id {
            req_builder = req_builder.query(&[("group_id", &s.to_string())]);
        }
        if let Some(ref s) = group {
            req_builder = req_builder.query(&[("group", &s.to_string())]);
        }
        if let Some(ref s) = user_id {
            req_builder = req_builder.query(&[("user_id", &s.to_string())]);
        }
        if let Some(ref s) = user {
            req_builder = req_builder.query(&[("user", &s.to_string())]);
        }
        if let Some(ref s) = created__n {
            req_builder = req_builder.query(&[("created__n", &s.to_string())]);
        }
        if let Some(ref s) = created__lte {
            req_builder = req_builder.query(&[("created__lte", &s.to_string())]);
        }
        if let Some(ref s) = created__lt {
            req_builder = req_builder.query(&[("created__lt", &s.to_string())]);
        }
        if let Some(ref s) = created__gte {
            req_builder = req_builder.query(&[("created__gte", &s.to_string())]);
        }
        if let Some(ref s) = created__gt {
            req_builder = req_builder.query(&[("created__gt", &s.to_string())]);
        }
        if let Some(ref s) = tenant_group_id__n {
            req_builder = req_builder.query(&[("tenant_group_id__n", &s.to_string())]);
        }
        if let Some(ref s) = tenant_group__n {
            req_builder = req_builder.query(&[("tenant_group__n", &s.to_string())]);
        }
        if let Some(ref s) = tenant_id__n {
            req_builder = req_builder.query(&[("tenant_id__n", &s.to_string())]);
        }
        if let Some(ref s) = tenant__n {
            req_builder = req_builder.query(&[("tenant__n", &s.to_string())]);
        }
        if let Some(ref s) = rack_id__n {
            req_builder = req_builder.query(&[("rack_id__n", &s.to_string())]);
        }
        if let Some(ref s) = site_id__n {
            req_builder = req_builder.query(&[("site_id__n", &s.to_string())]);
        }
        if let Some(ref s) = site__n {
            req_builder = req_builder.query(&[("site__n", &s.to_string())]);
        }
        if let Some(ref s) = group_id__n {
            req_builder = req_builder.query(&[("group_id__n", &s.to_string())]);
        }
        if let Some(ref s) = group__n {
            req_builder = req_builder.query(&[("group__n", &s.to_string())]);
        }
        if let Some(ref s) = user_id__n {
            req_builder = req_builder.query(&[("user_id__n", &s.to_string())]);
        }
        if let Some(ref s) = user__n {
            req_builder = req_builder.query(&[("user__n", &s.to_string())]);
        }
        if let Some(ref s) = limit {
            req_builder = req_builder.query(&[("limit", &s.to_string())]);
        }
        if let Some(ref s) = offset {
            req_builder = req_builder.query(&[("offset", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_rack_reservations_partial_update(
        &self,
        id: i32,
        data: crate::models::WritableRackReservation,
    ) -> Result<crate::models::RackReservation, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/dcim/rack-reservations/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.patch(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_rack_reservations_read(
        &self,
        id: i32,
    ) -> Result<crate::models::RackReservation, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/dcim/rack-reservations/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_rack_reservations_update(
        &self,
        id: i32,
        data: crate::models::WritableRackReservation,
    ) -> Result<crate::models::RackReservation, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/dcim/rack-reservations/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.put(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_rack_roles_create(
        &self,
        data: crate::models::RackRole,
    ) -> Result<crate::models::RackRole, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/dcim/rack-roles/", configuration.base_path);
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_rack_roles_delete(&self, id: i32) -> Result<(), Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/dcim/rack-roles/{id}/", configuration.base_path, id = id);
        let mut req_builder = client.delete(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        client.execute(req)?.error_for_status()?;
        Ok(())
    }

    fn dcim_rack_roles_list(
        &self,
        id: Option<&str>,
        name: Option<&str>,
        slug: Option<&str>,
        color: Option<&str>,
        q: Option<&str>,
        id__n: Option<&str>,
        id__lte: Option<&str>,
        id__lt: Option<&str>,
        id__gte: Option<&str>,
        id__gt: Option<&str>,
        name__n: Option<&str>,
        name__ic: Option<&str>,
        name__nic: Option<&str>,
        name__iew: Option<&str>,
        name__niew: Option<&str>,
        name__isw: Option<&str>,
        name__nisw: Option<&str>,
        name__ie: Option<&str>,
        name__nie: Option<&str>,
        slug__n: Option<&str>,
        slug__ic: Option<&str>,
        slug__nic: Option<&str>,
        slug__iew: Option<&str>,
        slug__niew: Option<&str>,
        slug__isw: Option<&str>,
        slug__nisw: Option<&str>,
        slug__ie: Option<&str>,
        slug__nie: Option<&str>,
        color__n: Option<&str>,
        color__ic: Option<&str>,
        color__nic: Option<&str>,
        color__iew: Option<&str>,
        color__niew: Option<&str>,
        color__isw: Option<&str>,
        color__nisw: Option<&str>,
        color__ie: Option<&str>,
        color__nie: Option<&str>,
        limit: Option<i32>,
        offset: Option<i32>,
    ) -> Result<crate::models::InlineResponse20030, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/dcim/rack-roles/", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = id {
            req_builder = req_builder.query(&[("id", &s.to_string())]);
        }
        if let Some(ref s) = name {
            req_builder = req_builder.query(&[("name", &s.to_string())]);
        }
        if let Some(ref s) = slug {
            req_builder = req_builder.query(&[("slug", &s.to_string())]);
        }
        if let Some(ref s) = color {
            req_builder = req_builder.query(&[("color", &s.to_string())]);
        }
        if let Some(ref s) = q {
            req_builder = req_builder.query(&[("q", &s.to_string())]);
        }
        if let Some(ref s) = id__n {
            req_builder = req_builder.query(&[("id__n", &s.to_string())]);
        }
        if let Some(ref s) = id__lte {
            req_builder = req_builder.query(&[("id__lte", &s.to_string())]);
        }
        if let Some(ref s) = id__lt {
            req_builder = req_builder.query(&[("id__lt", &s.to_string())]);
        }
        if let Some(ref s) = id__gte {
            req_builder = req_builder.query(&[("id__gte", &s.to_string())]);
        }
        if let Some(ref s) = id__gt {
            req_builder = req_builder.query(&[("id__gt", &s.to_string())]);
        }
        if let Some(ref s) = name__n {
            req_builder = req_builder.query(&[("name__n", &s.to_string())]);
        }
        if let Some(ref s) = name__ic {
            req_builder = req_builder.query(&[("name__ic", &s.to_string())]);
        }
        if let Some(ref s) = name__nic {
            req_builder = req_builder.query(&[("name__nic", &s.to_string())]);
        }
        if let Some(ref s) = name__iew {
            req_builder = req_builder.query(&[("name__iew", &s.to_string())]);
        }
        if let Some(ref s) = name__niew {
            req_builder = req_builder.query(&[("name__niew", &s.to_string())]);
        }
        if let Some(ref s) = name__isw {
            req_builder = req_builder.query(&[("name__isw", &s.to_string())]);
        }
        if let Some(ref s) = name__nisw {
            req_builder = req_builder.query(&[("name__nisw", &s.to_string())]);
        }
        if let Some(ref s) = name__ie {
            req_builder = req_builder.query(&[("name__ie", &s.to_string())]);
        }
        if let Some(ref s) = name__nie {
            req_builder = req_builder.query(&[("name__nie", &s.to_string())]);
        }
        if let Some(ref s) = slug__n {
            req_builder = req_builder.query(&[("slug__n", &s.to_string())]);
        }
        if let Some(ref s) = slug__ic {
            req_builder = req_builder.query(&[("slug__ic", &s.to_string())]);
        }
        if let Some(ref s) = slug__nic {
            req_builder = req_builder.query(&[("slug__nic", &s.to_string())]);
        }
        if let Some(ref s) = slug__iew {
            req_builder = req_builder.query(&[("slug__iew", &s.to_string())]);
        }
        if let Some(ref s) = slug__niew {
            req_builder = req_builder.query(&[("slug__niew", &s.to_string())]);
        }
        if let Some(ref s) = slug__isw {
            req_builder = req_builder.query(&[("slug__isw", &s.to_string())]);
        }
        if let Some(ref s) = slug__nisw {
            req_builder = req_builder.query(&[("slug__nisw", &s.to_string())]);
        }
        if let Some(ref s) = slug__ie {
            req_builder = req_builder.query(&[("slug__ie", &s.to_string())]);
        }
        if let Some(ref s) = slug__nie {
            req_builder = req_builder.query(&[("slug__nie", &s.to_string())]);
        }
        if let Some(ref s) = color__n {
            req_builder = req_builder.query(&[("color__n", &s.to_string())]);
        }
        if let Some(ref s) = color__ic {
            req_builder = req_builder.query(&[("color__ic", &s.to_string())]);
        }
        if let Some(ref s) = color__nic {
            req_builder = req_builder.query(&[("color__nic", &s.to_string())]);
        }
        if let Some(ref s) = color__iew {
            req_builder = req_builder.query(&[("color__iew", &s.to_string())]);
        }
        if let Some(ref s) = color__niew {
            req_builder = req_builder.query(&[("color__niew", &s.to_string())]);
        }
        if let Some(ref s) = color__isw {
            req_builder = req_builder.query(&[("color__isw", &s.to_string())]);
        }
        if let Some(ref s) = color__nisw {
            req_builder = req_builder.query(&[("color__nisw", &s.to_string())]);
        }
        if let Some(ref s) = color__ie {
            req_builder = req_builder.query(&[("color__ie", &s.to_string())]);
        }
        if let Some(ref s) = color__nie {
            req_builder = req_builder.query(&[("color__nie", &s.to_string())]);
        }
        if let Some(ref s) = limit {
            req_builder = req_builder.query(&[("limit", &s.to_string())]);
        }
        if let Some(ref s) = offset {
            req_builder = req_builder.query(&[("offset", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_rack_roles_partial_update(
        &self,
        id: i32,
        data: crate::models::RackRole,
    ) -> Result<crate::models::RackRole, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/dcim/rack-roles/{id}/", configuration.base_path, id = id);
        let mut req_builder = client.patch(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_rack_roles_read(&self, id: i32) -> Result<crate::models::RackRole, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/dcim/rack-roles/{id}/", configuration.base_path, id = id);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_rack_roles_update(
        &self,
        id: i32,
        data: crate::models::RackRole,
    ) -> Result<crate::models::RackRole, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/dcim/rack-roles/{id}/", configuration.base_path, id = id);
        let mut req_builder = client.put(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_racks_create(
        &self,
        data: crate::models::WritableRack,
    ) -> Result<crate::models::Rack, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/dcim/racks/", configuration.base_path);
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_racks_delete(&self, id: i32) -> Result<(), Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/dcim/racks/{id}/", configuration.base_path, id = id);
        let mut req_builder = client.delete(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        client.execute(req)?.error_for_status()?;
        Ok(())
    }

    fn dcim_racks_elevation(
        &self,
        id: i32,
        q: Option<&str>,
        face: Option<&str>,
        render: Option<&str>,
        unit_width: Option<i32>,
        unit_height: Option<i32>,
        legend_width: Option<i32>,
        exclude: Option<i32>,
        expand_devices: Option<bool>,
        include_images: Option<bool>,
    ) -> Result<Vec<crate::models::RackUnit>, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/dcim/racks/{id}/elevation/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = q {
            req_builder = req_builder.query(&[("q", &s.to_string())]);
        }
        if let Some(ref s) = face {
            req_builder = req_builder.query(&[("face", &s.to_string())]);
        }
        if let Some(ref s) = render {
            req_builder = req_builder.query(&[("render", &s.to_string())]);
        }
        if let Some(ref s) = unit_width {
            req_builder = req_builder.query(&[("unit_width", &s.to_string())]);
        }
        if let Some(ref s) = unit_height {
            req_builder = req_builder.query(&[("unit_height", &s.to_string())]);
        }
        if let Some(ref s) = legend_width {
            req_builder = req_builder.query(&[("legend_width", &s.to_string())]);
        }
        if let Some(ref s) = exclude {
            req_builder = req_builder.query(&[("exclude", &s.to_string())]);
        }
        if let Some(ref s) = expand_devices {
            req_builder = req_builder.query(&[("expand_devices", &s.to_string())]);
        }
        if let Some(ref s) = include_images {
            req_builder = req_builder.query(&[("include_images", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_racks_list(
        &self,
        id: Option<&str>,
        name: Option<&str>,
        facility_id: Option<&str>,
        asset_tag: Option<&str>,
        _type: Option<&str>,
        width: Option<&str>,
        u_height: Option<&str>,
        desc_units: Option<&str>,
        outer_width: Option<&str>,
        outer_depth: Option<&str>,
        outer_unit: Option<&str>,
        tenant_group_id: Option<&str>,
        tenant_group: Option<&str>,
        tenant_id: Option<&str>,
        tenant: Option<&str>,
        created: Option<&str>,
        created__gte: Option<&str>,
        created__lte: Option<&str>,
        last_updated: Option<&str>,
        last_updated__gte: Option<&str>,
        last_updated__lte: Option<&str>,
        id__in: Option<&str>,
        q: Option<&str>,
        region_id: Option<&str>,
        region: Option<&str>,
        site_id: Option<&str>,
        site: Option<&str>,
        group_id: Option<&str>,
        group: Option<&str>,
        status: Option<&str>,
        role_id: Option<&str>,
        role: Option<&str>,
        serial: Option<&str>,
        tag: Option<&str>,
        id__n: Option<&str>,
        id__lte: Option<&str>,
        id__lt: Option<&str>,
        id__gte: Option<&str>,
        id__gt: Option<&str>,
        name__n: Option<&str>,
        name__ic: Option<&str>,
        name__nic: Option<&str>,
        name__iew: Option<&str>,
        name__niew: Option<&str>,
        name__isw: Option<&str>,
        name__nisw: Option<&str>,
        name__ie: Option<&str>,
        name__nie: Option<&str>,
        facility_id__n: Option<&str>,
        facility_id__ic: Option<&str>,
        facility_id__nic: Option<&str>,
        facility_id__iew: Option<&str>,
        facility_id__niew: Option<&str>,
        facility_id__isw: Option<&str>,
        facility_id__nisw: Option<&str>,
        facility_id__ie: Option<&str>,
        facility_id__nie: Option<&str>,
        asset_tag__n: Option<&str>,
        asset_tag__ic: Option<&str>,
        asset_tag__nic: Option<&str>,
        asset_tag__iew: Option<&str>,
        asset_tag__niew: Option<&str>,
        asset_tag__isw: Option<&str>,
        asset_tag__nisw: Option<&str>,
        asset_tag__ie: Option<&str>,
        asset_tag__nie: Option<&str>,
        type__n: Option<&str>,
        width__n: Option<&str>,
        u_height__n: Option<&str>,
        u_height__lte: Option<&str>,
        u_height__lt: Option<&str>,
        u_height__gte: Option<&str>,
        u_height__gt: Option<&str>,
        outer_width__n: Option<&str>,
        outer_width__lte: Option<&str>,
        outer_width__lt: Option<&str>,
        outer_width__gte: Option<&str>,
        outer_width__gt: Option<&str>,
        outer_depth__n: Option<&str>,
        outer_depth__lte: Option<&str>,
        outer_depth__lt: Option<&str>,
        outer_depth__gte: Option<&str>,
        outer_depth__gt: Option<&str>,
        outer_unit__n: Option<&str>,
        tenant_group_id__n: Option<&str>,
        tenant_group__n: Option<&str>,
        tenant_id__n: Option<&str>,
        tenant__n: Option<&str>,
        region_id__n: Option<&str>,
        region__n: Option<&str>,
        site_id__n: Option<&str>,
        site__n: Option<&str>,
        group_id__n: Option<&str>,
        group__n: Option<&str>,
        status__n: Option<&str>,
        role_id__n: Option<&str>,
        role__n: Option<&str>,
        tag__n: Option<&str>,
        limit: Option<i32>,
        offset: Option<i32>,
    ) -> Result<crate::models::InlineResponse20031, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/dcim/racks/", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = id {
            req_builder = req_builder.query(&[("id", &s.to_string())]);
        }
        if let Some(ref s) = name {
            req_builder = req_builder.query(&[("name", &s.to_string())]);
        }
        if let Some(ref s) = facility_id {
            req_builder = req_builder.query(&[("facility_id", &s.to_string())]);
        }
        if let Some(ref s) = asset_tag {
            req_builder = req_builder.query(&[("asset_tag", &s.to_string())]);
        }
        if let Some(ref s) = _type {
            req_builder = req_builder.query(&[("type", &s.to_string())]);
        }
        if let Some(ref s) = width {
            req_builder = req_builder.query(&[("width", &s.to_string())]);
        }
        if let Some(ref s) = u_height {
            req_builder = req_builder.query(&[("u_height", &s.to_string())]);
        }
        if let Some(ref s) = desc_units {
            req_builder = req_builder.query(&[("desc_units", &s.to_string())]);
        }
        if let Some(ref s) = outer_width {
            req_builder = req_builder.query(&[("outer_width", &s.to_string())]);
        }
        if let Some(ref s) = outer_depth {
            req_builder = req_builder.query(&[("outer_depth", &s.to_string())]);
        }
        if let Some(ref s) = outer_unit {
            req_builder = req_builder.query(&[("outer_unit", &s.to_string())]);
        }
        if let Some(ref s) = tenant_group_id {
            req_builder = req_builder.query(&[("tenant_group_id", &s.to_string())]);
        }
        if let Some(ref s) = tenant_group {
            req_builder = req_builder.query(&[("tenant_group", &s.to_string())]);
        }
        if let Some(ref s) = tenant_id {
            req_builder = req_builder.query(&[("tenant_id", &s.to_string())]);
        }
        if let Some(ref s) = tenant {
            req_builder = req_builder.query(&[("tenant", &s.to_string())]);
        }
        if let Some(ref s) = created {
            req_builder = req_builder.query(&[("created", &s.to_string())]);
        }
        if let Some(ref s) = created__gte {
            req_builder = req_builder.query(&[("created__gte", &s.to_string())]);
        }
        if let Some(ref s) = created__lte {
            req_builder = req_builder.query(&[("created__lte", &s.to_string())]);
        }
        if let Some(ref s) = last_updated {
            req_builder = req_builder.query(&[("last_updated", &s.to_string())]);
        }
        if let Some(ref s) = last_updated__gte {
            req_builder = req_builder.query(&[("last_updated__gte", &s.to_string())]);
        }
        if let Some(ref s) = last_updated__lte {
            req_builder = req_builder.query(&[("last_updated__lte", &s.to_string())]);
        }
        if let Some(ref s) = id__in {
            req_builder = req_builder.query(&[("id__in", &s.to_string())]);
        }
        if let Some(ref s) = q {
            req_builder = req_builder.query(&[("q", &s.to_string())]);
        }
        if let Some(ref s) = region_id {
            req_builder = req_builder.query(&[("region_id", &s.to_string())]);
        }
        if let Some(ref s) = region {
            req_builder = req_builder.query(&[("region", &s.to_string())]);
        }
        if let Some(ref s) = site_id {
            req_builder = req_builder.query(&[("site_id", &s.to_string())]);
        }
        if let Some(ref s) = site {
            req_builder = req_builder.query(&[("site", &s.to_string())]);
        }
        if let Some(ref s) = group_id {
            req_builder = req_builder.query(&[("group_id", &s.to_string())]);
        }
        if let Some(ref s) = group {
            req_builder = req_builder.query(&[("group", &s.to_string())]);
        }
        if let Some(ref s) = status {
            req_builder = req_builder.query(&[("status", &s.to_string())]);
        }
        if let Some(ref s) = role_id {
            req_builder = req_builder.query(&[("role_id", &s.to_string())]);
        }
        if let Some(ref s) = role {
            req_builder = req_builder.query(&[("role", &s.to_string())]);
        }
        if let Some(ref s) = serial {
            req_builder = req_builder.query(&[("serial", &s.to_string())]);
        }
        if let Some(ref s) = tag {
            req_builder = req_builder.query(&[("tag", &s.to_string())]);
        }
        if let Some(ref s) = id__n {
            req_builder = req_builder.query(&[("id__n", &s.to_string())]);
        }
        if let Some(ref s) = id__lte {
            req_builder = req_builder.query(&[("id__lte", &s.to_string())]);
        }
        if let Some(ref s) = id__lt {
            req_builder = req_builder.query(&[("id__lt", &s.to_string())]);
        }
        if let Some(ref s) = id__gte {
            req_builder = req_builder.query(&[("id__gte", &s.to_string())]);
        }
        if let Some(ref s) = id__gt {
            req_builder = req_builder.query(&[("id__gt", &s.to_string())]);
        }
        if let Some(ref s) = name__n {
            req_builder = req_builder.query(&[("name__n", &s.to_string())]);
        }
        if let Some(ref s) = name__ic {
            req_builder = req_builder.query(&[("name__ic", &s.to_string())]);
        }
        if let Some(ref s) = name__nic {
            req_builder = req_builder.query(&[("name__nic", &s.to_string())]);
        }
        if let Some(ref s) = name__iew {
            req_builder = req_builder.query(&[("name__iew", &s.to_string())]);
        }
        if let Some(ref s) = name__niew {
            req_builder = req_builder.query(&[("name__niew", &s.to_string())]);
        }
        if let Some(ref s) = name__isw {
            req_builder = req_builder.query(&[("name__isw", &s.to_string())]);
        }
        if let Some(ref s) = name__nisw {
            req_builder = req_builder.query(&[("name__nisw", &s.to_string())]);
        }
        if let Some(ref s) = name__ie {
            req_builder = req_builder.query(&[("name__ie", &s.to_string())]);
        }
        if let Some(ref s) = name__nie {
            req_builder = req_builder.query(&[("name__nie", &s.to_string())]);
        }
        if let Some(ref s) = facility_id__n {
            req_builder = req_builder.query(&[("facility_id__n", &s.to_string())]);
        }
        if let Some(ref s) = facility_id__ic {
            req_builder = req_builder.query(&[("facility_id__ic", &s.to_string())]);
        }
        if let Some(ref s) = facility_id__nic {
            req_builder = req_builder.query(&[("facility_id__nic", &s.to_string())]);
        }
        if let Some(ref s) = facility_id__iew {
            req_builder = req_builder.query(&[("facility_id__iew", &s.to_string())]);
        }
        if let Some(ref s) = facility_id__niew {
            req_builder = req_builder.query(&[("facility_id__niew", &s.to_string())]);
        }
        if let Some(ref s) = facility_id__isw {
            req_builder = req_builder.query(&[("facility_id__isw", &s.to_string())]);
        }
        if let Some(ref s) = facility_id__nisw {
            req_builder = req_builder.query(&[("facility_id__nisw", &s.to_string())]);
        }
        if let Some(ref s) = facility_id__ie {
            req_builder = req_builder.query(&[("facility_id__ie", &s.to_string())]);
        }
        if let Some(ref s) = facility_id__nie {
            req_builder = req_builder.query(&[("facility_id__nie", &s.to_string())]);
        }
        if let Some(ref s) = asset_tag__n {
            req_builder = req_builder.query(&[("asset_tag__n", &s.to_string())]);
        }
        if let Some(ref s) = asset_tag__ic {
            req_builder = req_builder.query(&[("asset_tag__ic", &s.to_string())]);
        }
        if let Some(ref s) = asset_tag__nic {
            req_builder = req_builder.query(&[("asset_tag__nic", &s.to_string())]);
        }
        if let Some(ref s) = asset_tag__iew {
            req_builder = req_builder.query(&[("asset_tag__iew", &s.to_string())]);
        }
        if let Some(ref s) = asset_tag__niew {
            req_builder = req_builder.query(&[("asset_tag__niew", &s.to_string())]);
        }
        if let Some(ref s) = asset_tag__isw {
            req_builder = req_builder.query(&[("asset_tag__isw", &s.to_string())]);
        }
        if let Some(ref s) = asset_tag__nisw {
            req_builder = req_builder.query(&[("asset_tag__nisw", &s.to_string())]);
        }
        if let Some(ref s) = asset_tag__ie {
            req_builder = req_builder.query(&[("asset_tag__ie", &s.to_string())]);
        }
        if let Some(ref s) = asset_tag__nie {
            req_builder = req_builder.query(&[("asset_tag__nie", &s.to_string())]);
        }
        if let Some(ref s) = type__n {
            req_builder = req_builder.query(&[("type__n", &s.to_string())]);
        }
        if let Some(ref s) = width__n {
            req_builder = req_builder.query(&[("width__n", &s.to_string())]);
        }
        if let Some(ref s) = u_height__n {
            req_builder = req_builder.query(&[("u_height__n", &s.to_string())]);
        }
        if let Some(ref s) = u_height__lte {
            req_builder = req_builder.query(&[("u_height__lte", &s.to_string())]);
        }
        if let Some(ref s) = u_height__lt {
            req_builder = req_builder.query(&[("u_height__lt", &s.to_string())]);
        }
        if let Some(ref s) = u_height__gte {
            req_builder = req_builder.query(&[("u_height__gte", &s.to_string())]);
        }
        if let Some(ref s) = u_height__gt {
            req_builder = req_builder.query(&[("u_height__gt", &s.to_string())]);
        }
        if let Some(ref s) = outer_width__n {
            req_builder = req_builder.query(&[("outer_width__n", &s.to_string())]);
        }
        if let Some(ref s) = outer_width__lte {
            req_builder = req_builder.query(&[("outer_width__lte", &s.to_string())]);
        }
        if let Some(ref s) = outer_width__lt {
            req_builder = req_builder.query(&[("outer_width__lt", &s.to_string())]);
        }
        if let Some(ref s) = outer_width__gte {
            req_builder = req_builder.query(&[("outer_width__gte", &s.to_string())]);
        }
        if let Some(ref s) = outer_width__gt {
            req_builder = req_builder.query(&[("outer_width__gt", &s.to_string())]);
        }
        if let Some(ref s) = outer_depth__n {
            req_builder = req_builder.query(&[("outer_depth__n", &s.to_string())]);
        }
        if let Some(ref s) = outer_depth__lte {
            req_builder = req_builder.query(&[("outer_depth__lte", &s.to_string())]);
        }
        if let Some(ref s) = outer_depth__lt {
            req_builder = req_builder.query(&[("outer_depth__lt", &s.to_string())]);
        }
        if let Some(ref s) = outer_depth__gte {
            req_builder = req_builder.query(&[("outer_depth__gte", &s.to_string())]);
        }
        if let Some(ref s) = outer_depth__gt {
            req_builder = req_builder.query(&[("outer_depth__gt", &s.to_string())]);
        }
        if let Some(ref s) = outer_unit__n {
            req_builder = req_builder.query(&[("outer_unit__n", &s.to_string())]);
        }
        if let Some(ref s) = tenant_group_id__n {
            req_builder = req_builder.query(&[("tenant_group_id__n", &s.to_string())]);
        }
        if let Some(ref s) = tenant_group__n {
            req_builder = req_builder.query(&[("tenant_group__n", &s.to_string())]);
        }
        if let Some(ref s) = tenant_id__n {
            req_builder = req_builder.query(&[("tenant_id__n", &s.to_string())]);
        }
        if let Some(ref s) = tenant__n {
            req_builder = req_builder.query(&[("tenant__n", &s.to_string())]);
        }
        if let Some(ref s) = region_id__n {
            req_builder = req_builder.query(&[("region_id__n", &s.to_string())]);
        }
        if let Some(ref s) = region__n {
            req_builder = req_builder.query(&[("region__n", &s.to_string())]);
        }
        if let Some(ref s) = site_id__n {
            req_builder = req_builder.query(&[("site_id__n", &s.to_string())]);
        }
        if let Some(ref s) = site__n {
            req_builder = req_builder.query(&[("site__n", &s.to_string())]);
        }
        if let Some(ref s) = group_id__n {
            req_builder = req_builder.query(&[("group_id__n", &s.to_string())]);
        }
        if let Some(ref s) = group__n {
            req_builder = req_builder.query(&[("group__n", &s.to_string())]);
        }
        if let Some(ref s) = status__n {
            req_builder = req_builder.query(&[("status__n", &s.to_string())]);
        }
        if let Some(ref s) = role_id__n {
            req_builder = req_builder.query(&[("role_id__n", &s.to_string())]);
        }
        if let Some(ref s) = role__n {
            req_builder = req_builder.query(&[("role__n", &s.to_string())]);
        }
        if let Some(ref s) = tag__n {
            req_builder = req_builder.query(&[("tag__n", &s.to_string())]);
        }
        if let Some(ref s) = limit {
            req_builder = req_builder.query(&[("limit", &s.to_string())]);
        }
        if let Some(ref s) = offset {
            req_builder = req_builder.query(&[("offset", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_racks_partial_update(
        &self,
        id: i32,
        data: crate::models::WritableRack,
    ) -> Result<crate::models::Rack, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/dcim/racks/{id}/", configuration.base_path, id = id);
        let mut req_builder = client.patch(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_racks_read(&self, id: i32) -> Result<crate::models::Rack, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/dcim/racks/{id}/", configuration.base_path, id = id);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_racks_units(&self, id: i32) -> Result<crate::models::Rack, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/dcim/racks/{id}/units/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_racks_update(
        &self,
        id: i32,
        data: crate::models::WritableRack,
    ) -> Result<crate::models::Rack, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/dcim/racks/{id}/", configuration.base_path, id = id);
        let mut req_builder = client.put(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_rear_port_templates_create(
        &self,
        data: crate::models::WritableRearPortTemplate,
    ) -> Result<crate::models::RearPortTemplate, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/dcim/rear-port-templates/", configuration.base_path);
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_rear_port_templates_delete(&self, id: i32) -> Result<(), Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/dcim/rear-port-templates/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.delete(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        client.execute(req)?.error_for_status()?;
        Ok(())
    }

    fn dcim_rear_port_templates_list(
        &self,
        id: Option<&str>,
        name: Option<&str>,
        _type: Option<&str>,
        positions: Option<&str>,
        q: Option<&str>,
        devicetype_id: Option<&str>,
        id__n: Option<&str>,
        id__lte: Option<&str>,
        id__lt: Option<&str>,
        id__gte: Option<&str>,
        id__gt: Option<&str>,
        name__n: Option<&str>,
        name__ic: Option<&str>,
        name__nic: Option<&str>,
        name__iew: Option<&str>,
        name__niew: Option<&str>,
        name__isw: Option<&str>,
        name__nisw: Option<&str>,
        name__ie: Option<&str>,
        name__nie: Option<&str>,
        type__n: Option<&str>,
        positions__n: Option<&str>,
        positions__lte: Option<&str>,
        positions__lt: Option<&str>,
        positions__gte: Option<&str>,
        positions__gt: Option<&str>,
        devicetype_id__n: Option<&str>,
        limit: Option<i32>,
        offset: Option<i32>,
    ) -> Result<crate::models::InlineResponse20032, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/dcim/rear-port-templates/", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = id {
            req_builder = req_builder.query(&[("id", &s.to_string())]);
        }
        if let Some(ref s) = name {
            req_builder = req_builder.query(&[("name", &s.to_string())]);
        }
        if let Some(ref s) = _type {
            req_builder = req_builder.query(&[("type", &s.to_string())]);
        }
        if let Some(ref s) = positions {
            req_builder = req_builder.query(&[("positions", &s.to_string())]);
        }
        if let Some(ref s) = q {
            req_builder = req_builder.query(&[("q", &s.to_string())]);
        }
        if let Some(ref s) = devicetype_id {
            req_builder = req_builder.query(&[("devicetype_id", &s.to_string())]);
        }
        if let Some(ref s) = id__n {
            req_builder = req_builder.query(&[("id__n", &s.to_string())]);
        }
        if let Some(ref s) = id__lte {
            req_builder = req_builder.query(&[("id__lte", &s.to_string())]);
        }
        if let Some(ref s) = id__lt {
            req_builder = req_builder.query(&[("id__lt", &s.to_string())]);
        }
        if let Some(ref s) = id__gte {
            req_builder = req_builder.query(&[("id__gte", &s.to_string())]);
        }
        if let Some(ref s) = id__gt {
            req_builder = req_builder.query(&[("id__gt", &s.to_string())]);
        }
        if let Some(ref s) = name__n {
            req_builder = req_builder.query(&[("name__n", &s.to_string())]);
        }
        if let Some(ref s) = name__ic {
            req_builder = req_builder.query(&[("name__ic", &s.to_string())]);
        }
        if let Some(ref s) = name__nic {
            req_builder = req_builder.query(&[("name__nic", &s.to_string())]);
        }
        if let Some(ref s) = name__iew {
            req_builder = req_builder.query(&[("name__iew", &s.to_string())]);
        }
        if let Some(ref s) = name__niew {
            req_builder = req_builder.query(&[("name__niew", &s.to_string())]);
        }
        if let Some(ref s) = name__isw {
            req_builder = req_builder.query(&[("name__isw", &s.to_string())]);
        }
        if let Some(ref s) = name__nisw {
            req_builder = req_builder.query(&[("name__nisw", &s.to_string())]);
        }
        if let Some(ref s) = name__ie {
            req_builder = req_builder.query(&[("name__ie", &s.to_string())]);
        }
        if let Some(ref s) = name__nie {
            req_builder = req_builder.query(&[("name__nie", &s.to_string())]);
        }
        if let Some(ref s) = type__n {
            req_builder = req_builder.query(&[("type__n", &s.to_string())]);
        }
        if let Some(ref s) = positions__n {
            req_builder = req_builder.query(&[("positions__n", &s.to_string())]);
        }
        if let Some(ref s) = positions__lte {
            req_builder = req_builder.query(&[("positions__lte", &s.to_string())]);
        }
        if let Some(ref s) = positions__lt {
            req_builder = req_builder.query(&[("positions__lt", &s.to_string())]);
        }
        if let Some(ref s) = positions__gte {
            req_builder = req_builder.query(&[("positions__gte", &s.to_string())]);
        }
        if let Some(ref s) = positions__gt {
            req_builder = req_builder.query(&[("positions__gt", &s.to_string())]);
        }
        if let Some(ref s) = devicetype_id__n {
            req_builder = req_builder.query(&[("devicetype_id__n", &s.to_string())]);
        }
        if let Some(ref s) = limit {
            req_builder = req_builder.query(&[("limit", &s.to_string())]);
        }
        if let Some(ref s) = offset {
            req_builder = req_builder.query(&[("offset", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_rear_port_templates_partial_update(
        &self,
        id: i32,
        data: crate::models::WritableRearPortTemplate,
    ) -> Result<crate::models::RearPortTemplate, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/dcim/rear-port-templates/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.patch(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_rear_port_templates_read(
        &self,
        id: i32,
    ) -> Result<crate::models::RearPortTemplate, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/dcim/rear-port-templates/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_rear_port_templates_update(
        &self,
        id: i32,
        data: crate::models::WritableRearPortTemplate,
    ) -> Result<crate::models::RearPortTemplate, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/dcim/rear-port-templates/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.put(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_rear_ports_create(
        &self,
        data: crate::models::WritableRearPort,
    ) -> Result<crate::models::RearPort, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/dcim/rear-ports/", configuration.base_path);
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_rear_ports_delete(&self, id: i32) -> Result<(), Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/dcim/rear-ports/{id}/", configuration.base_path, id = id);
        let mut req_builder = client.delete(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        client.execute(req)?.error_for_status()?;
        Ok(())
    }

    fn dcim_rear_ports_list(
        &self,
        id: Option<&str>,
        name: Option<&str>,
        _type: Option<&str>,
        positions: Option<&str>,
        description: Option<&str>,
        q: Option<&str>,
        region_id: Option<&str>,
        region: Option<&str>,
        site_id: Option<&str>,
        site: Option<&str>,
        device_id: Option<&str>,
        device: Option<&str>,
        tag: Option<&str>,
        cabled: Option<&str>,
        id__n: Option<&str>,
        id__lte: Option<&str>,
        id__lt: Option<&str>,
        id__gte: Option<&str>,
        id__gt: Option<&str>,
        name__n: Option<&str>,
        name__ic: Option<&str>,
        name__nic: Option<&str>,
        name__iew: Option<&str>,
        name__niew: Option<&str>,
        name__isw: Option<&str>,
        name__nisw: Option<&str>,
        name__ie: Option<&str>,
        name__nie: Option<&str>,
        type__n: Option<&str>,
        positions__n: Option<&str>,
        positions__lte: Option<&str>,
        positions__lt: Option<&str>,
        positions__gte: Option<&str>,
        positions__gt: Option<&str>,
        description__n: Option<&str>,
        description__ic: Option<&str>,
        description__nic: Option<&str>,
        description__iew: Option<&str>,
        description__niew: Option<&str>,
        description__isw: Option<&str>,
        description__nisw: Option<&str>,
        description__ie: Option<&str>,
        description__nie: Option<&str>,
        region_id__n: Option<&str>,
        region__n: Option<&str>,
        site_id__n: Option<&str>,
        site__n: Option<&str>,
        device_id__n: Option<&str>,
        device__n: Option<&str>,
        tag__n: Option<&str>,
        limit: Option<i32>,
        offset: Option<i32>,
    ) -> Result<crate::models::InlineResponse20033, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/dcim/rear-ports/", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = id {
            req_builder = req_builder.query(&[("id", &s.to_string())]);
        }
        if let Some(ref s) = name {
            req_builder = req_builder.query(&[("name", &s.to_string())]);
        }
        if let Some(ref s) = _type {
            req_builder = req_builder.query(&[("type", &s.to_string())]);
        }
        if let Some(ref s) = positions {
            req_builder = req_builder.query(&[("positions", &s.to_string())]);
        }
        if let Some(ref s) = description {
            req_builder = req_builder.query(&[("description", &s.to_string())]);
        }
        if let Some(ref s) = q {
            req_builder = req_builder.query(&[("q", &s.to_string())]);
        }
        if let Some(ref s) = region_id {
            req_builder = req_builder.query(&[("region_id", &s.to_string())]);
        }
        if let Some(ref s) = region {
            req_builder = req_builder.query(&[("region", &s.to_string())]);
        }
        if let Some(ref s) = site_id {
            req_builder = req_builder.query(&[("site_id", &s.to_string())]);
        }
        if let Some(ref s) = site {
            req_builder = req_builder.query(&[("site", &s.to_string())]);
        }
        if let Some(ref s) = device_id {
            req_builder = req_builder.query(&[("device_id", &s.to_string())]);
        }
        if let Some(ref s) = device {
            req_builder = req_builder.query(&[("device", &s.to_string())]);
        }
        if let Some(ref s) = tag {
            req_builder = req_builder.query(&[("tag", &s.to_string())]);
        }
        if let Some(ref s) = cabled {
            req_builder = req_builder.query(&[("cabled", &s.to_string())]);
        }
        if let Some(ref s) = id__n {
            req_builder = req_builder.query(&[("id__n", &s.to_string())]);
        }
        if let Some(ref s) = id__lte {
            req_builder = req_builder.query(&[("id__lte", &s.to_string())]);
        }
        if let Some(ref s) = id__lt {
            req_builder = req_builder.query(&[("id__lt", &s.to_string())]);
        }
        if let Some(ref s) = id__gte {
            req_builder = req_builder.query(&[("id__gte", &s.to_string())]);
        }
        if let Some(ref s) = id__gt {
            req_builder = req_builder.query(&[("id__gt", &s.to_string())]);
        }
        if let Some(ref s) = name__n {
            req_builder = req_builder.query(&[("name__n", &s.to_string())]);
        }
        if let Some(ref s) = name__ic {
            req_builder = req_builder.query(&[("name__ic", &s.to_string())]);
        }
        if let Some(ref s) = name__nic {
            req_builder = req_builder.query(&[("name__nic", &s.to_string())]);
        }
        if let Some(ref s) = name__iew {
            req_builder = req_builder.query(&[("name__iew", &s.to_string())]);
        }
        if let Some(ref s) = name__niew {
            req_builder = req_builder.query(&[("name__niew", &s.to_string())]);
        }
        if let Some(ref s) = name__isw {
            req_builder = req_builder.query(&[("name__isw", &s.to_string())]);
        }
        if let Some(ref s) = name__nisw {
            req_builder = req_builder.query(&[("name__nisw", &s.to_string())]);
        }
        if let Some(ref s) = name__ie {
            req_builder = req_builder.query(&[("name__ie", &s.to_string())]);
        }
        if let Some(ref s) = name__nie {
            req_builder = req_builder.query(&[("name__nie", &s.to_string())]);
        }
        if let Some(ref s) = type__n {
            req_builder = req_builder.query(&[("type__n", &s.to_string())]);
        }
        if let Some(ref s) = positions__n {
            req_builder = req_builder.query(&[("positions__n", &s.to_string())]);
        }
        if let Some(ref s) = positions__lte {
            req_builder = req_builder.query(&[("positions__lte", &s.to_string())]);
        }
        if let Some(ref s) = positions__lt {
            req_builder = req_builder.query(&[("positions__lt", &s.to_string())]);
        }
        if let Some(ref s) = positions__gte {
            req_builder = req_builder.query(&[("positions__gte", &s.to_string())]);
        }
        if let Some(ref s) = positions__gt {
            req_builder = req_builder.query(&[("positions__gt", &s.to_string())]);
        }
        if let Some(ref s) = description__n {
            req_builder = req_builder.query(&[("description__n", &s.to_string())]);
        }
        if let Some(ref s) = description__ic {
            req_builder = req_builder.query(&[("description__ic", &s.to_string())]);
        }
        if let Some(ref s) = description__nic {
            req_builder = req_builder.query(&[("description__nic", &s.to_string())]);
        }
        if let Some(ref s) = description__iew {
            req_builder = req_builder.query(&[("description__iew", &s.to_string())]);
        }
        if let Some(ref s) = description__niew {
            req_builder = req_builder.query(&[("description__niew", &s.to_string())]);
        }
        if let Some(ref s) = description__isw {
            req_builder = req_builder.query(&[("description__isw", &s.to_string())]);
        }
        if let Some(ref s) = description__nisw {
            req_builder = req_builder.query(&[("description__nisw", &s.to_string())]);
        }
        if let Some(ref s) = description__ie {
            req_builder = req_builder.query(&[("description__ie", &s.to_string())]);
        }
        if let Some(ref s) = description__nie {
            req_builder = req_builder.query(&[("description__nie", &s.to_string())]);
        }
        if let Some(ref s) = region_id__n {
            req_builder = req_builder.query(&[("region_id__n", &s.to_string())]);
        }
        if let Some(ref s) = region__n {
            req_builder = req_builder.query(&[("region__n", &s.to_string())]);
        }
        if let Some(ref s) = site_id__n {
            req_builder = req_builder.query(&[("site_id__n", &s.to_string())]);
        }
        if let Some(ref s) = site__n {
            req_builder = req_builder.query(&[("site__n", &s.to_string())]);
        }
        if let Some(ref s) = device_id__n {
            req_builder = req_builder.query(&[("device_id__n", &s.to_string())]);
        }
        if let Some(ref s) = device__n {
            req_builder = req_builder.query(&[("device__n", &s.to_string())]);
        }
        if let Some(ref s) = tag__n {
            req_builder = req_builder.query(&[("tag__n", &s.to_string())]);
        }
        if let Some(ref s) = limit {
            req_builder = req_builder.query(&[("limit", &s.to_string())]);
        }
        if let Some(ref s) = offset {
            req_builder = req_builder.query(&[("offset", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_rear_ports_partial_update(
        &self,
        id: i32,
        data: crate::models::WritableRearPort,
    ) -> Result<crate::models::RearPort, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/dcim/rear-ports/{id}/", configuration.base_path, id = id);
        let mut req_builder = client.patch(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_rear_ports_read(&self, id: i32) -> Result<crate::models::RearPort, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/dcim/rear-ports/{id}/", configuration.base_path, id = id);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_rear_ports_update(
        &self,
        id: i32,
        data: crate::models::WritableRearPort,
    ) -> Result<crate::models::RearPort, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/dcim/rear-ports/{id}/", configuration.base_path, id = id);
        let mut req_builder = client.put(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_regions_create(
        &self,
        data: crate::models::WritableRegion,
    ) -> Result<crate::models::Region, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/dcim/regions/", configuration.base_path);
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_regions_delete(&self, id: i32) -> Result<(), Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/dcim/regions/{id}/", configuration.base_path, id = id);
        let mut req_builder = client.delete(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        client.execute(req)?.error_for_status()?;
        Ok(())
    }

    fn dcim_regions_list(
        &self,
        id: Option<&str>,
        name: Option<&str>,
        slug: Option<&str>,
        q: Option<&str>,
        parent_id: Option<&str>,
        parent: Option<&str>,
        id__n: Option<&str>,
        id__lte: Option<&str>,
        id__lt: Option<&str>,
        id__gte: Option<&str>,
        id__gt: Option<&str>,
        name__n: Option<&str>,
        name__ic: Option<&str>,
        name__nic: Option<&str>,
        name__iew: Option<&str>,
        name__niew: Option<&str>,
        name__isw: Option<&str>,
        name__nisw: Option<&str>,
        name__ie: Option<&str>,
        name__nie: Option<&str>,
        slug__n: Option<&str>,
        slug__ic: Option<&str>,
        slug__nic: Option<&str>,
        slug__iew: Option<&str>,
        slug__niew: Option<&str>,
        slug__isw: Option<&str>,
        slug__nisw: Option<&str>,
        slug__ie: Option<&str>,
        slug__nie: Option<&str>,
        parent_id__n: Option<&str>,
        parent__n: Option<&str>,
        limit: Option<i32>,
        offset: Option<i32>,
    ) -> Result<crate::models::InlineResponse20034, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/dcim/regions/", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = id {
            req_builder = req_builder.query(&[("id", &s.to_string())]);
        }
        if let Some(ref s) = name {
            req_builder = req_builder.query(&[("name", &s.to_string())]);
        }
        if let Some(ref s) = slug {
            req_builder = req_builder.query(&[("slug", &s.to_string())]);
        }
        if let Some(ref s) = q {
            req_builder = req_builder.query(&[("q", &s.to_string())]);
        }
        if let Some(ref s) = parent_id {
            req_builder = req_builder.query(&[("parent_id", &s.to_string())]);
        }
        if let Some(ref s) = parent {
            req_builder = req_builder.query(&[("parent", &s.to_string())]);
        }
        if let Some(ref s) = id__n {
            req_builder = req_builder.query(&[("id__n", &s.to_string())]);
        }
        if let Some(ref s) = id__lte {
            req_builder = req_builder.query(&[("id__lte", &s.to_string())]);
        }
        if let Some(ref s) = id__lt {
            req_builder = req_builder.query(&[("id__lt", &s.to_string())]);
        }
        if let Some(ref s) = id__gte {
            req_builder = req_builder.query(&[("id__gte", &s.to_string())]);
        }
        if let Some(ref s) = id__gt {
            req_builder = req_builder.query(&[("id__gt", &s.to_string())]);
        }
        if let Some(ref s) = name__n {
            req_builder = req_builder.query(&[("name__n", &s.to_string())]);
        }
        if let Some(ref s) = name__ic {
            req_builder = req_builder.query(&[("name__ic", &s.to_string())]);
        }
        if let Some(ref s) = name__nic {
            req_builder = req_builder.query(&[("name__nic", &s.to_string())]);
        }
        if let Some(ref s) = name__iew {
            req_builder = req_builder.query(&[("name__iew", &s.to_string())]);
        }
        if let Some(ref s) = name__niew {
            req_builder = req_builder.query(&[("name__niew", &s.to_string())]);
        }
        if let Some(ref s) = name__isw {
            req_builder = req_builder.query(&[("name__isw", &s.to_string())]);
        }
        if let Some(ref s) = name__nisw {
            req_builder = req_builder.query(&[("name__nisw", &s.to_string())]);
        }
        if let Some(ref s) = name__ie {
            req_builder = req_builder.query(&[("name__ie", &s.to_string())]);
        }
        if let Some(ref s) = name__nie {
            req_builder = req_builder.query(&[("name__nie", &s.to_string())]);
        }
        if let Some(ref s) = slug__n {
            req_builder = req_builder.query(&[("slug__n", &s.to_string())]);
        }
        if let Some(ref s) = slug__ic {
            req_builder = req_builder.query(&[("slug__ic", &s.to_string())]);
        }
        if let Some(ref s) = slug__nic {
            req_builder = req_builder.query(&[("slug__nic", &s.to_string())]);
        }
        if let Some(ref s) = slug__iew {
            req_builder = req_builder.query(&[("slug__iew", &s.to_string())]);
        }
        if let Some(ref s) = slug__niew {
            req_builder = req_builder.query(&[("slug__niew", &s.to_string())]);
        }
        if let Some(ref s) = slug__isw {
            req_builder = req_builder.query(&[("slug__isw", &s.to_string())]);
        }
        if let Some(ref s) = slug__nisw {
            req_builder = req_builder.query(&[("slug__nisw", &s.to_string())]);
        }
        if let Some(ref s) = slug__ie {
            req_builder = req_builder.query(&[("slug__ie", &s.to_string())]);
        }
        if let Some(ref s) = slug__nie {
            req_builder = req_builder.query(&[("slug__nie", &s.to_string())]);
        }
        if let Some(ref s) = parent_id__n {
            req_builder = req_builder.query(&[("parent_id__n", &s.to_string())]);
        }
        if let Some(ref s) = parent__n {
            req_builder = req_builder.query(&[("parent__n", &s.to_string())]);
        }
        if let Some(ref s) = limit {
            req_builder = req_builder.query(&[("limit", &s.to_string())]);
        }
        if let Some(ref s) = offset {
            req_builder = req_builder.query(&[("offset", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_regions_partial_update(
        &self,
        id: i32,
        data: crate::models::WritableRegion,
    ) -> Result<crate::models::Region, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/dcim/regions/{id}/", configuration.base_path, id = id);
        let mut req_builder = client.patch(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_regions_read(&self, id: i32) -> Result<crate::models::Region, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/dcim/regions/{id}/", configuration.base_path, id = id);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_regions_update(
        &self,
        id: i32,
        data: crate::models::WritableRegion,
    ) -> Result<crate::models::Region, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/dcim/regions/{id}/", configuration.base_path, id = id);
        let mut req_builder = client.put(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_sites_create(
        &self,
        data: crate::models::WritableSite,
    ) -> Result<crate::models::Site, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/dcim/sites/", configuration.base_path);
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_sites_delete(&self, id: i32) -> Result<(), Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/dcim/sites/{id}/", configuration.base_path, id = id);
        let mut req_builder = client.delete(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        client.execute(req)?.error_for_status()?;
        Ok(())
    }

    fn dcim_sites_graphs(&self, id: i32) -> Result<crate::models::Site, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/dcim/sites/{id}/graphs/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_sites_list(
        &self,
        id: Option<&str>,
        name: Option<&str>,
        slug: Option<&str>,
        facility: Option<&str>,
        asn: Option<&str>,
        latitude: Option<&str>,
        longitude: Option<&str>,
        contact_name: Option<&str>,
        contact_phone: Option<&str>,
        contact_email: Option<&str>,
        tenant_group_id: Option<&str>,
        tenant_group: Option<&str>,
        tenant_id: Option<&str>,
        tenant: Option<&str>,
        created: Option<&str>,
        created__gte: Option<&str>,
        created__lte: Option<&str>,
        last_updated: Option<&str>,
        last_updated__gte: Option<&str>,
        last_updated__lte: Option<&str>,
        id__in: Option<&str>,
        q: Option<&str>,
        status: Option<&str>,
        region_id: Option<&str>,
        region: Option<&str>,
        tag: Option<&str>,
        id__n: Option<&str>,
        id__lte: Option<&str>,
        id__lt: Option<&str>,
        id__gte: Option<&str>,
        id__gt: Option<&str>,
        name__n: Option<&str>,
        name__ic: Option<&str>,
        name__nic: Option<&str>,
        name__iew: Option<&str>,
        name__niew: Option<&str>,
        name__isw: Option<&str>,
        name__nisw: Option<&str>,
        name__ie: Option<&str>,
        name__nie: Option<&str>,
        slug__n: Option<&str>,
        slug__ic: Option<&str>,
        slug__nic: Option<&str>,
        slug__iew: Option<&str>,
        slug__niew: Option<&str>,
        slug__isw: Option<&str>,
        slug__nisw: Option<&str>,
        slug__ie: Option<&str>,
        slug__nie: Option<&str>,
        facility__n: Option<&str>,
        facility__ic: Option<&str>,
        facility__nic: Option<&str>,
        facility__iew: Option<&str>,
        facility__niew: Option<&str>,
        facility__isw: Option<&str>,
        facility__nisw: Option<&str>,
        facility__ie: Option<&str>,
        facility__nie: Option<&str>,
        asn__n: Option<&str>,
        asn__lte: Option<&str>,
        asn__lt: Option<&str>,
        asn__gte: Option<&str>,
        asn__gt: Option<&str>,
        latitude__n: Option<&str>,
        latitude__lte: Option<&str>,
        latitude__lt: Option<&str>,
        latitude__gte: Option<&str>,
        latitude__gt: Option<&str>,
        longitude__n: Option<&str>,
        longitude__lte: Option<&str>,
        longitude__lt: Option<&str>,
        longitude__gte: Option<&str>,
        longitude__gt: Option<&str>,
        contact_name__n: Option<&str>,
        contact_name__ic: Option<&str>,
        contact_name__nic: Option<&str>,
        contact_name__iew: Option<&str>,
        contact_name__niew: Option<&str>,
        contact_name__isw: Option<&str>,
        contact_name__nisw: Option<&str>,
        contact_name__ie: Option<&str>,
        contact_name__nie: Option<&str>,
        contact_phone__n: Option<&str>,
        contact_phone__ic: Option<&str>,
        contact_phone__nic: Option<&str>,
        contact_phone__iew: Option<&str>,
        contact_phone__niew: Option<&str>,
        contact_phone__isw: Option<&str>,
        contact_phone__nisw: Option<&str>,
        contact_phone__ie: Option<&str>,
        contact_phone__nie: Option<&str>,
        contact_email__n: Option<&str>,
        contact_email__ic: Option<&str>,
        contact_email__nic: Option<&str>,
        contact_email__iew: Option<&str>,
        contact_email__niew: Option<&str>,
        contact_email__isw: Option<&str>,
        contact_email__nisw: Option<&str>,
        contact_email__ie: Option<&str>,
        contact_email__nie: Option<&str>,
        tenant_group_id__n: Option<&str>,
        tenant_group__n: Option<&str>,
        tenant_id__n: Option<&str>,
        tenant__n: Option<&str>,
        status__n: Option<&str>,
        region_id__n: Option<&str>,
        region__n: Option<&str>,
        tag__n: Option<&str>,
        limit: Option<i32>,
        offset: Option<i32>,
    ) -> Result<crate::models::InlineResponse20035, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/dcim/sites/", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = id {
            req_builder = req_builder.query(&[("id", &s.to_string())]);
        }
        if let Some(ref s) = name {
            req_builder = req_builder.query(&[("name", &s.to_string())]);
        }
        if let Some(ref s) = slug {
            req_builder = req_builder.query(&[("slug", &s.to_string())]);
        }
        if let Some(ref s) = facility {
            req_builder = req_builder.query(&[("facility", &s.to_string())]);
        }
        if let Some(ref s) = asn {
            req_builder = req_builder.query(&[("asn", &s.to_string())]);
        }
        if let Some(ref s) = latitude {
            req_builder = req_builder.query(&[("latitude", &s.to_string())]);
        }
        if let Some(ref s) = longitude {
            req_builder = req_builder.query(&[("longitude", &s.to_string())]);
        }
        if let Some(ref s) = contact_name {
            req_builder = req_builder.query(&[("contact_name", &s.to_string())]);
        }
        if let Some(ref s) = contact_phone {
            req_builder = req_builder.query(&[("contact_phone", &s.to_string())]);
        }
        if let Some(ref s) = contact_email {
            req_builder = req_builder.query(&[("contact_email", &s.to_string())]);
        }
        if let Some(ref s) = tenant_group_id {
            req_builder = req_builder.query(&[("tenant_group_id", &s.to_string())]);
        }
        if let Some(ref s) = tenant_group {
            req_builder = req_builder.query(&[("tenant_group", &s.to_string())]);
        }
        if let Some(ref s) = tenant_id {
            req_builder = req_builder.query(&[("tenant_id", &s.to_string())]);
        }
        if let Some(ref s) = tenant {
            req_builder = req_builder.query(&[("tenant", &s.to_string())]);
        }
        if let Some(ref s) = created {
            req_builder = req_builder.query(&[("created", &s.to_string())]);
        }
        if let Some(ref s) = created__gte {
            req_builder = req_builder.query(&[("created__gte", &s.to_string())]);
        }
        if let Some(ref s) = created__lte {
            req_builder = req_builder.query(&[("created__lte", &s.to_string())]);
        }
        if let Some(ref s) = last_updated {
            req_builder = req_builder.query(&[("last_updated", &s.to_string())]);
        }
        if let Some(ref s) = last_updated__gte {
            req_builder = req_builder.query(&[("last_updated__gte", &s.to_string())]);
        }
        if let Some(ref s) = last_updated__lte {
            req_builder = req_builder.query(&[("last_updated__lte", &s.to_string())]);
        }
        if let Some(ref s) = id__in {
            req_builder = req_builder.query(&[("id__in", &s.to_string())]);
        }
        if let Some(ref s) = q {
            req_builder = req_builder.query(&[("q", &s.to_string())]);
        }
        if let Some(ref s) = status {
            req_builder = req_builder.query(&[("status", &s.to_string())]);
        }
        if let Some(ref s) = region_id {
            req_builder = req_builder.query(&[("region_id", &s.to_string())]);
        }
        if let Some(ref s) = region {
            req_builder = req_builder.query(&[("region", &s.to_string())]);
        }
        if let Some(ref s) = tag {
            req_builder = req_builder.query(&[("tag", &s.to_string())]);
        }
        if let Some(ref s) = id__n {
            req_builder = req_builder.query(&[("id__n", &s.to_string())]);
        }
        if let Some(ref s) = id__lte {
            req_builder = req_builder.query(&[("id__lte", &s.to_string())]);
        }
        if let Some(ref s) = id__lt {
            req_builder = req_builder.query(&[("id__lt", &s.to_string())]);
        }
        if let Some(ref s) = id__gte {
            req_builder = req_builder.query(&[("id__gte", &s.to_string())]);
        }
        if let Some(ref s) = id__gt {
            req_builder = req_builder.query(&[("id__gt", &s.to_string())]);
        }
        if let Some(ref s) = name__n {
            req_builder = req_builder.query(&[("name__n", &s.to_string())]);
        }
        if let Some(ref s) = name__ic {
            req_builder = req_builder.query(&[("name__ic", &s.to_string())]);
        }
        if let Some(ref s) = name__nic {
            req_builder = req_builder.query(&[("name__nic", &s.to_string())]);
        }
        if let Some(ref s) = name__iew {
            req_builder = req_builder.query(&[("name__iew", &s.to_string())]);
        }
        if let Some(ref s) = name__niew {
            req_builder = req_builder.query(&[("name__niew", &s.to_string())]);
        }
        if let Some(ref s) = name__isw {
            req_builder = req_builder.query(&[("name__isw", &s.to_string())]);
        }
        if let Some(ref s) = name__nisw {
            req_builder = req_builder.query(&[("name__nisw", &s.to_string())]);
        }
        if let Some(ref s) = name__ie {
            req_builder = req_builder.query(&[("name__ie", &s.to_string())]);
        }
        if let Some(ref s) = name__nie {
            req_builder = req_builder.query(&[("name__nie", &s.to_string())]);
        }
        if let Some(ref s) = slug__n {
            req_builder = req_builder.query(&[("slug__n", &s.to_string())]);
        }
        if let Some(ref s) = slug__ic {
            req_builder = req_builder.query(&[("slug__ic", &s.to_string())]);
        }
        if let Some(ref s) = slug__nic {
            req_builder = req_builder.query(&[("slug__nic", &s.to_string())]);
        }
        if let Some(ref s) = slug__iew {
            req_builder = req_builder.query(&[("slug__iew", &s.to_string())]);
        }
        if let Some(ref s) = slug__niew {
            req_builder = req_builder.query(&[("slug__niew", &s.to_string())]);
        }
        if let Some(ref s) = slug__isw {
            req_builder = req_builder.query(&[("slug__isw", &s.to_string())]);
        }
        if let Some(ref s) = slug__nisw {
            req_builder = req_builder.query(&[("slug__nisw", &s.to_string())]);
        }
        if let Some(ref s) = slug__ie {
            req_builder = req_builder.query(&[("slug__ie", &s.to_string())]);
        }
        if let Some(ref s) = slug__nie {
            req_builder = req_builder.query(&[("slug__nie", &s.to_string())]);
        }
        if let Some(ref s) = facility__n {
            req_builder = req_builder.query(&[("facility__n", &s.to_string())]);
        }
        if let Some(ref s) = facility__ic {
            req_builder = req_builder.query(&[("facility__ic", &s.to_string())]);
        }
        if let Some(ref s) = facility__nic {
            req_builder = req_builder.query(&[("facility__nic", &s.to_string())]);
        }
        if let Some(ref s) = facility__iew {
            req_builder = req_builder.query(&[("facility__iew", &s.to_string())]);
        }
        if let Some(ref s) = facility__niew {
            req_builder = req_builder.query(&[("facility__niew", &s.to_string())]);
        }
        if let Some(ref s) = facility__isw {
            req_builder = req_builder.query(&[("facility__isw", &s.to_string())]);
        }
        if let Some(ref s) = facility__nisw {
            req_builder = req_builder.query(&[("facility__nisw", &s.to_string())]);
        }
        if let Some(ref s) = facility__ie {
            req_builder = req_builder.query(&[("facility__ie", &s.to_string())]);
        }
        if let Some(ref s) = facility__nie {
            req_builder = req_builder.query(&[("facility__nie", &s.to_string())]);
        }
        if let Some(ref s) = asn__n {
            req_builder = req_builder.query(&[("asn__n", &s.to_string())]);
        }
        if let Some(ref s) = asn__lte {
            req_builder = req_builder.query(&[("asn__lte", &s.to_string())]);
        }
        if let Some(ref s) = asn__lt {
            req_builder = req_builder.query(&[("asn__lt", &s.to_string())]);
        }
        if let Some(ref s) = asn__gte {
            req_builder = req_builder.query(&[("asn__gte", &s.to_string())]);
        }
        if let Some(ref s) = asn__gt {
            req_builder = req_builder.query(&[("asn__gt", &s.to_string())]);
        }
        if let Some(ref s) = latitude__n {
            req_builder = req_builder.query(&[("latitude__n", &s.to_string())]);
        }
        if let Some(ref s) = latitude__lte {
            req_builder = req_builder.query(&[("latitude__lte", &s.to_string())]);
        }
        if let Some(ref s) = latitude__lt {
            req_builder = req_builder.query(&[("latitude__lt", &s.to_string())]);
        }
        if let Some(ref s) = latitude__gte {
            req_builder = req_builder.query(&[("latitude__gte", &s.to_string())]);
        }
        if let Some(ref s) = latitude__gt {
            req_builder = req_builder.query(&[("latitude__gt", &s.to_string())]);
        }
        if let Some(ref s) = longitude__n {
            req_builder = req_builder.query(&[("longitude__n", &s.to_string())]);
        }
        if let Some(ref s) = longitude__lte {
            req_builder = req_builder.query(&[("longitude__lte", &s.to_string())]);
        }
        if let Some(ref s) = longitude__lt {
            req_builder = req_builder.query(&[("longitude__lt", &s.to_string())]);
        }
        if let Some(ref s) = longitude__gte {
            req_builder = req_builder.query(&[("longitude__gte", &s.to_string())]);
        }
        if let Some(ref s) = longitude__gt {
            req_builder = req_builder.query(&[("longitude__gt", &s.to_string())]);
        }
        if let Some(ref s) = contact_name__n {
            req_builder = req_builder.query(&[("contact_name__n", &s.to_string())]);
        }
        if let Some(ref s) = contact_name__ic {
            req_builder = req_builder.query(&[("contact_name__ic", &s.to_string())]);
        }
        if let Some(ref s) = contact_name__nic {
            req_builder = req_builder.query(&[("contact_name__nic", &s.to_string())]);
        }
        if let Some(ref s) = contact_name__iew {
            req_builder = req_builder.query(&[("contact_name__iew", &s.to_string())]);
        }
        if let Some(ref s) = contact_name__niew {
            req_builder = req_builder.query(&[("contact_name__niew", &s.to_string())]);
        }
        if let Some(ref s) = contact_name__isw {
            req_builder = req_builder.query(&[("contact_name__isw", &s.to_string())]);
        }
        if let Some(ref s) = contact_name__nisw {
            req_builder = req_builder.query(&[("contact_name__nisw", &s.to_string())]);
        }
        if let Some(ref s) = contact_name__ie {
            req_builder = req_builder.query(&[("contact_name__ie", &s.to_string())]);
        }
        if let Some(ref s) = contact_name__nie {
            req_builder = req_builder.query(&[("contact_name__nie", &s.to_string())]);
        }
        if let Some(ref s) = contact_phone__n {
            req_builder = req_builder.query(&[("contact_phone__n", &s.to_string())]);
        }
        if let Some(ref s) = contact_phone__ic {
            req_builder = req_builder.query(&[("contact_phone__ic", &s.to_string())]);
        }
        if let Some(ref s) = contact_phone__nic {
            req_builder = req_builder.query(&[("contact_phone__nic", &s.to_string())]);
        }
        if let Some(ref s) = contact_phone__iew {
            req_builder = req_builder.query(&[("contact_phone__iew", &s.to_string())]);
        }
        if let Some(ref s) = contact_phone__niew {
            req_builder = req_builder.query(&[("contact_phone__niew", &s.to_string())]);
        }
        if let Some(ref s) = contact_phone__isw {
            req_builder = req_builder.query(&[("contact_phone__isw", &s.to_string())]);
        }
        if let Some(ref s) = contact_phone__nisw {
            req_builder = req_builder.query(&[("contact_phone__nisw", &s.to_string())]);
        }
        if let Some(ref s) = contact_phone__ie {
            req_builder = req_builder.query(&[("contact_phone__ie", &s.to_string())]);
        }
        if let Some(ref s) = contact_phone__nie {
            req_builder = req_builder.query(&[("contact_phone__nie", &s.to_string())]);
        }
        if let Some(ref s) = contact_email__n {
            req_builder = req_builder.query(&[("contact_email__n", &s.to_string())]);
        }
        if let Some(ref s) = contact_email__ic {
            req_builder = req_builder.query(&[("contact_email__ic", &s.to_string())]);
        }
        if let Some(ref s) = contact_email__nic {
            req_builder = req_builder.query(&[("contact_email__nic", &s.to_string())]);
        }
        if let Some(ref s) = contact_email__iew {
            req_builder = req_builder.query(&[("contact_email__iew", &s.to_string())]);
        }
        if let Some(ref s) = contact_email__niew {
            req_builder = req_builder.query(&[("contact_email__niew", &s.to_string())]);
        }
        if let Some(ref s) = contact_email__isw {
            req_builder = req_builder.query(&[("contact_email__isw", &s.to_string())]);
        }
        if let Some(ref s) = contact_email__nisw {
            req_builder = req_builder.query(&[("contact_email__nisw", &s.to_string())]);
        }
        if let Some(ref s) = contact_email__ie {
            req_builder = req_builder.query(&[("contact_email__ie", &s.to_string())]);
        }
        if let Some(ref s) = contact_email__nie {
            req_builder = req_builder.query(&[("contact_email__nie", &s.to_string())]);
        }
        if let Some(ref s) = tenant_group_id__n {
            req_builder = req_builder.query(&[("tenant_group_id__n", &s.to_string())]);
        }
        if let Some(ref s) = tenant_group__n {
            req_builder = req_builder.query(&[("tenant_group__n", &s.to_string())]);
        }
        if let Some(ref s) = tenant_id__n {
            req_builder = req_builder.query(&[("tenant_id__n", &s.to_string())]);
        }
        if let Some(ref s) = tenant__n {
            req_builder = req_builder.query(&[("tenant__n", &s.to_string())]);
        }
        if let Some(ref s) = status__n {
            req_builder = req_builder.query(&[("status__n", &s.to_string())]);
        }
        if let Some(ref s) = region_id__n {
            req_builder = req_builder.query(&[("region_id__n", &s.to_string())]);
        }
        if let Some(ref s) = region__n {
            req_builder = req_builder.query(&[("region__n", &s.to_string())]);
        }
        if let Some(ref s) = tag__n {
            req_builder = req_builder.query(&[("tag__n", &s.to_string())]);
        }
        if let Some(ref s) = limit {
            req_builder = req_builder.query(&[("limit", &s.to_string())]);
        }
        if let Some(ref s) = offset {
            req_builder = req_builder.query(&[("offset", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_sites_partial_update(
        &self,
        id: i32,
        data: crate::models::WritableSite,
    ) -> Result<crate::models::Site, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/dcim/sites/{id}/", configuration.base_path, id = id);
        let mut req_builder = client.patch(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_sites_read(&self, id: i32) -> Result<crate::models::Site, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/dcim/sites/{id}/", configuration.base_path, id = id);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_sites_update(
        &self,
        id: i32,
        data: crate::models::WritableSite,
    ) -> Result<crate::models::Site, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/dcim/sites/{id}/", configuration.base_path, id = id);
        let mut req_builder = client.put(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_virtual_chassis_create(
        &self,
        data: crate::models::WritableVirtualChassis,
    ) -> Result<crate::models::VirtualChassis, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/dcim/virtual-chassis/", configuration.base_path);
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_virtual_chassis_delete(&self, id: i32) -> Result<(), Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/dcim/virtual-chassis/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.delete(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        client.execute(req)?.error_for_status()?;
        Ok(())
    }

    fn dcim_virtual_chassis_list(
        &self,
        id: Option<&str>,
        domain: Option<&str>,
        q: Option<&str>,
        region_id: Option<&str>,
        region: Option<&str>,
        site_id: Option<&str>,
        site: Option<&str>,
        tenant_id: Option<&str>,
        tenant: Option<&str>,
        tag: Option<&str>,
        id__n: Option<&str>,
        id__lte: Option<&str>,
        id__lt: Option<&str>,
        id__gte: Option<&str>,
        id__gt: Option<&str>,
        domain__n: Option<&str>,
        domain__ic: Option<&str>,
        domain__nic: Option<&str>,
        domain__iew: Option<&str>,
        domain__niew: Option<&str>,
        domain__isw: Option<&str>,
        domain__nisw: Option<&str>,
        domain__ie: Option<&str>,
        domain__nie: Option<&str>,
        region_id__n: Option<&str>,
        region__n: Option<&str>,
        site_id__n: Option<&str>,
        site__n: Option<&str>,
        tenant_id__n: Option<&str>,
        tenant__n: Option<&str>,
        tag__n: Option<&str>,
        limit: Option<i32>,
        offset: Option<i32>,
    ) -> Result<crate::models::InlineResponse20036, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/dcim/virtual-chassis/", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = id {
            req_builder = req_builder.query(&[("id", &s.to_string())]);
        }
        if let Some(ref s) = domain {
            req_builder = req_builder.query(&[("domain", &s.to_string())]);
        }
        if let Some(ref s) = q {
            req_builder = req_builder.query(&[("q", &s.to_string())]);
        }
        if let Some(ref s) = region_id {
            req_builder = req_builder.query(&[("region_id", &s.to_string())]);
        }
        if let Some(ref s) = region {
            req_builder = req_builder.query(&[("region", &s.to_string())]);
        }
        if let Some(ref s) = site_id {
            req_builder = req_builder.query(&[("site_id", &s.to_string())]);
        }
        if let Some(ref s) = site {
            req_builder = req_builder.query(&[("site", &s.to_string())]);
        }
        if let Some(ref s) = tenant_id {
            req_builder = req_builder.query(&[("tenant_id", &s.to_string())]);
        }
        if let Some(ref s) = tenant {
            req_builder = req_builder.query(&[("tenant", &s.to_string())]);
        }
        if let Some(ref s) = tag {
            req_builder = req_builder.query(&[("tag", &s.to_string())]);
        }
        if let Some(ref s) = id__n {
            req_builder = req_builder.query(&[("id__n", &s.to_string())]);
        }
        if let Some(ref s) = id__lte {
            req_builder = req_builder.query(&[("id__lte", &s.to_string())]);
        }
        if let Some(ref s) = id__lt {
            req_builder = req_builder.query(&[("id__lt", &s.to_string())]);
        }
        if let Some(ref s) = id__gte {
            req_builder = req_builder.query(&[("id__gte", &s.to_string())]);
        }
        if let Some(ref s) = id__gt {
            req_builder = req_builder.query(&[("id__gt", &s.to_string())]);
        }
        if let Some(ref s) = domain__n {
            req_builder = req_builder.query(&[("domain__n", &s.to_string())]);
        }
        if let Some(ref s) = domain__ic {
            req_builder = req_builder.query(&[("domain__ic", &s.to_string())]);
        }
        if let Some(ref s) = domain__nic {
            req_builder = req_builder.query(&[("domain__nic", &s.to_string())]);
        }
        if let Some(ref s) = domain__iew {
            req_builder = req_builder.query(&[("domain__iew", &s.to_string())]);
        }
        if let Some(ref s) = domain__niew {
            req_builder = req_builder.query(&[("domain__niew", &s.to_string())]);
        }
        if let Some(ref s) = domain__isw {
            req_builder = req_builder.query(&[("domain__isw", &s.to_string())]);
        }
        if let Some(ref s) = domain__nisw {
            req_builder = req_builder.query(&[("domain__nisw", &s.to_string())]);
        }
        if let Some(ref s) = domain__ie {
            req_builder = req_builder.query(&[("domain__ie", &s.to_string())]);
        }
        if let Some(ref s) = domain__nie {
            req_builder = req_builder.query(&[("domain__nie", &s.to_string())]);
        }
        if let Some(ref s) = region_id__n {
            req_builder = req_builder.query(&[("region_id__n", &s.to_string())]);
        }
        if let Some(ref s) = region__n {
            req_builder = req_builder.query(&[("region__n", &s.to_string())]);
        }
        if let Some(ref s) = site_id__n {
            req_builder = req_builder.query(&[("site_id__n", &s.to_string())]);
        }
        if let Some(ref s) = site__n {
            req_builder = req_builder.query(&[("site__n", &s.to_string())]);
        }
        if let Some(ref s) = tenant_id__n {
            req_builder = req_builder.query(&[("tenant_id__n", &s.to_string())]);
        }
        if let Some(ref s) = tenant__n {
            req_builder = req_builder.query(&[("tenant__n", &s.to_string())]);
        }
        if let Some(ref s) = tag__n {
            req_builder = req_builder.query(&[("tag__n", &s.to_string())]);
        }
        if let Some(ref s) = limit {
            req_builder = req_builder.query(&[("limit", &s.to_string())]);
        }
        if let Some(ref s) = offset {
            req_builder = req_builder.query(&[("offset", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_virtual_chassis_partial_update(
        &self,
        id: i32,
        data: crate::models::WritableVirtualChassis,
    ) -> Result<crate::models::VirtualChassis, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/dcim/virtual-chassis/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.patch(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_virtual_chassis_read(&self, id: i32) -> Result<crate::models::VirtualChassis, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/dcim/virtual-chassis/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn dcim_virtual_chassis_update(
        &self,
        id: i32,
        data: crate::models::WritableVirtualChassis,
    ) -> Result<crate::models::VirtualChassis, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/dcim/virtual-chassis/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.put(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }
}
