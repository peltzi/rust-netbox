/*
 * NetBox API
 *
 * API to access NetBox
 *
 * The version of the OpenAPI document: 2.7
 *
 * Generated by: https://openapi-generator.tech
 */

use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;
use std::rc::Rc;

use reqwest;

use super::{configuration, Error};

pub struct ExtrasApiClient {
    configuration: Rc<configuration::Configuration>,
}

impl ExtrasApiClient {
    pub fn new(configuration: Rc<configuration::Configuration>) -> ExtrasApiClient {
        ExtrasApiClient { configuration }
    }
}

pub trait ExtrasApi {
    fn extras_choices_list(&self) -> Result<(), Error>;
    fn extras_choices_read(&self, id: &str) -> Result<(), Error>;
    fn extras_config_contexts_create(
        &self,
        data: crate::models::WritableConfigContext,
    ) -> Result<crate::models::ConfigContext, Error>;
    fn extras_config_contexts_delete(&self, id: i32) -> Result<(), Error>;
    fn extras_config_contexts_list(
        &self,
        name: Option<&str>,
        is_active: Option<&str>,
        q: Option<&str>,
        region_id: Option<&str>,
        region: Option<&str>,
        site_id: Option<&str>,
        site: Option<&str>,
        role_id: Option<&str>,
        role: Option<&str>,
        platform_id: Option<&str>,
        platform: Option<&str>,
        cluster_group_id: Option<&str>,
        cluster_group: Option<&str>,
        cluster_id: Option<&str>,
        tenant_group_id: Option<&str>,
        tenant_group: Option<&str>,
        tenant_id: Option<&str>,
        tenant: Option<&str>,
        tag: Option<&str>,
        name__n: Option<&str>,
        name__ic: Option<&str>,
        name__nic: Option<&str>,
        name__iew: Option<&str>,
        name__niew: Option<&str>,
        name__isw: Option<&str>,
        name__nisw: Option<&str>,
        name__ie: Option<&str>,
        name__nie: Option<&str>,
        region_id__n: Option<&str>,
        region__n: Option<&str>,
        site_id__n: Option<&str>,
        site__n: Option<&str>,
        role_id__n: Option<&str>,
        role__n: Option<&str>,
        platform_id__n: Option<&str>,
        platform__n: Option<&str>,
        cluster_group_id__n: Option<&str>,
        cluster_group__n: Option<&str>,
        cluster_id__n: Option<&str>,
        tenant_group_id__n: Option<&str>,
        tenant_group__n: Option<&str>,
        tenant_id__n: Option<&str>,
        tenant__n: Option<&str>,
        tag__n: Option<&str>,
        limit: Option<i32>,
        offset: Option<i32>,
    ) -> Result<crate::models::InlineResponse20037, Error>;
    fn extras_config_contexts_partial_update(
        &self,
        id: i32,
        data: crate::models::WritableConfigContext,
    ) -> Result<crate::models::ConfigContext, Error>;
    fn extras_config_contexts_read(&self, id: i32) -> Result<crate::models::ConfigContext, Error>;
    fn extras_config_contexts_update(
        &self,
        id: i32,
        data: crate::models::WritableConfigContext,
    ) -> Result<crate::models::ConfigContext, Error>;
    fn extras_custom_field_choices_list(&self) -> Result<(), Error>;
    fn extras_custom_field_choices_read(&self, id: &str) -> Result<(), Error>;
    fn extras_export_templates_create(
        &self,
        data: crate::models::WritableExportTemplate,
    ) -> Result<crate::models::ExportTemplate, Error>;
    fn extras_export_templates_delete(&self, id: i32) -> Result<(), Error>;
    fn extras_export_templates_list(
        &self,
        content_type: Option<&str>,
        name: Option<&str>,
        template_language: Option<&str>,
        content_type__n: Option<&str>,
        name__n: Option<&str>,
        name__ic: Option<&str>,
        name__nic: Option<&str>,
        name__iew: Option<&str>,
        name__niew: Option<&str>,
        name__isw: Option<&str>,
        name__nisw: Option<&str>,
        name__ie: Option<&str>,
        name__nie: Option<&str>,
        template_language__n: Option<&str>,
        limit: Option<i32>,
        offset: Option<i32>,
    ) -> Result<crate::models::InlineResponse20038, Error>;
    fn extras_export_templates_partial_update(
        &self,
        id: i32,
        data: crate::models::WritableExportTemplate,
    ) -> Result<crate::models::ExportTemplate, Error>;
    fn extras_export_templates_read(&self, id: i32)
        -> Result<crate::models::ExportTemplate, Error>;
    fn extras_export_templates_update(
        &self,
        id: i32,
        data: crate::models::WritableExportTemplate,
    ) -> Result<crate::models::ExportTemplate, Error>;
    fn extras_graphs_create(
        &self,
        data: crate::models::Graph,
    ) -> Result<crate::models::Graph, Error>;
    fn extras_graphs_delete(&self, id: i32) -> Result<(), Error>;
    fn extras_graphs_list(
        &self,
        _type: Option<&str>,
        name: Option<&str>,
        template_language: Option<&str>,
        type__n: Option<&str>,
        name__n: Option<&str>,
        name__ic: Option<&str>,
        name__nic: Option<&str>,
        name__iew: Option<&str>,
        name__niew: Option<&str>,
        name__isw: Option<&str>,
        name__nisw: Option<&str>,
        name__ie: Option<&str>,
        name__nie: Option<&str>,
        template_language__n: Option<&str>,
        limit: Option<i32>,
        offset: Option<i32>,
    ) -> Result<crate::models::InlineResponse20039, Error>;
    fn extras_graphs_partial_update(
        &self,
        id: i32,
        data: crate::models::Graph,
    ) -> Result<crate::models::Graph, Error>;
    fn extras_graphs_read(&self, id: i32) -> Result<crate::models::Graph, Error>;
    fn extras_graphs_update(
        &self,
        id: i32,
        data: crate::models::Graph,
    ) -> Result<crate::models::Graph, Error>;
    fn extras_image_attachments_create(
        &self,
        data: crate::models::ImageAttachment,
    ) -> Result<crate::models::ImageAttachment, Error>;
    fn extras_image_attachments_delete(&self, id: i32) -> Result<(), Error>;
    fn extras_image_attachments_list(
        &self,
        limit: Option<i32>,
        offset: Option<i32>,
    ) -> Result<crate::models::InlineResponse20040, Error>;
    fn extras_image_attachments_partial_update(
        &self,
        id: i32,
        data: crate::models::ImageAttachment,
    ) -> Result<crate::models::ImageAttachment, Error>;
    fn extras_image_attachments_read(
        &self,
        id: i32,
    ) -> Result<crate::models::ImageAttachment, Error>;
    fn extras_image_attachments_update(
        &self,
        id: i32,
        data: crate::models::ImageAttachment,
    ) -> Result<crate::models::ImageAttachment, Error>;
    fn extras_object_changes_list(
        &self,
        user: Option<&str>,
        user_name: Option<&str>,
        request_id: Option<&str>,
        action: Option<&str>,
        changed_object_type: Option<&str>,
        changed_object_id: Option<&str>,
        object_repr: Option<&str>,
        q: Option<&str>,
        time: Option<&str>,
        user__n: Option<&str>,
        user_name__n: Option<&str>,
        user_name__ic: Option<&str>,
        user_name__nic: Option<&str>,
        user_name__iew: Option<&str>,
        user_name__niew: Option<&str>,
        user_name__isw: Option<&str>,
        user_name__nisw: Option<&str>,
        user_name__ie: Option<&str>,
        user_name__nie: Option<&str>,
        action__n: Option<&str>,
        changed_object_type__n: Option<&str>,
        changed_object_id__n: Option<&str>,
        changed_object_id__lte: Option<&str>,
        changed_object_id__lt: Option<&str>,
        changed_object_id__gte: Option<&str>,
        changed_object_id__gt: Option<&str>,
        object_repr__n: Option<&str>,
        object_repr__ic: Option<&str>,
        object_repr__nic: Option<&str>,
        object_repr__iew: Option<&str>,
        object_repr__niew: Option<&str>,
        object_repr__isw: Option<&str>,
        object_repr__nisw: Option<&str>,
        object_repr__ie: Option<&str>,
        object_repr__nie: Option<&str>,
        limit: Option<i32>,
        offset: Option<i32>,
    ) -> Result<crate::models::InlineResponse20041, Error>;
    fn extras_object_changes_read(&self, id: i32) -> Result<crate::models::ObjectChange, Error>;
    fn extras_reports_list(&self) -> Result<(), Error>;
    fn extras_reports_read(&self, id: &str) -> Result<(), Error>;
    fn extras_reports_run(&self, id: &str) -> Result<(), Error>;
    fn extras_scripts_list(&self) -> Result<(), Error>;
    fn extras_scripts_read(&self, id: &str) -> Result<(), Error>;
    fn extras_tags_create(&self, data: crate::models::Tag) -> Result<crate::models::Tag, Error>;
    fn extras_tags_delete(&self, id: i32) -> Result<(), Error>;
    fn extras_tags_list(
        &self,
        name: Option<&str>,
        slug: Option<&str>,
        q: Option<&str>,
        name__n: Option<&str>,
        name__ic: Option<&str>,
        name__nic: Option<&str>,
        name__iew: Option<&str>,
        name__niew: Option<&str>,
        name__isw: Option<&str>,
        name__nisw: Option<&str>,
        name__ie: Option<&str>,
        name__nie: Option<&str>,
        slug__n: Option<&str>,
        slug__ic: Option<&str>,
        slug__nic: Option<&str>,
        slug__iew: Option<&str>,
        slug__niew: Option<&str>,
        slug__isw: Option<&str>,
        slug__nisw: Option<&str>,
        slug__ie: Option<&str>,
        slug__nie: Option<&str>,
        limit: Option<i32>,
        offset: Option<i32>,
    ) -> Result<crate::models::InlineResponse20042, Error>;
    fn extras_tags_partial_update(
        &self,
        id: i32,
        data: crate::models::Tag,
    ) -> Result<crate::models::Tag, Error>;
    fn extras_tags_read(&self, id: i32) -> Result<crate::models::Tag, Error>;
    fn extras_tags_update(
        &self,
        id: i32,
        data: crate::models::Tag,
    ) -> Result<crate::models::Tag, Error>;
}

impl ExtrasApi for ExtrasApiClient {
    fn extras_choices_list(&self) -> Result<(), Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/extras/_choices/", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        client.execute(req)?.error_for_status()?;
        Ok(())
    }

    fn extras_choices_read(&self, id: &str) -> Result<(), Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/extras/_choices/{id}/",
            configuration.base_path,
            id = crate::apis::urlencode(id)
        );
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        client.execute(req)?.error_for_status()?;
        Ok(())
    }

    fn extras_config_contexts_create(
        &self,
        data: crate::models::WritableConfigContext,
    ) -> Result<crate::models::ConfigContext, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/extras/config-contexts/", configuration.base_path);
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn extras_config_contexts_delete(&self, id: i32) -> Result<(), Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/extras/config-contexts/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.delete(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        client.execute(req)?.error_for_status()?;
        Ok(())
    }

    fn extras_config_contexts_list(
        &self,
        name: Option<&str>,
        is_active: Option<&str>,
        q: Option<&str>,
        region_id: Option<&str>,
        region: Option<&str>,
        site_id: Option<&str>,
        site: Option<&str>,
        role_id: Option<&str>,
        role: Option<&str>,
        platform_id: Option<&str>,
        platform: Option<&str>,
        cluster_group_id: Option<&str>,
        cluster_group: Option<&str>,
        cluster_id: Option<&str>,
        tenant_group_id: Option<&str>,
        tenant_group: Option<&str>,
        tenant_id: Option<&str>,
        tenant: Option<&str>,
        tag: Option<&str>,
        name__n: Option<&str>,
        name__ic: Option<&str>,
        name__nic: Option<&str>,
        name__iew: Option<&str>,
        name__niew: Option<&str>,
        name__isw: Option<&str>,
        name__nisw: Option<&str>,
        name__ie: Option<&str>,
        name__nie: Option<&str>,
        region_id__n: Option<&str>,
        region__n: Option<&str>,
        site_id__n: Option<&str>,
        site__n: Option<&str>,
        role_id__n: Option<&str>,
        role__n: Option<&str>,
        platform_id__n: Option<&str>,
        platform__n: Option<&str>,
        cluster_group_id__n: Option<&str>,
        cluster_group__n: Option<&str>,
        cluster_id__n: Option<&str>,
        tenant_group_id__n: Option<&str>,
        tenant_group__n: Option<&str>,
        tenant_id__n: Option<&str>,
        tenant__n: Option<&str>,
        tag__n: Option<&str>,
        limit: Option<i32>,
        offset: Option<i32>,
    ) -> Result<crate::models::InlineResponse20037, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/extras/config-contexts/", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = name {
            req_builder = req_builder.query(&[("name", &s.to_string())]);
        }
        if let Some(ref s) = is_active {
            req_builder = req_builder.query(&[("is_active", &s.to_string())]);
        }
        if let Some(ref s) = q {
            req_builder = req_builder.query(&[("q", &s.to_string())]);
        }
        if let Some(ref s) = region_id {
            req_builder = req_builder.query(&[("region_id", &s.to_string())]);
        }
        if let Some(ref s) = region {
            req_builder = req_builder.query(&[("region", &s.to_string())]);
        }
        if let Some(ref s) = site_id {
            req_builder = req_builder.query(&[("site_id", &s.to_string())]);
        }
        if let Some(ref s) = site {
            req_builder = req_builder.query(&[("site", &s.to_string())]);
        }
        if let Some(ref s) = role_id {
            req_builder = req_builder.query(&[("role_id", &s.to_string())]);
        }
        if let Some(ref s) = role {
            req_builder = req_builder.query(&[("role", &s.to_string())]);
        }
        if let Some(ref s) = platform_id {
            req_builder = req_builder.query(&[("platform_id", &s.to_string())]);
        }
        if let Some(ref s) = platform {
            req_builder = req_builder.query(&[("platform", &s.to_string())]);
        }
        if let Some(ref s) = cluster_group_id {
            req_builder = req_builder.query(&[("cluster_group_id", &s.to_string())]);
        }
        if let Some(ref s) = cluster_group {
            req_builder = req_builder.query(&[("cluster_group", &s.to_string())]);
        }
        if let Some(ref s) = cluster_id {
            req_builder = req_builder.query(&[("cluster_id", &s.to_string())]);
        }
        if let Some(ref s) = tenant_group_id {
            req_builder = req_builder.query(&[("tenant_group_id", &s.to_string())]);
        }
        if let Some(ref s) = tenant_group {
            req_builder = req_builder.query(&[("tenant_group", &s.to_string())]);
        }
        if let Some(ref s) = tenant_id {
            req_builder = req_builder.query(&[("tenant_id", &s.to_string())]);
        }
        if let Some(ref s) = tenant {
            req_builder = req_builder.query(&[("tenant", &s.to_string())]);
        }
        if let Some(ref s) = tag {
            req_builder = req_builder.query(&[("tag", &s.to_string())]);
        }
        if let Some(ref s) = name__n {
            req_builder = req_builder.query(&[("name__n", &s.to_string())]);
        }
        if let Some(ref s) = name__ic {
            req_builder = req_builder.query(&[("name__ic", &s.to_string())]);
        }
        if let Some(ref s) = name__nic {
            req_builder = req_builder.query(&[("name__nic", &s.to_string())]);
        }
        if let Some(ref s) = name__iew {
            req_builder = req_builder.query(&[("name__iew", &s.to_string())]);
        }
        if let Some(ref s) = name__niew {
            req_builder = req_builder.query(&[("name__niew", &s.to_string())]);
        }
        if let Some(ref s) = name__isw {
            req_builder = req_builder.query(&[("name__isw", &s.to_string())]);
        }
        if let Some(ref s) = name__nisw {
            req_builder = req_builder.query(&[("name__nisw", &s.to_string())]);
        }
        if let Some(ref s) = name__ie {
            req_builder = req_builder.query(&[("name__ie", &s.to_string())]);
        }
        if let Some(ref s) = name__nie {
            req_builder = req_builder.query(&[("name__nie", &s.to_string())]);
        }
        if let Some(ref s) = region_id__n {
            req_builder = req_builder.query(&[("region_id__n", &s.to_string())]);
        }
        if let Some(ref s) = region__n {
            req_builder = req_builder.query(&[("region__n", &s.to_string())]);
        }
        if let Some(ref s) = site_id__n {
            req_builder = req_builder.query(&[("site_id__n", &s.to_string())]);
        }
        if let Some(ref s) = site__n {
            req_builder = req_builder.query(&[("site__n", &s.to_string())]);
        }
        if let Some(ref s) = role_id__n {
            req_builder = req_builder.query(&[("role_id__n", &s.to_string())]);
        }
        if let Some(ref s) = role__n {
            req_builder = req_builder.query(&[("role__n", &s.to_string())]);
        }
        if let Some(ref s) = platform_id__n {
            req_builder = req_builder.query(&[("platform_id__n", &s.to_string())]);
        }
        if let Some(ref s) = platform__n {
            req_builder = req_builder.query(&[("platform__n", &s.to_string())]);
        }
        if let Some(ref s) = cluster_group_id__n {
            req_builder = req_builder.query(&[("cluster_group_id__n", &s.to_string())]);
        }
        if let Some(ref s) = cluster_group__n {
            req_builder = req_builder.query(&[("cluster_group__n", &s.to_string())]);
        }
        if let Some(ref s) = cluster_id__n {
            req_builder = req_builder.query(&[("cluster_id__n", &s.to_string())]);
        }
        if let Some(ref s) = tenant_group_id__n {
            req_builder = req_builder.query(&[("tenant_group_id__n", &s.to_string())]);
        }
        if let Some(ref s) = tenant_group__n {
            req_builder = req_builder.query(&[("tenant_group__n", &s.to_string())]);
        }
        if let Some(ref s) = tenant_id__n {
            req_builder = req_builder.query(&[("tenant_id__n", &s.to_string())]);
        }
        if let Some(ref s) = tenant__n {
            req_builder = req_builder.query(&[("tenant__n", &s.to_string())]);
        }
        if let Some(ref s) = tag__n {
            req_builder = req_builder.query(&[("tag__n", &s.to_string())]);
        }
        if let Some(ref s) = limit {
            req_builder = req_builder.query(&[("limit", &s.to_string())]);
        }
        if let Some(ref s) = offset {
            req_builder = req_builder.query(&[("offset", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn extras_config_contexts_partial_update(
        &self,
        id: i32,
        data: crate::models::WritableConfigContext,
    ) -> Result<crate::models::ConfigContext, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/extras/config-contexts/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.patch(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn extras_config_contexts_read(&self, id: i32) -> Result<crate::models::ConfigContext, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/extras/config-contexts/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn extras_config_contexts_update(
        &self,
        id: i32,
        data: crate::models::WritableConfigContext,
    ) -> Result<crate::models::ConfigContext, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/extras/config-contexts/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.put(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn extras_custom_field_choices_list(&self) -> Result<(), Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/extras/_custom_field_choices/", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        client.execute(req)?.error_for_status()?;
        Ok(())
    }

    fn extras_custom_field_choices_read(&self, id: &str) -> Result<(), Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/extras/_custom_field_choices/{id}/",
            configuration.base_path,
            id = crate::apis::urlencode(id)
        );
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        client.execute(req)?.error_for_status()?;
        Ok(())
    }

    fn extras_export_templates_create(
        &self,
        data: crate::models::WritableExportTemplate,
    ) -> Result<crate::models::ExportTemplate, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/extras/export-templates/", configuration.base_path);
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn extras_export_templates_delete(&self, id: i32) -> Result<(), Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/extras/export-templates/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.delete(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        client.execute(req)?.error_for_status()?;
        Ok(())
    }

    fn extras_export_templates_list(
        &self,
        content_type: Option<&str>,
        name: Option<&str>,
        template_language: Option<&str>,
        content_type__n: Option<&str>,
        name__n: Option<&str>,
        name__ic: Option<&str>,
        name__nic: Option<&str>,
        name__iew: Option<&str>,
        name__niew: Option<&str>,
        name__isw: Option<&str>,
        name__nisw: Option<&str>,
        name__ie: Option<&str>,
        name__nie: Option<&str>,
        template_language__n: Option<&str>,
        limit: Option<i32>,
        offset: Option<i32>,
    ) -> Result<crate::models::InlineResponse20038, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/extras/export-templates/", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = content_type {
            req_builder = req_builder.query(&[("content_type", &s.to_string())]);
        }
        if let Some(ref s) = name {
            req_builder = req_builder.query(&[("name", &s.to_string())]);
        }
        if let Some(ref s) = template_language {
            req_builder = req_builder.query(&[("template_language", &s.to_string())]);
        }
        if let Some(ref s) = content_type__n {
            req_builder = req_builder.query(&[("content_type__n", &s.to_string())]);
        }
        if let Some(ref s) = name__n {
            req_builder = req_builder.query(&[("name__n", &s.to_string())]);
        }
        if let Some(ref s) = name__ic {
            req_builder = req_builder.query(&[("name__ic", &s.to_string())]);
        }
        if let Some(ref s) = name__nic {
            req_builder = req_builder.query(&[("name__nic", &s.to_string())]);
        }
        if let Some(ref s) = name__iew {
            req_builder = req_builder.query(&[("name__iew", &s.to_string())]);
        }
        if let Some(ref s) = name__niew {
            req_builder = req_builder.query(&[("name__niew", &s.to_string())]);
        }
        if let Some(ref s) = name__isw {
            req_builder = req_builder.query(&[("name__isw", &s.to_string())]);
        }
        if let Some(ref s) = name__nisw {
            req_builder = req_builder.query(&[("name__nisw", &s.to_string())]);
        }
        if let Some(ref s) = name__ie {
            req_builder = req_builder.query(&[("name__ie", &s.to_string())]);
        }
        if let Some(ref s) = name__nie {
            req_builder = req_builder.query(&[("name__nie", &s.to_string())]);
        }
        if let Some(ref s) = template_language__n {
            req_builder = req_builder.query(&[("template_language__n", &s.to_string())]);
        }
        if let Some(ref s) = limit {
            req_builder = req_builder.query(&[("limit", &s.to_string())]);
        }
        if let Some(ref s) = offset {
            req_builder = req_builder.query(&[("offset", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn extras_export_templates_partial_update(
        &self,
        id: i32,
        data: crate::models::WritableExportTemplate,
    ) -> Result<crate::models::ExportTemplate, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/extras/export-templates/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.patch(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn extras_export_templates_read(
        &self,
        id: i32,
    ) -> Result<crate::models::ExportTemplate, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/extras/export-templates/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn extras_export_templates_update(
        &self,
        id: i32,
        data: crate::models::WritableExportTemplate,
    ) -> Result<crate::models::ExportTemplate, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/extras/export-templates/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.put(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn extras_graphs_create(
        &self,
        data: crate::models::Graph,
    ) -> Result<crate::models::Graph, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/extras/graphs/", configuration.base_path);
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn extras_graphs_delete(&self, id: i32) -> Result<(), Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/extras/graphs/{id}/", configuration.base_path, id = id);
        let mut req_builder = client.delete(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        client.execute(req)?.error_for_status()?;
        Ok(())
    }

    fn extras_graphs_list(
        &self,
        _type: Option<&str>,
        name: Option<&str>,
        template_language: Option<&str>,
        type__n: Option<&str>,
        name__n: Option<&str>,
        name__ic: Option<&str>,
        name__nic: Option<&str>,
        name__iew: Option<&str>,
        name__niew: Option<&str>,
        name__isw: Option<&str>,
        name__nisw: Option<&str>,
        name__ie: Option<&str>,
        name__nie: Option<&str>,
        template_language__n: Option<&str>,
        limit: Option<i32>,
        offset: Option<i32>,
    ) -> Result<crate::models::InlineResponse20039, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/extras/graphs/", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = _type {
            req_builder = req_builder.query(&[("type", &s.to_string())]);
        }
        if let Some(ref s) = name {
            req_builder = req_builder.query(&[("name", &s.to_string())]);
        }
        if let Some(ref s) = template_language {
            req_builder = req_builder.query(&[("template_language", &s.to_string())]);
        }
        if let Some(ref s) = type__n {
            req_builder = req_builder.query(&[("type__n", &s.to_string())]);
        }
        if let Some(ref s) = name__n {
            req_builder = req_builder.query(&[("name__n", &s.to_string())]);
        }
        if let Some(ref s) = name__ic {
            req_builder = req_builder.query(&[("name__ic", &s.to_string())]);
        }
        if let Some(ref s) = name__nic {
            req_builder = req_builder.query(&[("name__nic", &s.to_string())]);
        }
        if let Some(ref s) = name__iew {
            req_builder = req_builder.query(&[("name__iew", &s.to_string())]);
        }
        if let Some(ref s) = name__niew {
            req_builder = req_builder.query(&[("name__niew", &s.to_string())]);
        }
        if let Some(ref s) = name__isw {
            req_builder = req_builder.query(&[("name__isw", &s.to_string())]);
        }
        if let Some(ref s) = name__nisw {
            req_builder = req_builder.query(&[("name__nisw", &s.to_string())]);
        }
        if let Some(ref s) = name__ie {
            req_builder = req_builder.query(&[("name__ie", &s.to_string())]);
        }
        if let Some(ref s) = name__nie {
            req_builder = req_builder.query(&[("name__nie", &s.to_string())]);
        }
        if let Some(ref s) = template_language__n {
            req_builder = req_builder.query(&[("template_language__n", &s.to_string())]);
        }
        if let Some(ref s) = limit {
            req_builder = req_builder.query(&[("limit", &s.to_string())]);
        }
        if let Some(ref s) = offset {
            req_builder = req_builder.query(&[("offset", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn extras_graphs_partial_update(
        &self,
        id: i32,
        data: crate::models::Graph,
    ) -> Result<crate::models::Graph, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/extras/graphs/{id}/", configuration.base_path, id = id);
        let mut req_builder = client.patch(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn extras_graphs_read(&self, id: i32) -> Result<crate::models::Graph, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/extras/graphs/{id}/", configuration.base_path, id = id);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn extras_graphs_update(
        &self,
        id: i32,
        data: crate::models::Graph,
    ) -> Result<crate::models::Graph, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/extras/graphs/{id}/", configuration.base_path, id = id);
        let mut req_builder = client.put(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn extras_image_attachments_create(
        &self,
        data: crate::models::ImageAttachment,
    ) -> Result<crate::models::ImageAttachment, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/extras/image-attachments/", configuration.base_path);
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn extras_image_attachments_delete(&self, id: i32) -> Result<(), Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/extras/image-attachments/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.delete(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        client.execute(req)?.error_for_status()?;
        Ok(())
    }

    fn extras_image_attachments_list(
        &self,
        limit: Option<i32>,
        offset: Option<i32>,
    ) -> Result<crate::models::InlineResponse20040, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/extras/image-attachments/", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = limit {
            req_builder = req_builder.query(&[("limit", &s.to_string())]);
        }
        if let Some(ref s) = offset {
            req_builder = req_builder.query(&[("offset", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn extras_image_attachments_partial_update(
        &self,
        id: i32,
        data: crate::models::ImageAttachment,
    ) -> Result<crate::models::ImageAttachment, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/extras/image-attachments/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.patch(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn extras_image_attachments_read(
        &self,
        id: i32,
    ) -> Result<crate::models::ImageAttachment, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/extras/image-attachments/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn extras_image_attachments_update(
        &self,
        id: i32,
        data: crate::models::ImageAttachment,
    ) -> Result<crate::models::ImageAttachment, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/extras/image-attachments/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.put(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn extras_object_changes_list(
        &self,
        user: Option<&str>,
        user_name: Option<&str>,
        request_id: Option<&str>,
        action: Option<&str>,
        changed_object_type: Option<&str>,
        changed_object_id: Option<&str>,
        object_repr: Option<&str>,
        q: Option<&str>,
        time: Option<&str>,
        user__n: Option<&str>,
        user_name__n: Option<&str>,
        user_name__ic: Option<&str>,
        user_name__nic: Option<&str>,
        user_name__iew: Option<&str>,
        user_name__niew: Option<&str>,
        user_name__isw: Option<&str>,
        user_name__nisw: Option<&str>,
        user_name__ie: Option<&str>,
        user_name__nie: Option<&str>,
        action__n: Option<&str>,
        changed_object_type__n: Option<&str>,
        changed_object_id__n: Option<&str>,
        changed_object_id__lte: Option<&str>,
        changed_object_id__lt: Option<&str>,
        changed_object_id__gte: Option<&str>,
        changed_object_id__gt: Option<&str>,
        object_repr__n: Option<&str>,
        object_repr__ic: Option<&str>,
        object_repr__nic: Option<&str>,
        object_repr__iew: Option<&str>,
        object_repr__niew: Option<&str>,
        object_repr__isw: Option<&str>,
        object_repr__nisw: Option<&str>,
        object_repr__ie: Option<&str>,
        object_repr__nie: Option<&str>,
        limit: Option<i32>,
        offset: Option<i32>,
    ) -> Result<crate::models::InlineResponse20041, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/extras/object-changes/", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = user {
            req_builder = req_builder.query(&[("user", &s.to_string())]);
        }
        if let Some(ref s) = user_name {
            req_builder = req_builder.query(&[("user_name", &s.to_string())]);
        }
        if let Some(ref s) = request_id {
            req_builder = req_builder.query(&[("request_id", &s.to_string())]);
        }
        if let Some(ref s) = action {
            req_builder = req_builder.query(&[("action", &s.to_string())]);
        }
        if let Some(ref s) = changed_object_type {
            req_builder = req_builder.query(&[("changed_object_type", &s.to_string())]);
        }
        if let Some(ref s) = changed_object_id {
            req_builder = req_builder.query(&[("changed_object_id", &s.to_string())]);
        }
        if let Some(ref s) = object_repr {
            req_builder = req_builder.query(&[("object_repr", &s.to_string())]);
        }
        if let Some(ref s) = q {
            req_builder = req_builder.query(&[("q", &s.to_string())]);
        }
        if let Some(ref s) = time {
            req_builder = req_builder.query(&[("time", &s.to_string())]);
        }
        if let Some(ref s) = user__n {
            req_builder = req_builder.query(&[("user__n", &s.to_string())]);
        }
        if let Some(ref s) = user_name__n {
            req_builder = req_builder.query(&[("user_name__n", &s.to_string())]);
        }
        if let Some(ref s) = user_name__ic {
            req_builder = req_builder.query(&[("user_name__ic", &s.to_string())]);
        }
        if let Some(ref s) = user_name__nic {
            req_builder = req_builder.query(&[("user_name__nic", &s.to_string())]);
        }
        if let Some(ref s) = user_name__iew {
            req_builder = req_builder.query(&[("user_name__iew", &s.to_string())]);
        }
        if let Some(ref s) = user_name__niew {
            req_builder = req_builder.query(&[("user_name__niew", &s.to_string())]);
        }
        if let Some(ref s) = user_name__isw {
            req_builder = req_builder.query(&[("user_name__isw", &s.to_string())]);
        }
        if let Some(ref s) = user_name__nisw {
            req_builder = req_builder.query(&[("user_name__nisw", &s.to_string())]);
        }
        if let Some(ref s) = user_name__ie {
            req_builder = req_builder.query(&[("user_name__ie", &s.to_string())]);
        }
        if let Some(ref s) = user_name__nie {
            req_builder = req_builder.query(&[("user_name__nie", &s.to_string())]);
        }
        if let Some(ref s) = action__n {
            req_builder = req_builder.query(&[("action__n", &s.to_string())]);
        }
        if let Some(ref s) = changed_object_type__n {
            req_builder = req_builder.query(&[("changed_object_type__n", &s.to_string())]);
        }
        if let Some(ref s) = changed_object_id__n {
            req_builder = req_builder.query(&[("changed_object_id__n", &s.to_string())]);
        }
        if let Some(ref s) = changed_object_id__lte {
            req_builder = req_builder.query(&[("changed_object_id__lte", &s.to_string())]);
        }
        if let Some(ref s) = changed_object_id__lt {
            req_builder = req_builder.query(&[("changed_object_id__lt", &s.to_string())]);
        }
        if let Some(ref s) = changed_object_id__gte {
            req_builder = req_builder.query(&[("changed_object_id__gte", &s.to_string())]);
        }
        if let Some(ref s) = changed_object_id__gt {
            req_builder = req_builder.query(&[("changed_object_id__gt", &s.to_string())]);
        }
        if let Some(ref s) = object_repr__n {
            req_builder = req_builder.query(&[("object_repr__n", &s.to_string())]);
        }
        if let Some(ref s) = object_repr__ic {
            req_builder = req_builder.query(&[("object_repr__ic", &s.to_string())]);
        }
        if let Some(ref s) = object_repr__nic {
            req_builder = req_builder.query(&[("object_repr__nic", &s.to_string())]);
        }
        if let Some(ref s) = object_repr__iew {
            req_builder = req_builder.query(&[("object_repr__iew", &s.to_string())]);
        }
        if let Some(ref s) = object_repr__niew {
            req_builder = req_builder.query(&[("object_repr__niew", &s.to_string())]);
        }
        if let Some(ref s) = object_repr__isw {
            req_builder = req_builder.query(&[("object_repr__isw", &s.to_string())]);
        }
        if let Some(ref s) = object_repr__nisw {
            req_builder = req_builder.query(&[("object_repr__nisw", &s.to_string())]);
        }
        if let Some(ref s) = object_repr__ie {
            req_builder = req_builder.query(&[("object_repr__ie", &s.to_string())]);
        }
        if let Some(ref s) = object_repr__nie {
            req_builder = req_builder.query(&[("object_repr__nie", &s.to_string())]);
        }
        if let Some(ref s) = limit {
            req_builder = req_builder.query(&[("limit", &s.to_string())]);
        }
        if let Some(ref s) = offset {
            req_builder = req_builder.query(&[("offset", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn extras_object_changes_read(&self, id: i32) -> Result<crate::models::ObjectChange, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/extras/object-changes/{id}/",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn extras_reports_list(&self) -> Result<(), Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/extras/reports/", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        client.execute(req)?.error_for_status()?;
        Ok(())
    }

    fn extras_reports_read(&self, id: &str) -> Result<(), Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/extras/reports/{id}/",
            configuration.base_path,
            id = crate::apis::urlencode(id)
        );
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        client.execute(req)?.error_for_status()?;
        Ok(())
    }

    fn extras_reports_run(&self, id: &str) -> Result<(), Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/extras/reports/{id}/run/",
            configuration.base_path,
            id = crate::apis::urlencode(id)
        );
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        client.execute(req)?.error_for_status()?;
        Ok(())
    }

    fn extras_scripts_list(&self) -> Result<(), Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/extras/scripts/", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        client.execute(req)?.error_for_status()?;
        Ok(())
    }

    fn extras_scripts_read(&self, id: &str) -> Result<(), Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/extras/scripts/{id}/",
            configuration.base_path,
            id = crate::apis::urlencode(id)
        );
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        client.execute(req)?.error_for_status()?;
        Ok(())
    }

    fn extras_tags_create(&self, data: crate::models::Tag) -> Result<crate::models::Tag, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/extras/tags/", configuration.base_path);
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn extras_tags_delete(&self, id: i32) -> Result<(), Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/extras/tags/{id}/", configuration.base_path, id = id);
        let mut req_builder = client.delete(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        client.execute(req)?.error_for_status()?;
        Ok(())
    }

    fn extras_tags_list(
        &self,
        name: Option<&str>,
        slug: Option<&str>,
        q: Option<&str>,
        name__n: Option<&str>,
        name__ic: Option<&str>,
        name__nic: Option<&str>,
        name__iew: Option<&str>,
        name__niew: Option<&str>,
        name__isw: Option<&str>,
        name__nisw: Option<&str>,
        name__ie: Option<&str>,
        name__nie: Option<&str>,
        slug__n: Option<&str>,
        slug__ic: Option<&str>,
        slug__nic: Option<&str>,
        slug__iew: Option<&str>,
        slug__niew: Option<&str>,
        slug__isw: Option<&str>,
        slug__nisw: Option<&str>,
        slug__ie: Option<&str>,
        slug__nie: Option<&str>,
        limit: Option<i32>,
        offset: Option<i32>,
    ) -> Result<crate::models::InlineResponse20042, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/extras/tags/", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = name {
            req_builder = req_builder.query(&[("name", &s.to_string())]);
        }
        if let Some(ref s) = slug {
            req_builder = req_builder.query(&[("slug", &s.to_string())]);
        }
        if let Some(ref s) = q {
            req_builder = req_builder.query(&[("q", &s.to_string())]);
        }
        if let Some(ref s) = name__n {
            req_builder = req_builder.query(&[("name__n", &s.to_string())]);
        }
        if let Some(ref s) = name__ic {
            req_builder = req_builder.query(&[("name__ic", &s.to_string())]);
        }
        if let Some(ref s) = name__nic {
            req_builder = req_builder.query(&[("name__nic", &s.to_string())]);
        }
        if let Some(ref s) = name__iew {
            req_builder = req_builder.query(&[("name__iew", &s.to_string())]);
        }
        if let Some(ref s) = name__niew {
            req_builder = req_builder.query(&[("name__niew", &s.to_string())]);
        }
        if let Some(ref s) = name__isw {
            req_builder = req_builder.query(&[("name__isw", &s.to_string())]);
        }
        if let Some(ref s) = name__nisw {
            req_builder = req_builder.query(&[("name__nisw", &s.to_string())]);
        }
        if let Some(ref s) = name__ie {
            req_builder = req_builder.query(&[("name__ie", &s.to_string())]);
        }
        if let Some(ref s) = name__nie {
            req_builder = req_builder.query(&[("name__nie", &s.to_string())]);
        }
        if let Some(ref s) = slug__n {
            req_builder = req_builder.query(&[("slug__n", &s.to_string())]);
        }
        if let Some(ref s) = slug__ic {
            req_builder = req_builder.query(&[("slug__ic", &s.to_string())]);
        }
        if let Some(ref s) = slug__nic {
            req_builder = req_builder.query(&[("slug__nic", &s.to_string())]);
        }
        if let Some(ref s) = slug__iew {
            req_builder = req_builder.query(&[("slug__iew", &s.to_string())]);
        }
        if let Some(ref s) = slug__niew {
            req_builder = req_builder.query(&[("slug__niew", &s.to_string())]);
        }
        if let Some(ref s) = slug__isw {
            req_builder = req_builder.query(&[("slug__isw", &s.to_string())]);
        }
        if let Some(ref s) = slug__nisw {
            req_builder = req_builder.query(&[("slug__nisw", &s.to_string())]);
        }
        if let Some(ref s) = slug__ie {
            req_builder = req_builder.query(&[("slug__ie", &s.to_string())]);
        }
        if let Some(ref s) = slug__nie {
            req_builder = req_builder.query(&[("slug__nie", &s.to_string())]);
        }
        if let Some(ref s) = limit {
            req_builder = req_builder.query(&[("limit", &s.to_string())]);
        }
        if let Some(ref s) = offset {
            req_builder = req_builder.query(&[("offset", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn extras_tags_partial_update(
        &self,
        id: i32,
        data: crate::models::Tag,
    ) -> Result<crate::models::Tag, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/extras/tags/{id}/", configuration.base_path, id = id);
        let mut req_builder = client.patch(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn extras_tags_read(&self, id: i32) -> Result<crate::models::Tag, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/extras/tags/{id}/", configuration.base_path, id = id);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn extras_tags_update(
        &self,
        id: i32,
        data: crate::models::Tag,
    ) -> Result<crate::models::Tag, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/extras/tags/{id}/", configuration.base_path, id = id);
        let mut req_builder = client.put(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&data);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }
}
