/*
 * NetBox API
 *
 * API to access NetBox
 *
 * The version of the OpenAPI document: 2.7
 *
 * Generated by: https://openapi-generator.tech
 */

use reqwest;

use super::{configuration, Error};
use crate::apis::ResponseContent;

/// struct for typed errors of method `extras_choices_list`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtrasChoicesListError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `extras_choices_read`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtrasChoicesReadError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `extras_config_contexts_create`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtrasConfigContextsCreateError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `extras_config_contexts_delete`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtrasConfigContextsDeleteError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `extras_config_contexts_list`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtrasConfigContextsListError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `extras_config_contexts_partial_update`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtrasConfigContextsPartialUpdateError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `extras_config_contexts_read`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtrasConfigContextsReadError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `extras_config_contexts_update`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtrasConfigContextsUpdateError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `extras_custom_field_choices_list`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtrasCustomFieldChoicesListError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `extras_custom_field_choices_read`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtrasCustomFieldChoicesReadError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `extras_export_templates_create`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtrasExportTemplatesCreateError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `extras_export_templates_delete`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtrasExportTemplatesDeleteError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `extras_export_templates_list`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtrasExportTemplatesListError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `extras_export_templates_partial_update`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtrasExportTemplatesPartialUpdateError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `extras_export_templates_read`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtrasExportTemplatesReadError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `extras_export_templates_update`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtrasExportTemplatesUpdateError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `extras_graphs_create`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtrasGraphsCreateError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `extras_graphs_delete`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtrasGraphsDeleteError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `extras_graphs_list`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtrasGraphsListError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `extras_graphs_partial_update`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtrasGraphsPartialUpdateError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `extras_graphs_read`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtrasGraphsReadError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `extras_graphs_update`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtrasGraphsUpdateError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `extras_image_attachments_create`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtrasImageAttachmentsCreateError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `extras_image_attachments_delete`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtrasImageAttachmentsDeleteError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `extras_image_attachments_list`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtrasImageAttachmentsListError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `extras_image_attachments_partial_update`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtrasImageAttachmentsPartialUpdateError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `extras_image_attachments_read`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtrasImageAttachmentsReadError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `extras_image_attachments_update`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtrasImageAttachmentsUpdateError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `extras_object_changes_list`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtrasObjectChangesListError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `extras_object_changes_read`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtrasObjectChangesReadError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `extras_reports_list`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtrasReportsListError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `extras_reports_read`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtrasReportsReadError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `extras_reports_run`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtrasReportsRunError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `extras_scripts_list`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtrasScriptsListError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `extras_scripts_read`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtrasScriptsReadError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `extras_tags_create`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtrasTagsCreateError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `extras_tags_delete`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtrasTagsDeleteError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `extras_tags_list`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtrasTagsListError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `extras_tags_partial_update`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtrasTagsPartialUpdateError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `extras_tags_read`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtrasTagsReadError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `extras_tags_update`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtrasTagsUpdateError {
    UnknownValue(serde_json::Value),
}

pub async fn extras_choices_list(
    configuration: &configuration::Configuration,
) -> Result<(), Error<ExtrasChoicesListError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/extras/_choices/", configuration.base_path);
    let mut local_var_req_builder = local_var_client.get(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<ExtrasChoicesListError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn extras_choices_read(
    configuration: &configuration::Configuration,
    id: &str,
) -> Result<(), Error<ExtrasChoicesReadError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!(
        "{}/extras/_choices/{id}/",
        configuration.base_path,
        id = crate::apis::urlencode(id)
    );
    let mut local_var_req_builder = local_var_client.get(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<ExtrasChoicesReadError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn extras_config_contexts_create(
    configuration: &configuration::Configuration,
    data: crate::models::WritableConfigContext,
) -> Result<crate::models::ConfigContext, Error<ExtrasConfigContextsCreateError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/extras/config-contexts/", configuration.base_path);
    let mut local_var_req_builder = local_var_client.post(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ExtrasConfigContextsCreateError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn extras_config_contexts_delete(
    configuration: &configuration::Configuration,
    id: i32,
) -> Result<(), Error<ExtrasConfigContextsDeleteError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!(
        "{}/extras/config-contexts/{id}/",
        configuration.base_path,
        id = id
    );
    let mut local_var_req_builder = local_var_client.delete(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<ExtrasConfigContextsDeleteError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Call to super to allow for caching
pub async fn extras_config_contexts_list(
    configuration: &configuration::Configuration,
    name: Option<&str>,
    is_active: Option<&str>,
    q: Option<&str>,
    region_id: Option<&str>,
    region: Option<&str>,
    site_id: Option<&str>,
    site: Option<&str>,
    role_id: Option<&str>,
    role: Option<&str>,
    platform_id: Option<&str>,
    platform: Option<&str>,
    cluster_group_id: Option<&str>,
    cluster_group: Option<&str>,
    cluster_id: Option<&str>,
    tenant_group_id: Option<&str>,
    tenant_group: Option<&str>,
    tenant_id: Option<&str>,
    tenant: Option<&str>,
    tag: Option<&str>,
    name__n: Option<&str>,
    name__ic: Option<&str>,
    name__nic: Option<&str>,
    name__iew: Option<&str>,
    name__niew: Option<&str>,
    name__isw: Option<&str>,
    name__nisw: Option<&str>,
    name__ie: Option<&str>,
    name__nie: Option<&str>,
    region_id__n: Option<&str>,
    region__n: Option<&str>,
    site_id__n: Option<&str>,
    site__n: Option<&str>,
    role_id__n: Option<&str>,
    role__n: Option<&str>,
    platform_id__n: Option<&str>,
    platform__n: Option<&str>,
    cluster_group_id__n: Option<&str>,
    cluster_group__n: Option<&str>,
    cluster_id__n: Option<&str>,
    tenant_group_id__n: Option<&str>,
    tenant_group__n: Option<&str>,
    tenant_id__n: Option<&str>,
    tenant__n: Option<&str>,
    tag__n: Option<&str>,
    limit: Option<i32>,
    offset: Option<i32>,
) -> Result<crate::models::InlineResponse20037, Error<ExtrasConfigContextsListError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/extras/config-contexts/", configuration.base_path);
    let mut local_var_req_builder = local_var_client.get(local_var_uri_str.as_str());

    if let Some(ref local_var_str) = name {
        local_var_req_builder =
            local_var_req_builder.query(&[("name", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = is_active {
        local_var_req_builder =
            local_var_req_builder.query(&[("is_active", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = q {
        local_var_req_builder = local_var_req_builder.query(&[("q", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = region_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("region_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = region {
        local_var_req_builder =
            local_var_req_builder.query(&[("region", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("site_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site {
        local_var_req_builder =
            local_var_req_builder.query(&[("site", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = role_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("role_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = role {
        local_var_req_builder =
            local_var_req_builder.query(&[("role", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = platform_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("platform_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = platform {
        local_var_req_builder =
            local_var_req_builder.query(&[("platform", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = cluster_group_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("cluster_group_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = cluster_group {
        local_var_req_builder =
            local_var_req_builder.query(&[("cluster_group", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = cluster_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("cluster_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tenant_group_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("tenant_group_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tenant_group {
        local_var_req_builder =
            local_var_req_builder.query(&[("tenant_group", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tenant_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("tenant_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tenant {
        local_var_req_builder =
            local_var_req_builder.query(&[("tenant", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tag {
        local_var_req_builder = local_var_req_builder.query(&[("tag", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("name__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__ic {
        local_var_req_builder =
            local_var_req_builder.query(&[("name__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nic {
        local_var_req_builder =
            local_var_req_builder.query(&[("name__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__iew {
        local_var_req_builder =
            local_var_req_builder.query(&[("name__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__niew {
        local_var_req_builder =
            local_var_req_builder.query(&[("name__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__isw {
        local_var_req_builder =
            local_var_req_builder.query(&[("name__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nisw {
        local_var_req_builder =
            local_var_req_builder.query(&[("name__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__ie {
        local_var_req_builder =
            local_var_req_builder.query(&[("name__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nie {
        local_var_req_builder =
            local_var_req_builder.query(&[("name__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = region_id__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("region_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = region__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("region__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site_id__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("site_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("site__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = role_id__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("role_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = role__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("role__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = platform_id__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("platform_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = platform__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("platform__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = cluster_group_id__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("cluster_group_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = cluster_group__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("cluster_group__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = cluster_id__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("cluster_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tenant_group_id__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("tenant_group_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tenant_group__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("tenant_group__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tenant_id__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("tenant_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tenant__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("tenant__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tag__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("tag__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder =
            local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = offset {
        local_var_req_builder =
            local_var_req_builder.query(&[("offset", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ExtrasConfigContextsListError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn extras_config_contexts_partial_update(
    configuration: &configuration::Configuration,
    id: i32,
    data: crate::models::WritableConfigContext,
) -> Result<crate::models::ConfigContext, Error<ExtrasConfigContextsPartialUpdateError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!(
        "{}/extras/config-contexts/{id}/",
        configuration.base_path,
        id = id
    );
    let mut local_var_req_builder = local_var_client.patch(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ExtrasConfigContextsPartialUpdateError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Call to super to allow for caching
pub async fn extras_config_contexts_read(
    configuration: &configuration::Configuration,
    id: i32,
) -> Result<crate::models::ConfigContext, Error<ExtrasConfigContextsReadError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!(
        "{}/extras/config-contexts/{id}/",
        configuration.base_path,
        id = id
    );
    let mut local_var_req_builder = local_var_client.get(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ExtrasConfigContextsReadError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn extras_config_contexts_update(
    configuration: &configuration::Configuration,
    id: i32,
    data: crate::models::WritableConfigContext,
) -> Result<crate::models::ConfigContext, Error<ExtrasConfigContextsUpdateError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!(
        "{}/extras/config-contexts/{id}/",
        configuration.base_path,
        id = id
    );
    let mut local_var_req_builder = local_var_client.put(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ExtrasConfigContextsUpdateError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn extras_custom_field_choices_list(
    configuration: &configuration::Configuration,
) -> Result<(), Error<ExtrasCustomFieldChoicesListError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/extras/_custom_field_choices/", configuration.base_path);
    let mut local_var_req_builder = local_var_client.get(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<ExtrasCustomFieldChoicesListError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn extras_custom_field_choices_read(
    configuration: &configuration::Configuration,
    id: &str,
) -> Result<(), Error<ExtrasCustomFieldChoicesReadError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!(
        "{}/extras/_custom_field_choices/{id}/",
        configuration.base_path,
        id = crate::apis::urlencode(id)
    );
    let mut local_var_req_builder = local_var_client.get(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<ExtrasCustomFieldChoicesReadError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn extras_export_templates_create(
    configuration: &configuration::Configuration,
    data: crate::models::WritableExportTemplate,
) -> Result<crate::models::ExportTemplate, Error<ExtrasExportTemplatesCreateError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/extras/export-templates/", configuration.base_path);
    let mut local_var_req_builder = local_var_client.post(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ExtrasExportTemplatesCreateError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn extras_export_templates_delete(
    configuration: &configuration::Configuration,
    id: i32,
) -> Result<(), Error<ExtrasExportTemplatesDeleteError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!(
        "{}/extras/export-templates/{id}/",
        configuration.base_path,
        id = id
    );
    let mut local_var_req_builder = local_var_client.delete(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<ExtrasExportTemplatesDeleteError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Call to super to allow for caching
pub async fn extras_export_templates_list(
    configuration: &configuration::Configuration,
    content_type: Option<&str>,
    name: Option<&str>,
    template_language: Option<&str>,
    content_type__n: Option<&str>,
    name__n: Option<&str>,
    name__ic: Option<&str>,
    name__nic: Option<&str>,
    name__iew: Option<&str>,
    name__niew: Option<&str>,
    name__isw: Option<&str>,
    name__nisw: Option<&str>,
    name__ie: Option<&str>,
    name__nie: Option<&str>,
    template_language__n: Option<&str>,
    limit: Option<i32>,
    offset: Option<i32>,
) -> Result<crate::models::InlineResponse20038, Error<ExtrasExportTemplatesListError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/extras/export-templates/", configuration.base_path);
    let mut local_var_req_builder = local_var_client.get(local_var_uri_str.as_str());

    if let Some(ref local_var_str) = content_type {
        local_var_req_builder =
            local_var_req_builder.query(&[("content_type", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name {
        local_var_req_builder =
            local_var_req_builder.query(&[("name", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = template_language {
        local_var_req_builder =
            local_var_req_builder.query(&[("template_language", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = content_type__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("content_type__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("name__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__ic {
        local_var_req_builder =
            local_var_req_builder.query(&[("name__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nic {
        local_var_req_builder =
            local_var_req_builder.query(&[("name__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__iew {
        local_var_req_builder =
            local_var_req_builder.query(&[("name__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__niew {
        local_var_req_builder =
            local_var_req_builder.query(&[("name__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__isw {
        local_var_req_builder =
            local_var_req_builder.query(&[("name__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nisw {
        local_var_req_builder =
            local_var_req_builder.query(&[("name__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__ie {
        local_var_req_builder =
            local_var_req_builder.query(&[("name__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nie {
        local_var_req_builder =
            local_var_req_builder.query(&[("name__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = template_language__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("template_language__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder =
            local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = offset {
        local_var_req_builder =
            local_var_req_builder.query(&[("offset", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ExtrasExportTemplatesListError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn extras_export_templates_partial_update(
    configuration: &configuration::Configuration,
    id: i32,
    data: crate::models::WritableExportTemplate,
) -> Result<crate::models::ExportTemplate, Error<ExtrasExportTemplatesPartialUpdateError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!(
        "{}/extras/export-templates/{id}/",
        configuration.base_path,
        id = id
    );
    let mut local_var_req_builder = local_var_client.patch(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ExtrasExportTemplatesPartialUpdateError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Call to super to allow for caching
pub async fn extras_export_templates_read(
    configuration: &configuration::Configuration,
    id: i32,
) -> Result<crate::models::ExportTemplate, Error<ExtrasExportTemplatesReadError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!(
        "{}/extras/export-templates/{id}/",
        configuration.base_path,
        id = id
    );
    let mut local_var_req_builder = local_var_client.get(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ExtrasExportTemplatesReadError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn extras_export_templates_update(
    configuration: &configuration::Configuration,
    id: i32,
    data: crate::models::WritableExportTemplate,
) -> Result<crate::models::ExportTemplate, Error<ExtrasExportTemplatesUpdateError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!(
        "{}/extras/export-templates/{id}/",
        configuration.base_path,
        id = id
    );
    let mut local_var_req_builder = local_var_client.put(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ExtrasExportTemplatesUpdateError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn extras_graphs_create(
    configuration: &configuration::Configuration,
    data: crate::models::Graph,
) -> Result<crate::models::Graph, Error<ExtrasGraphsCreateError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/extras/graphs/", configuration.base_path);
    let mut local_var_req_builder = local_var_client.post(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ExtrasGraphsCreateError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn extras_graphs_delete(
    configuration: &configuration::Configuration,
    id: i32,
) -> Result<(), Error<ExtrasGraphsDeleteError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/extras/graphs/{id}/", configuration.base_path, id = id);
    let mut local_var_req_builder = local_var_client.delete(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<ExtrasGraphsDeleteError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Call to super to allow for caching
pub async fn extras_graphs_list(
    configuration: &configuration::Configuration,
    _type: Option<&str>,
    name: Option<&str>,
    template_language: Option<&str>,
    type__n: Option<&str>,
    name__n: Option<&str>,
    name__ic: Option<&str>,
    name__nic: Option<&str>,
    name__iew: Option<&str>,
    name__niew: Option<&str>,
    name__isw: Option<&str>,
    name__nisw: Option<&str>,
    name__ie: Option<&str>,
    name__nie: Option<&str>,
    template_language__n: Option<&str>,
    limit: Option<i32>,
    offset: Option<i32>,
) -> Result<crate::models::InlineResponse20039, Error<ExtrasGraphsListError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/extras/graphs/", configuration.base_path);
    let mut local_var_req_builder = local_var_client.get(local_var_uri_str.as_str());

    if let Some(ref local_var_str) = _type {
        local_var_req_builder =
            local_var_req_builder.query(&[("type", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name {
        local_var_req_builder =
            local_var_req_builder.query(&[("name", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = template_language {
        local_var_req_builder =
            local_var_req_builder.query(&[("template_language", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = type__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("type__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("name__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__ic {
        local_var_req_builder =
            local_var_req_builder.query(&[("name__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nic {
        local_var_req_builder =
            local_var_req_builder.query(&[("name__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__iew {
        local_var_req_builder =
            local_var_req_builder.query(&[("name__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__niew {
        local_var_req_builder =
            local_var_req_builder.query(&[("name__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__isw {
        local_var_req_builder =
            local_var_req_builder.query(&[("name__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nisw {
        local_var_req_builder =
            local_var_req_builder.query(&[("name__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__ie {
        local_var_req_builder =
            local_var_req_builder.query(&[("name__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nie {
        local_var_req_builder =
            local_var_req_builder.query(&[("name__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = template_language__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("template_language__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder =
            local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = offset {
        local_var_req_builder =
            local_var_req_builder.query(&[("offset", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ExtrasGraphsListError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn extras_graphs_partial_update(
    configuration: &configuration::Configuration,
    id: i32,
    data: crate::models::Graph,
) -> Result<crate::models::Graph, Error<ExtrasGraphsPartialUpdateError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/extras/graphs/{id}/", configuration.base_path, id = id);
    let mut local_var_req_builder = local_var_client.patch(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ExtrasGraphsPartialUpdateError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Call to super to allow for caching
pub async fn extras_graphs_read(
    configuration: &configuration::Configuration,
    id: i32,
) -> Result<crate::models::Graph, Error<ExtrasGraphsReadError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/extras/graphs/{id}/", configuration.base_path, id = id);
    let mut local_var_req_builder = local_var_client.get(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ExtrasGraphsReadError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn extras_graphs_update(
    configuration: &configuration::Configuration,
    id: i32,
    data: crate::models::Graph,
) -> Result<crate::models::Graph, Error<ExtrasGraphsUpdateError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/extras/graphs/{id}/", configuration.base_path, id = id);
    let mut local_var_req_builder = local_var_client.put(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ExtrasGraphsUpdateError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn extras_image_attachments_create(
    configuration: &configuration::Configuration,
    data: crate::models::ImageAttachment,
) -> Result<crate::models::ImageAttachment, Error<ExtrasImageAttachmentsCreateError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/extras/image-attachments/", configuration.base_path);
    let mut local_var_req_builder = local_var_client.post(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ExtrasImageAttachmentsCreateError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn extras_image_attachments_delete(
    configuration: &configuration::Configuration,
    id: i32,
) -> Result<(), Error<ExtrasImageAttachmentsDeleteError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!(
        "{}/extras/image-attachments/{id}/",
        configuration.base_path,
        id = id
    );
    let mut local_var_req_builder = local_var_client.delete(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<ExtrasImageAttachmentsDeleteError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Call to super to allow for caching
pub async fn extras_image_attachments_list(
    configuration: &configuration::Configuration,
    limit: Option<i32>,
    offset: Option<i32>,
) -> Result<crate::models::InlineResponse20040, Error<ExtrasImageAttachmentsListError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/extras/image-attachments/", configuration.base_path);
    let mut local_var_req_builder = local_var_client.get(local_var_uri_str.as_str());

    if let Some(ref local_var_str) = limit {
        local_var_req_builder =
            local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = offset {
        local_var_req_builder =
            local_var_req_builder.query(&[("offset", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ExtrasImageAttachmentsListError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn extras_image_attachments_partial_update(
    configuration: &configuration::Configuration,
    id: i32,
    data: crate::models::ImageAttachment,
) -> Result<crate::models::ImageAttachment, Error<ExtrasImageAttachmentsPartialUpdateError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!(
        "{}/extras/image-attachments/{id}/",
        configuration.base_path,
        id = id
    );
    let mut local_var_req_builder = local_var_client.patch(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ExtrasImageAttachmentsPartialUpdateError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Call to super to allow for caching
pub async fn extras_image_attachments_read(
    configuration: &configuration::Configuration,
    id: i32,
) -> Result<crate::models::ImageAttachment, Error<ExtrasImageAttachmentsReadError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!(
        "{}/extras/image-attachments/{id}/",
        configuration.base_path,
        id = id
    );
    let mut local_var_req_builder = local_var_client.get(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ExtrasImageAttachmentsReadError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn extras_image_attachments_update(
    configuration: &configuration::Configuration,
    id: i32,
    data: crate::models::ImageAttachment,
) -> Result<crate::models::ImageAttachment, Error<ExtrasImageAttachmentsUpdateError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!(
        "{}/extras/image-attachments/{id}/",
        configuration.base_path,
        id = id
    );
    let mut local_var_req_builder = local_var_client.put(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ExtrasImageAttachmentsUpdateError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Retrieve a list of recent changes.
pub async fn extras_object_changes_list(
    configuration: &configuration::Configuration,
    user: Option<&str>,
    user_name: Option<&str>,
    request_id: Option<&str>,
    action: Option<&str>,
    changed_object_type: Option<&str>,
    changed_object_id: Option<&str>,
    object_repr: Option<&str>,
    q: Option<&str>,
    time: Option<&str>,
    user__n: Option<&str>,
    user_name__n: Option<&str>,
    user_name__ic: Option<&str>,
    user_name__nic: Option<&str>,
    user_name__iew: Option<&str>,
    user_name__niew: Option<&str>,
    user_name__isw: Option<&str>,
    user_name__nisw: Option<&str>,
    user_name__ie: Option<&str>,
    user_name__nie: Option<&str>,
    action__n: Option<&str>,
    changed_object_type__n: Option<&str>,
    changed_object_id__n: Option<&str>,
    changed_object_id__lte: Option<&str>,
    changed_object_id__lt: Option<&str>,
    changed_object_id__gte: Option<&str>,
    changed_object_id__gt: Option<&str>,
    object_repr__n: Option<&str>,
    object_repr__ic: Option<&str>,
    object_repr__nic: Option<&str>,
    object_repr__iew: Option<&str>,
    object_repr__niew: Option<&str>,
    object_repr__isw: Option<&str>,
    object_repr__nisw: Option<&str>,
    object_repr__ie: Option<&str>,
    object_repr__nie: Option<&str>,
    limit: Option<i32>,
    offset: Option<i32>,
) -> Result<crate::models::InlineResponse20041, Error<ExtrasObjectChangesListError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/extras/object-changes/", configuration.base_path);
    let mut local_var_req_builder = local_var_client.get(local_var_uri_str.as_str());

    if let Some(ref local_var_str) = user {
        local_var_req_builder =
            local_var_req_builder.query(&[("user", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = user_name {
        local_var_req_builder =
            local_var_req_builder.query(&[("user_name", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = request_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("request_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = action {
        local_var_req_builder =
            local_var_req_builder.query(&[("action", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = changed_object_type {
        local_var_req_builder =
            local_var_req_builder.query(&[("changed_object_type", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = changed_object_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("changed_object_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = object_repr {
        local_var_req_builder =
            local_var_req_builder.query(&[("object_repr", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = q {
        local_var_req_builder = local_var_req_builder.query(&[("q", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = time {
        local_var_req_builder =
            local_var_req_builder.query(&[("time", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = user__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("user__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = user_name__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("user_name__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = user_name__ic {
        local_var_req_builder =
            local_var_req_builder.query(&[("user_name__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = user_name__nic {
        local_var_req_builder =
            local_var_req_builder.query(&[("user_name__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = user_name__iew {
        local_var_req_builder =
            local_var_req_builder.query(&[("user_name__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = user_name__niew {
        local_var_req_builder =
            local_var_req_builder.query(&[("user_name__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = user_name__isw {
        local_var_req_builder =
            local_var_req_builder.query(&[("user_name__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = user_name__nisw {
        local_var_req_builder =
            local_var_req_builder.query(&[("user_name__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = user_name__ie {
        local_var_req_builder =
            local_var_req_builder.query(&[("user_name__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = user_name__nie {
        local_var_req_builder =
            local_var_req_builder.query(&[("user_name__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = action__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("action__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = changed_object_type__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("changed_object_type__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = changed_object_id__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("changed_object_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = changed_object_id__lte {
        local_var_req_builder =
            local_var_req_builder.query(&[("changed_object_id__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = changed_object_id__lt {
        local_var_req_builder =
            local_var_req_builder.query(&[("changed_object_id__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = changed_object_id__gte {
        local_var_req_builder =
            local_var_req_builder.query(&[("changed_object_id__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = changed_object_id__gt {
        local_var_req_builder =
            local_var_req_builder.query(&[("changed_object_id__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = object_repr__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("object_repr__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = object_repr__ic {
        local_var_req_builder =
            local_var_req_builder.query(&[("object_repr__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = object_repr__nic {
        local_var_req_builder =
            local_var_req_builder.query(&[("object_repr__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = object_repr__iew {
        local_var_req_builder =
            local_var_req_builder.query(&[("object_repr__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = object_repr__niew {
        local_var_req_builder =
            local_var_req_builder.query(&[("object_repr__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = object_repr__isw {
        local_var_req_builder =
            local_var_req_builder.query(&[("object_repr__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = object_repr__nisw {
        local_var_req_builder =
            local_var_req_builder.query(&[("object_repr__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = object_repr__ie {
        local_var_req_builder =
            local_var_req_builder.query(&[("object_repr__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = object_repr__nie {
        local_var_req_builder =
            local_var_req_builder.query(&[("object_repr__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder =
            local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = offset {
        local_var_req_builder =
            local_var_req_builder.query(&[("offset", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ExtrasObjectChangesListError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Retrieve a list of recent changes.
pub async fn extras_object_changes_read(
    configuration: &configuration::Configuration,
    id: i32,
) -> Result<crate::models::ObjectChange, Error<ExtrasObjectChangesReadError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!(
        "{}/extras/object-changes/{id}/",
        configuration.base_path,
        id = id
    );
    let mut local_var_req_builder = local_var_client.get(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ExtrasObjectChangesReadError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Compile all reports and their related results (if any). Result data is deferred in the list view.
pub async fn extras_reports_list(
    configuration: &configuration::Configuration,
) -> Result<(), Error<ExtrasReportsListError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/extras/reports/", configuration.base_path);
    let mut local_var_req_builder = local_var_client.get(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<ExtrasReportsListError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Retrieve a single Report identified as \"<module>.<report>\".
pub async fn extras_reports_read(
    configuration: &configuration::Configuration,
    id: &str,
) -> Result<(), Error<ExtrasReportsReadError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!(
        "{}/extras/reports/{id}/",
        configuration.base_path,
        id = crate::apis::urlencode(id)
    );
    let mut local_var_req_builder = local_var_client.get(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<ExtrasReportsReadError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Run a Report and create a new ReportResult, overwriting any previous result for the Report.
pub async fn extras_reports_run(
    configuration: &configuration::Configuration,
    id: &str,
) -> Result<(), Error<ExtrasReportsRunError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!(
        "{}/extras/reports/{id}/run/",
        configuration.base_path,
        id = crate::apis::urlencode(id)
    );
    let mut local_var_req_builder = local_var_client.post(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<ExtrasReportsRunError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn extras_scripts_list(
    configuration: &configuration::Configuration,
) -> Result<(), Error<ExtrasScriptsListError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/extras/scripts/", configuration.base_path);
    let mut local_var_req_builder = local_var_client.get(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<ExtrasScriptsListError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn extras_scripts_read(
    configuration: &configuration::Configuration,
    id: &str,
) -> Result<(), Error<ExtrasScriptsReadError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!(
        "{}/extras/scripts/{id}/",
        configuration.base_path,
        id = crate::apis::urlencode(id)
    );
    let mut local_var_req_builder = local_var_client.get(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<ExtrasScriptsReadError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn extras_tags_create(
    configuration: &configuration::Configuration,
    data: crate::models::Tag,
) -> Result<crate::models::Tag, Error<ExtrasTagsCreateError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/extras/tags/", configuration.base_path);
    let mut local_var_req_builder = local_var_client.post(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ExtrasTagsCreateError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn extras_tags_delete(
    configuration: &configuration::Configuration,
    id: i32,
) -> Result<(), Error<ExtrasTagsDeleteError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/extras/tags/{id}/", configuration.base_path, id = id);
    let mut local_var_req_builder = local_var_client.delete(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<ExtrasTagsDeleteError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Call to super to allow for caching
pub async fn extras_tags_list(
    configuration: &configuration::Configuration,
    name: Option<&str>,
    slug: Option<&str>,
    q: Option<&str>,
    name__n: Option<&str>,
    name__ic: Option<&str>,
    name__nic: Option<&str>,
    name__iew: Option<&str>,
    name__niew: Option<&str>,
    name__isw: Option<&str>,
    name__nisw: Option<&str>,
    name__ie: Option<&str>,
    name__nie: Option<&str>,
    slug__n: Option<&str>,
    slug__ic: Option<&str>,
    slug__nic: Option<&str>,
    slug__iew: Option<&str>,
    slug__niew: Option<&str>,
    slug__isw: Option<&str>,
    slug__nisw: Option<&str>,
    slug__ie: Option<&str>,
    slug__nie: Option<&str>,
    limit: Option<i32>,
    offset: Option<i32>,
) -> Result<crate::models::InlineResponse20042, Error<ExtrasTagsListError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/extras/tags/", configuration.base_path);
    let mut local_var_req_builder = local_var_client.get(local_var_uri_str.as_str());

    if let Some(ref local_var_str) = name {
        local_var_req_builder =
            local_var_req_builder.query(&[("name", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug {
        local_var_req_builder =
            local_var_req_builder.query(&[("slug", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = q {
        local_var_req_builder = local_var_req_builder.query(&[("q", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("name__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__ic {
        local_var_req_builder =
            local_var_req_builder.query(&[("name__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nic {
        local_var_req_builder =
            local_var_req_builder.query(&[("name__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__iew {
        local_var_req_builder =
            local_var_req_builder.query(&[("name__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__niew {
        local_var_req_builder =
            local_var_req_builder.query(&[("name__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__isw {
        local_var_req_builder =
            local_var_req_builder.query(&[("name__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nisw {
        local_var_req_builder =
            local_var_req_builder.query(&[("name__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__ie {
        local_var_req_builder =
            local_var_req_builder.query(&[("name__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nie {
        local_var_req_builder =
            local_var_req_builder.query(&[("name__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__n {
        local_var_req_builder =
            local_var_req_builder.query(&[("slug__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__ic {
        local_var_req_builder =
            local_var_req_builder.query(&[("slug__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__nic {
        local_var_req_builder =
            local_var_req_builder.query(&[("slug__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__iew {
        local_var_req_builder =
            local_var_req_builder.query(&[("slug__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__niew {
        local_var_req_builder =
            local_var_req_builder.query(&[("slug__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__isw {
        local_var_req_builder =
            local_var_req_builder.query(&[("slug__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__nisw {
        local_var_req_builder =
            local_var_req_builder.query(&[("slug__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__ie {
        local_var_req_builder =
            local_var_req_builder.query(&[("slug__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__nie {
        local_var_req_builder =
            local_var_req_builder.query(&[("slug__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder =
            local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = offset {
        local_var_req_builder =
            local_var_req_builder.query(&[("offset", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ExtrasTagsListError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn extras_tags_partial_update(
    configuration: &configuration::Configuration,
    id: i32,
    data: crate::models::Tag,
) -> Result<crate::models::Tag, Error<ExtrasTagsPartialUpdateError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/extras/tags/{id}/", configuration.base_path, id = id);
    let mut local_var_req_builder = local_var_client.patch(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ExtrasTagsPartialUpdateError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Call to super to allow for caching
pub async fn extras_tags_read(
    configuration: &configuration::Configuration,
    id: i32,
) -> Result<crate::models::Tag, Error<ExtrasTagsReadError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/extras/tags/{id}/", configuration.base_path, id = id);
    let mut local_var_req_builder = local_var_client.get(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ExtrasTagsReadError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn extras_tags_update(
    configuration: &configuration::Configuration,
    id: i32,
    data: crate::models::Tag,
) -> Result<crate::models::Tag, Error<ExtrasTagsUpdateError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/extras/tags/{id}/", configuration.base_path, id = id);
    let mut local_var_req_builder = local_var_client.put(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ExtrasTagsUpdateError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}
