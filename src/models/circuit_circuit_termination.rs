/*
 * NetBox API
 *
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.0
 *
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CircuitCircuitTermination {
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(rename = "url", skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    #[serde(rename = "display", skip_serializing_if = "Option::is_none")]
    pub display: Option<String>,
    #[serde(rename = "site")]
    pub site: Option<Box<crate::models::NestedSite>>,
    #[serde(rename = "provider_network")]
    pub provider_network: Option<Box<crate::models::NestedProviderNetwork>>,
    #[serde(rename = "port_speed", skip_serializing_if = "Option::is_none")]
    pub port_speed: Option<i32>,
    /// Upstream speed, if different from port speed
    #[serde(rename = "upstream_speed", skip_serializing_if = "Option::is_none")]
    pub upstream_speed: Option<i32>,
    #[serde(rename = "xconnect_id", skip_serializing_if = "Option::is_none")]
    pub xconnect_id: Option<String>,
}

impl CircuitCircuitTermination {
    pub fn new(
        site: Option<crate::models::NestedSite>,
        provider_network: Option<crate::models::NestedProviderNetwork>,
    ) -> CircuitCircuitTermination {
        let nested_site = match site {
            Some(s) => Some(Box::new(s)),
            None => None,
        };

        let nested_provider_network = match provider_network {
            Some(n) => Some(Box::new(n)),
            None => None,
        };

        CircuitCircuitTermination {
            id: None,
            url: None,
            display: None,
            site: nested_site,
            provider_network: nested_provider_network,
            port_speed: None,
            upstream_speed: None,
            xconnect_id: None,
        }
    }
}
