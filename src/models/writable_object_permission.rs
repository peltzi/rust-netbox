/*
 * NetBox API
 *
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.0
 *
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WritableObjectPermission {
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(rename = "url", skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    #[serde(rename = "display", skip_serializing_if = "Option::is_none")]
    pub display: Option<String>,
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "enabled", skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    #[serde(rename = "object_types")]
    pub object_types: Vec<String>,
    #[serde(rename = "groups", skip_serializing_if = "Option::is_none")]
    pub groups: Option<Vec<i32>>,
    #[serde(rename = "users", skip_serializing_if = "Option::is_none")]
    pub users: Option<Vec<i32>>,
    /// The list of actions granted by this permission
    #[serde(rename = "actions")]
    pub actions: Vec<String>,
    /// Queryset filter matching the applicable objects of the selected type(s)
    #[serde(rename = "constraints", skip_serializing_if = "Option::is_none")]
    pub constraints: Option<String>,
}

impl WritableObjectPermission {
    pub fn new(
        name: String,
        object_types: Vec<String>,
        actions: Vec<String>,
    ) -> WritableObjectPermission {
        WritableObjectPermission {
            id: None,
            url: None,
            display: None,
            name,
            description: None,
            enabled: None,
            object_types,
            groups: None,
            users: None,
            actions,
            constraints: None,
        }
    }
}
