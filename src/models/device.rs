/*
 * NetBox API
 *
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.0
 *
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Device {
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(rename = "url", skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    #[serde(rename = "display", skip_serializing_if = "Option::is_none")]
    pub display: Option<String>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "device_type")]
    pub device_type: Box<crate::models::NestedDeviceType>,
    #[serde(rename = "device_role")]
    pub device_role: Box<crate::models::NestedDeviceRole>,
    #[serde(rename = "tenant", skip_serializing_if = "Option::is_none")]
    pub tenant: Option<Box<crate::models::NestedTenant>>,
    #[serde(rename = "platform", skip_serializing_if = "Option::is_none")]
    pub platform: Option<Box<crate::models::NestedPlatform>>,
    #[serde(rename = "serial", skip_serializing_if = "Option::is_none")]
    pub serial: Option<String>,
    /// A unique tag used to identify this device
    #[serde(rename = "asset_tag", skip_serializing_if = "Option::is_none")]
    pub asset_tag: Option<String>,
    #[serde(rename = "site")]
    pub site: Option<Box<crate::models::NestedSite>>,
    #[serde(rename = "location", skip_serializing_if = "Option::is_none")]
    pub location: Option<Box<crate::models::NestedLocation>>,
    #[serde(rename = "rack", skip_serializing_if = "Option::is_none")]
    pub rack: Option<Box<crate::models::NestedRack>>,
    /// The lowest-numbered unit occupied by the device
    #[serde(rename = "position", skip_serializing_if = "Option::is_none")]
    pub position: Option<i32>,
    #[serde(rename = "face", skip_serializing_if = "Option::is_none")]
    pub face: Option<Box<crate::models::Face>>,
    #[serde(rename = "parent_device", skip_serializing_if = "Option::is_none")]
    pub parent_device: Option<Box<crate::models::NestedDevice>>,
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<Box<crate::models::Status2>>,
    #[serde(rename = "primary_ip", skip_serializing_if = "Option::is_none")]
    pub primary_ip: Option<Box<crate::models::NestedIpAddress>>,
    #[serde(rename = "primary_ip4", skip_serializing_if = "Option::is_none")]
    pub primary_ip4: Option<Box<crate::models::NestedIpAddress>>,
    #[serde(rename = "primary_ip6", skip_serializing_if = "Option::is_none")]
    pub primary_ip6: Option<Box<crate::models::NestedIpAddress>>,
    #[serde(rename = "cluster", skip_serializing_if = "Option::is_none")]
    pub cluster: Option<Box<crate::models::NestedCluster>>,
    #[serde(rename = "virtual_chassis", skip_serializing_if = "Option::is_none")]
    pub virtual_chassis: Option<Box<crate::models::NestedVirtualChassis>>,
    #[serde(rename = "vc_position", skip_serializing_if = "Option::is_none")]
    pub vc_position: Option<i32>,
    #[serde(rename = "vc_priority", skip_serializing_if = "Option::is_none")]
    pub vc_priority: Option<i32>,
    #[serde(rename = "comments", skip_serializing_if = "Option::is_none")]
    pub comments: Option<String>,
    #[serde(rename = "local_context_data", skip_serializing_if = "Option::is_none")]
    pub local_context_data: Option<String>,
    #[serde(rename = "tags", skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<crate::models::NestedTag>>,
    #[serde(rename = "custom_fields", skip_serializing_if = "Option::is_none")]
    pub custom_fields: Option<serde_json::Value>,
    #[serde(rename = "created", skip_serializing_if = "Option::is_none")]
    pub created: Option<String>,
    #[serde(rename = "last_updated", skip_serializing_if = "Option::is_none")]
    pub last_updated: Option<String>,
}

impl Device {
    pub fn new(
        device_type: crate::models::NestedDeviceType,
        device_role: crate::models::NestedDeviceRole,
        site: Option<crate::models::NestedSite>,
    ) -> Device {
        let nested_site = match site {
            Some(s) => Some(Box::new(s)),
            None => None,
        };

        Device {
            id: None,
            url: None,
            display: None,
            name: None,
            device_type: Box::new(device_type),
            device_role: Box::new(device_role),
            tenant: None,
            platform: None,
            serial: None,
            asset_tag: None,
            site: nested_site,
            location: None,
            rack: None,
            position: None,
            face: None,
            parent_device: None,
            status: None,
            primary_ip: None,
            primary_ip4: None,
            primary_ip6: None,
            cluster: None,
            virtual_chassis: None,
            vc_position: None,
            vc_priority: None,
            comments: None,
            local_context_data: None,
            tags: None,
            custom_fields: None,
            created: None,
            last_updated: None,
        }
    }
}
