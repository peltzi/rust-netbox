/*
 * NetBox API
 *
 * API to access NetBox
 *
 * The version of the OpenAPI document: 2.7
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WritableIpAddress {
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(rename = "family", skip_serializing_if = "Option::is_none")]
    pub family: Option<i32>,
    /// IPv4 or IPv6 address (with mask)
    #[serde(rename = "address")]
    pub address: String,
    #[serde(rename = "vrf", skip_serializing_if = "Option::is_none")]
    pub vrf: Option<i32>,
    #[serde(rename = "tenant", skip_serializing_if = "Option::is_none")]
    pub tenant: Option<i32>,
    /// The operational status of this IP
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<Status>,
    /// The functional role of this IP
    #[serde(rename = "role", skip_serializing_if = "Option::is_none")]
    pub role: Option<Role>,
    #[serde(rename = "interface", skip_serializing_if = "Option::is_none")]
    pub interface: Option<i32>,
    /// The IP for which this address is the \"outside\" IP
    #[serde(rename = "nat_inside", skip_serializing_if = "Option::is_none")]
    pub nat_inside: Option<i32>,
    #[serde(rename = "nat_outside")]
    pub nat_outside: i32,
    /// Hostname or FQDN (not case-sensitive)
    #[serde(rename = "dns_name", skip_serializing_if = "Option::is_none")]
    pub dns_name: Option<String>,
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "tags", skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<String>>,
    #[serde(rename = "custom_fields", skip_serializing_if = "Option::is_none")]
    pub custom_fields: Option<serde_json::Value>,
    #[serde(rename = "created", skip_serializing_if = "Option::is_none")]
    pub created: Option<String>,
    #[serde(rename = "last_updated", skip_serializing_if = "Option::is_none")]
    pub last_updated: Option<String>,
}

impl WritableIpAddress {
    pub fn new(address: String, nat_outside: i32) -> WritableIpAddress {
        WritableIpAddress {
            id: None,
            family: None,
            address,
            vrf: None,
            tenant: None,
            status: None,
            role: None,
            interface: None,
            nat_inside: None,
            nat_outside,
            dns_name: None,
            description: None,
            tags: None,
            custom_fields: None,
            created: None,
            last_updated: None,
        }
    }
}

/// The operational status of this IP
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "active")]
    Active,
    #[serde(rename = "reserved")]
    Reserved,
    #[serde(rename = "deprecated")]
    Deprecated,
    #[serde(rename = "dhcp")]
    Dhcp,
}
/// The functional role of this IP
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Role {
    #[serde(rename = "loopback")]
    Loopback,
    #[serde(rename = "secondary")]
    Secondary,
    #[serde(rename = "anycast")]
    Anycast,
    #[serde(rename = "vip")]
    Vip,
    #[serde(rename = "vrrp")]
    Vrrp,
    #[serde(rename = "hsrp")]
    Hsrp,
    #[serde(rename = "glbp")]
    Glbp,
    #[serde(rename = "carp")]
    Carp,
}

