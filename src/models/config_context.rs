/*
 * NetBox API
 *
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.0
 *
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ConfigContext {
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(rename = "url", skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    #[serde(rename = "display", skip_serializing_if = "Option::is_none")]
    pub display: Option<String>,
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "weight", skip_serializing_if = "Option::is_none")]
    pub weight: Option<i32>,
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "is_active", skip_serializing_if = "Option::is_none")]
    pub is_active: Option<bool>,
    #[serde(rename = "regions", skip_serializing_if = "Option::is_none")]
    pub regions: Option<Vec<crate::models::NestedRegion>>,
    #[serde(rename = "site_groups", skip_serializing_if = "Option::is_none")]
    pub site_groups: Option<Vec<crate::models::NestedSiteGroup>>,
    #[serde(rename = "sites", skip_serializing_if = "Option::is_none")]
    pub sites: Option<Vec<crate::models::NestedSite>>,
    #[serde(rename = "device_types", skip_serializing_if = "Option::is_none")]
    pub device_types: Option<Vec<crate::models::NestedDeviceType>>,
    #[serde(rename = "roles", skip_serializing_if = "Option::is_none")]
    pub roles: Option<Vec<crate::models::NestedDeviceRole>>,
    #[serde(rename = "platforms", skip_serializing_if = "Option::is_none")]
    pub platforms: Option<Vec<crate::models::NestedPlatform>>,
    #[serde(rename = "cluster_groups", skip_serializing_if = "Option::is_none")]
    pub cluster_groups: Option<Vec<crate::models::NestedClusterGroup>>,
    #[serde(rename = "clusters", skip_serializing_if = "Option::is_none")]
    pub clusters: Option<Vec<crate::models::NestedCluster>>,
    #[serde(rename = "tenant_groups", skip_serializing_if = "Option::is_none")]
    pub tenant_groups: Option<Vec<crate::models::NestedTenantGroup>>,
    #[serde(rename = "tenants", skip_serializing_if = "Option::is_none")]
    pub tenants: Option<Vec<crate::models::NestedTenant>>,
    #[serde(rename = "tags", skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<String>>,
    #[serde(rename = "data")]
    pub data: String,
    #[serde(rename = "created", skip_serializing_if = "Option::is_none")]
    pub created: Option<String>,
    #[serde(rename = "last_updated", skip_serializing_if = "Option::is_none")]
    pub last_updated: Option<String>,
}

impl ConfigContext {
    pub fn new(name: String, data: String) -> ConfigContext {
        ConfigContext {
            id: None,
            url: None,
            display: None,
            name,
            weight: None,
            description: None,
            is_active: None,
            regions: None,
            site_groups: None,
            sites: None,
            device_types: None,
            roles: None,
            platforms: None,
            cluster_groups: None,
            clusters: None,
            tenant_groups: None,
            tenants: None,
            tags: None,
            data,
            created: None,
            last_updated: None,
        }
    }
}
