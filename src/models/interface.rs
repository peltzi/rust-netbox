/*
 * NetBox API
 *
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.0
 *
 * Generated by: https://openapi-generator.tech
 */
use serde_json::Value;

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Interface {
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(rename = "url", skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    #[serde(rename = "display", skip_serializing_if = "Option::is_none")]
    pub display: Option<String>,
    #[serde(rename = "device")]
    pub device: Box<crate::models::NestedDevice>,
    #[serde(rename = "name")]
    pub name: String,
    /// Physical label
    #[serde(rename = "label", skip_serializing_if = "Option::is_none")]
    pub label: Option<String>,
    #[serde(rename = "type")]
    pub _type: Box<crate::models::Type2>,
    #[serde(rename = "enabled", skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    #[serde(rename = "parent", skip_serializing_if = "Option::is_none")]
    pub parent: Option<Box<crate::models::NestedInterface>>,
    #[serde(rename = "lag", skip_serializing_if = "Option::is_none")]
    pub lag: Option<Box<crate::models::NestedInterface>>,
    #[serde(rename = "mtu", skip_serializing_if = "Option::is_none")]
    pub mtu: Option<i32>,
    #[serde(rename = "mac_address", skip_serializing_if = "Option::is_none")]
    pub mac_address: Option<String>,
    /// This interface is used only for out-of-band management
    #[serde(rename = "mgmt_only", skip_serializing_if = "Option::is_none")]
    pub mgmt_only: Option<bool>,
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "mode", skip_serializing_if = "Option::is_none")]
    pub mode: Option<Box<crate::models::Mode>>,
    #[serde(rename = "untagged_vlan", skip_serializing_if = "Option::is_none")]
    pub untagged_vlan: Option<Box<crate::models::NestedVlan>>,
    #[serde(rename = "tagged_vlans", skip_serializing_if = "Option::is_none")]
    pub tagged_vlans: Option<Vec<crate::models::NestedVlan>>,
    /// Treat as if a cable is connected
    #[serde(rename = "mark_connected", skip_serializing_if = "Option::is_none")]
    pub mark_connected: Option<bool>,
    #[serde(rename = "cable", skip_serializing_if = "Option::is_none")]
    pub cable: Option<Box<crate::models::NestedCable>>,
    ///  Return the appropriate serializer for the cable termination model.
    #[serde(rename = "cable_peer", skip_serializing_if = "Option::is_none")]
    pub cable_peer: Option<::std::collections::HashMap<String, Value>>,
    #[serde(rename = "cable_peer_type", skip_serializing_if = "Option::is_none")]
    pub cable_peer_type: Option<String>,
    ///  Return the appropriate serializer for the type of connected object.
    #[serde(rename = "connected_endpoint", skip_serializing_if = "Option::is_none")]
    pub connected_endpoint: Option<::std::collections::HashMap<String, Value>>,
    #[serde(
        rename = "connected_endpoint_type",
        skip_serializing_if = "Option::is_none"
    )]
    pub connected_endpoint_type: Option<String>,
    #[serde(
        rename = "connected_endpoint_reachable",
        skip_serializing_if = "Option::is_none"
    )]
    pub connected_endpoint_reachable: Option<bool>,
    #[serde(rename = "tags", skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<crate::models::NestedTag>>,
    #[serde(rename = "custom_fields", skip_serializing_if = "Option::is_none")]
    pub custom_fields: Option<serde_json::Value>,
    #[serde(rename = "created", skip_serializing_if = "Option::is_none")]
    pub created: Option<String>,
    #[serde(rename = "last_updated", skip_serializing_if = "Option::is_none")]
    pub last_updated: Option<String>,
    #[serde(rename = "count_ipaddresses", skip_serializing_if = "Option::is_none")]
    pub count_ipaddresses: Option<i32>,
    #[serde(rename = "_occupied", skip_serializing_if = "Option::is_none")]
    pub _occupied: Option<bool>,
}

impl Interface {
    pub fn new(
        device: crate::models::NestedDevice,
        name: String,
        _type: crate::models::Type2,
    ) -> Interface {
        Interface {
            id: None,
            url: None,
            display: None,
            device: Box::new(device),
            name,
            label: None,
            _type: Box::new(_type),
            enabled: None,
            parent: None,
            lag: None,
            mtu: None,
            mac_address: None,
            mgmt_only: None,
            description: None,
            mode: None,
            untagged_vlan: None,
            tagged_vlans: None,
            mark_connected: None,
            cable: None,
            cable_peer: None,
            cable_peer_type: None,
            connected_endpoint: None,
            connected_endpoint_type: None,
            connected_endpoint_reachable: None,
            tags: None,
            custom_fields: None,
            created: None,
            last_updated: None,
            count_ipaddresses: None,
            _occupied: None,
        }
    }
}
