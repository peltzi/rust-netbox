/*
 * NetBox API
 *
 * API to access NetBox
 *
 * The version of the OpenAPI document: 2.7
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Platform {
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "slug")]
    pub slug: String,
    #[serde(rename = "manufacturer", skip_serializing_if = "Option::is_none")]
    pub manufacturer: Option<crate::models::NestedManufacturer>,
    /// The name of the NAPALM driver to use when interacting with devices
    #[serde(rename = "napalm_driver", skip_serializing_if = "Option::is_none")]
    pub napalm_driver: Option<String>,
    /// Additional arguments to pass when initiating the NAPALM driver (JSON format)
    #[serde(rename = "napalm_args", skip_serializing_if = "Option::is_none")]
    pub napalm_args: Option<String>,
    #[serde(rename = "device_count", skip_serializing_if = "Option::is_none")]
    pub device_count: Option<i32>,
    #[serde(rename = "virtualmachine_count", skip_serializing_if = "Option::is_none")]
    pub virtualmachine_count: Option<i32>,
}

impl Platform {
    pub fn new(name: String, slug: String) -> Platform {
        Platform {
            id: None,
            name,
            slug,
            manufacturer: None,
            napalm_driver: None,
            napalm_args: None,
            device_count: None,
            virtualmachine_count: None,
        }
    }
}


