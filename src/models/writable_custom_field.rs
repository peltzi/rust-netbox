/*
 * NetBox API
 *
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.0
 *
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WritableCustomField {
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(rename = "url", skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    #[serde(rename = "display", skip_serializing_if = "Option::is_none")]
    pub display: Option<String>,
    #[serde(rename = "content_types")]
    pub content_types: Vec<String>,
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub _type: Option<Type>,
    /// Internal field name
    #[serde(rename = "name")]
    pub name: String,
    /// Name of the field as displayed to users (if not provided, the field's name will be used)
    #[serde(rename = "label", skip_serializing_if = "Option::is_none")]
    pub label: Option<String>,
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// If true, this field is required when creating new objects or editing an existing object.
    #[serde(rename = "required", skip_serializing_if = "Option::is_none")]
    pub required: Option<bool>,
    /// Loose matches any instance of a given string; exact matches the entire field.
    #[serde(rename = "filter_logic", skip_serializing_if = "Option::is_none")]
    pub filter_logic: Option<FilterLogic>,
    /// Default value for the field (must be a JSON value). Encapsulate strings with double quotes (e.g. \"Foo\").
    #[serde(rename = "default", skip_serializing_if = "Option::is_none")]
    pub default: Option<String>,
    /// Fields with higher weights appear lower in a form.
    #[serde(rename = "weight", skip_serializing_if = "Option::is_none")]
    pub weight: Option<i32>,
    /// Minimum allowed value (for numeric fields)
    #[serde(rename = "validation_minimum", skip_serializing_if = "Option::is_none")]
    pub validation_minimum: Option<i32>,
    /// Maximum allowed value (for numeric fields)
    #[serde(rename = "validation_maximum", skip_serializing_if = "Option::is_none")]
    pub validation_maximum: Option<i32>,
    /// Regular expression to enforce on text field values. Use ^ and $ to force matching of entire string. For example, <code>^[A-Z]{3}$</code> will limit values to exactly three uppercase letters.
    #[serde(rename = "validation_regex", skip_serializing_if = "Option::is_none")]
    pub validation_regex: Option<String>,
    /// Comma-separated list of available choices (for selection fields)
    #[serde(rename = "choices", skip_serializing_if = "Option::is_none")]
    pub choices: Option<Vec<String>>,
}

impl WritableCustomField {
    pub fn new(content_types: Vec<String>, name: String) -> WritableCustomField {
        WritableCustomField {
            id: None,
            url: None,
            display: None,
            content_types,
            _type: None,
            name,
            label: None,
            description: None,
            required: None,
            filter_logic: None,
            default: None,
            weight: None,
            validation_minimum: None,
            validation_maximum: None,
            validation_regex: None,
            choices: None,
        }
    }
}

///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "text")]
    Text,
    #[serde(rename = "integer")]
    Integer,
    #[serde(rename = "boolean")]
    Boolean,
    #[serde(rename = "date")]
    Date,
    #[serde(rename = "url")]
    Url,
    #[serde(rename = "select")]
    Select,
    #[serde(rename = "multiselect")]
    Multiselect,
}
/// Loose matches any instance of a given string; exact matches the entire field.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum FilterLogic {
    #[serde(rename = "disabled")]
    Disabled,
    #[serde(rename = "loose")]
    Loose,
    #[serde(rename = "exact")]
    Exact,
}
