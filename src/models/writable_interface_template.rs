/*
 * NetBox API
 *
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.0
 *
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WritableInterfaceTemplate {
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(rename = "url", skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    #[serde(rename = "display", skip_serializing_if = "Option::is_none")]
    pub display: Option<String>,
    #[serde(rename = "device_type")]
    pub device_type: i32,
    #[serde(rename = "name")]
    pub name: String,
    /// Physical label
    #[serde(rename = "label", skip_serializing_if = "Option::is_none")]
    pub label: Option<String>,
    #[serde(rename = "type")]
    pub _type: Type,
    #[serde(rename = "mgmt_only", skip_serializing_if = "Option::is_none")]
    pub mgmt_only: Option<bool>,
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "created", skip_serializing_if = "Option::is_none")]
    pub created: Option<String>,
    #[serde(rename = "last_updated", skip_serializing_if = "Option::is_none")]
    pub last_updated: Option<String>,
}

impl WritableInterfaceTemplate {
    pub fn new(device_type: i32, name: String, _type: Type) -> WritableInterfaceTemplate {
        WritableInterfaceTemplate {
            id: None,
            url: None,
            display: None,
            device_type,
            name,
            label: None,
            _type,
            mgmt_only: None,
            description: None,
            created: None,
            last_updated: None,
        }
    }
}

///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "virtual")]
    _Virtual,
    #[serde(rename = "lag")]
    Lag,
    #[serde(rename = "100base-tx")]
    _100baseTx,
    #[serde(rename = "1000base-t")]
    _1000baseT,
    #[serde(rename = "2.5gbase-t")]
    _25gbaseT,
    #[serde(rename = "5gbase-t")]
    _5gbaseT,
    #[serde(rename = "10gbase-t")]
    _10gbaseT,
    #[serde(rename = "10gbase-cx4")]
    _10gbaseCx4,
    #[serde(rename = "1000base-x-gbic")]
    _1000baseXGbic,
    #[serde(rename = "1000base-x-sfp")]
    _1000baseXSfp,
    #[serde(rename = "10gbase-x-sfpp")]
    _10gbaseXSfpp,
    #[serde(rename = "10gbase-x-xfp")]
    _10gbaseXXfp,
    #[serde(rename = "10gbase-x-xenpak")]
    _10gbaseXXenpak,
    #[serde(rename = "10gbase-x-x2")]
    _10gbaseXX2,
    #[serde(rename = "25gbase-x-sfp28")]
    _25gbaseXSfp28,
    #[serde(rename = "50gbase-x-sfp56")]
    _50gbaseXSfp56,
    #[serde(rename = "40gbase-x-qsfpp")]
    _40gbaseXQsfpp,
    #[serde(rename = "50gbase-x-sfp28")]
    _50gbaseXSfp28,
    #[serde(rename = "100gbase-x-cfp")]
    _100gbaseXCfp,
    #[serde(rename = "100gbase-x-cfp2")]
    _100gbaseXCfp2,
    #[serde(rename = "200gbase-x-cfp2")]
    _200gbaseXCfp2,
    #[serde(rename = "100gbase-x-cfp4")]
    _100gbaseXCfp4,
    #[serde(rename = "100gbase-x-cpak")]
    _100gbaseXCpak,
    #[serde(rename = "100gbase-x-qsfp28")]
    _100gbaseXQsfp28,
    #[serde(rename = "200gbase-x-qsfp56")]
    _200gbaseXQsfp56,
    #[serde(rename = "400gbase-x-qsfpdd")]
    _400gbaseXQsfpdd,
    #[serde(rename = "400gbase-x-osfp")]
    _400gbaseXOsfp,
    #[serde(rename = "ieee802.11a")]
    Ieee80211a,
    #[serde(rename = "ieee802.11g")]
    Ieee80211g,
    #[serde(rename = "ieee802.11n")]
    Ieee80211n,
    #[serde(rename = "ieee802.11ac")]
    Ieee80211ac,
    #[serde(rename = "ieee802.11ad")]
    Ieee80211ad,
    #[serde(rename = "ieee802.11ax")]
    Ieee80211ax,
    #[serde(rename = "ieee802.15.1")]
    Ieee802151,
    #[serde(rename = "gsm")]
    Gsm,
    #[serde(rename = "cdma")]
    Cdma,
    #[serde(rename = "lte")]
    Lte,
    #[serde(rename = "sonet-oc3")]
    SonetOc3,
    #[serde(rename = "sonet-oc12")]
    SonetOc12,
    #[serde(rename = "sonet-oc48")]
    SonetOc48,
    #[serde(rename = "sonet-oc192")]
    SonetOc192,
    #[serde(rename = "sonet-oc768")]
    SonetOc768,
    #[serde(rename = "sonet-oc1920")]
    SonetOc1920,
    #[serde(rename = "sonet-oc3840")]
    SonetOc3840,
    #[serde(rename = "1gfc-sfp")]
    _1gfcSfp,
    #[serde(rename = "2gfc-sfp")]
    _2gfcSfp,
    #[serde(rename = "4gfc-sfp")]
    _4gfcSfp,
    #[serde(rename = "8gfc-sfpp")]
    _8gfcSfpp,
    #[serde(rename = "16gfc-sfpp")]
    _16gfcSfpp,
    #[serde(rename = "32gfc-sfp28")]
    _32gfcSfp28,
    #[serde(rename = "64gfc-qsfpp")]
    _64gfcQsfpp,
    #[serde(rename = "128gfc-sfp28")]
    _128gfcSfp28,
    #[serde(rename = "infiniband-sdr")]
    InfinibandSdr,
    #[serde(rename = "infiniband-ddr")]
    InfinibandDdr,
    #[serde(rename = "infiniband-qdr")]
    InfinibandQdr,
    #[serde(rename = "infiniband-fdr10")]
    InfinibandFdr10,
    #[serde(rename = "infiniband-fdr")]
    InfinibandFdr,
    #[serde(rename = "infiniband-edr")]
    InfinibandEdr,
    #[serde(rename = "infiniband-hdr")]
    InfinibandHdr,
    #[serde(rename = "infiniband-ndr")]
    InfinibandNdr,
    #[serde(rename = "infiniband-xdr")]
    InfinibandXdr,
    #[serde(rename = "t1")]
    T1,
    #[serde(rename = "e1")]
    E1,
    #[serde(rename = "t3")]
    T3,
    #[serde(rename = "e3")]
    E3,
    #[serde(rename = "xdsl")]
    Xdsl,
    #[serde(rename = "cisco-stackwise")]
    CiscoStackwise,
    #[serde(rename = "cisco-stackwise-plus")]
    CiscoStackwisePlus,
    #[serde(rename = "cisco-flexstack")]
    CiscoFlexstack,
    #[serde(rename = "cisco-flexstack-plus")]
    CiscoFlexstackPlus,
    #[serde(rename = "juniper-vcp")]
    JuniperVcp,
    #[serde(rename = "extreme-summitstack")]
    ExtremeSummitstack,
    #[serde(rename = "extreme-summitstack-128")]
    ExtremeSummitstack128,
    #[serde(rename = "extreme-summitstack-256")]
    ExtremeSummitstack256,
    #[serde(rename = "extreme-summitstack-512")]
    ExtremeSummitstack512,
    #[serde(rename = "other")]
    Other,
}
