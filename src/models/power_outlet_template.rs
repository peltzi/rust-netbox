/*
 * NetBox API
 *
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.0
 *
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PowerOutletTemplate {
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(rename = "url", skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    #[serde(rename = "display", skip_serializing_if = "Option::is_none")]
    pub display: Option<String>,
    #[serde(rename = "device_type")]
    pub device_type: Box<crate::models::NestedDeviceType>,
    #[serde(rename = "name")]
    pub name: String,
    /// Physical label
    #[serde(rename = "label", skip_serializing_if = "Option::is_none")]
    pub label: Option<String>,
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub _type: Option<Box<crate::models::Type4>>,
    #[serde(rename = "power_port", skip_serializing_if = "Option::is_none")]
    pub power_port: Option<Box<crate::models::NestedPowerPortTemplate>>,
    #[serde(rename = "feed_leg", skip_serializing_if = "Option::is_none")]
    pub feed_leg: Option<Box<crate::models::FeedLeg>>,
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "created", skip_serializing_if = "Option::is_none")]
    pub created: Option<String>,
    #[serde(rename = "last_updated", skip_serializing_if = "Option::is_none")]
    pub last_updated: Option<String>,
}

impl PowerOutletTemplate {
    pub fn new(device_type: crate::models::NestedDeviceType, name: String) -> PowerOutletTemplate {
        PowerOutletTemplate {
            id: None,
            url: None,
            display: None,
            device_type: Box::new(device_type),
            name,
            label: None,
            _type: None,
            power_port: None,
            feed_leg: None,
            description: None,
            created: None,
            last_updated: None,
        }
    }
}
