/*
 * NetBox API
 *
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.0
 *
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WritablePowerPanel {
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(rename = "url", skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    #[serde(rename = "display", skip_serializing_if = "Option::is_none")]
    pub display: Option<String>,
    #[serde(rename = "site")]
    pub site: i32,
    #[serde(rename = "location", skip_serializing_if = "Option::is_none")]
    pub location: Option<i32>,
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "tags", skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<crate::models::NestedTag>>,
    #[serde(rename = "custom_fields", skip_serializing_if = "Option::is_none")]
    pub custom_fields: Option<serde_json::Value>,
    #[serde(rename = "powerfeed_count", skip_serializing_if = "Option::is_none")]
    pub powerfeed_count: Option<i32>,
}

impl WritablePowerPanel {
    pub fn new(site: i32, name: String) -> WritablePowerPanel {
        WritablePowerPanel {
            id: None,
            url: None,
            display: None,
            site,
            location: None,
            name,
            tags: None,
            custom_fields: None,
            powerfeed_count: None,
        }
    }
}
