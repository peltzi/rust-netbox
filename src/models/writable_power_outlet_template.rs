/*
 * NetBox API
 *
 * API to access NetBox
 *
 * The version of the OpenAPI document: 2.7
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WritablePowerOutletTemplate {
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(rename = "device_type")]
    pub device_type: i32,
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub _type: Option<Type>,
    #[serde(rename = "power_port", skip_serializing_if = "Option::is_none")]
    pub power_port: Option<i32>,
    /// Phase (for three-phase feeds)
    #[serde(rename = "feed_leg", skip_serializing_if = "Option::is_none")]
    pub feed_leg: Option<FeedLeg>,
}

impl WritablePowerOutletTemplate {
    pub fn new(device_type: i32, name: String) -> WritablePowerOutletTemplate {
        WritablePowerOutletTemplate {
            id: None,
            device_type,
            name,
            _type: None,
            power_port: None,
            feed_leg: None,
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "iec-60320-c5")]
    Iec60320C5,
    #[serde(rename = "iec-60320-c7")]
    Iec60320C7,
    #[serde(rename = "iec-60320-c13")]
    Iec60320C13,
    #[serde(rename = "iec-60320-c15")]
    Iec60320C15,
    #[serde(rename = "iec-60320-c19")]
    Iec60320C19,
    #[serde(rename = "iec-60309-p-n-e-4h")]
    Iec60309PNE4h,
    #[serde(rename = "iec-60309-p-n-e-6h")]
    Iec60309PNE6h,
    #[serde(rename = "iec-60309-p-n-e-9h")]
    Iec60309PNE9h,
    #[serde(rename = "iec-60309-2p-e-4h")]
    Iec603092pE4h,
    #[serde(rename = "iec-60309-2p-e-6h")]
    Iec603092pE6h,
    #[serde(rename = "iec-60309-2p-e-9h")]
    Iec603092pE9h,
    #[serde(rename = "iec-60309-3p-e-4h")]
    Iec603093pE4h,
    #[serde(rename = "iec-60309-3p-e-6h")]
    Iec603093pE6h,
    #[serde(rename = "iec-60309-3p-e-9h")]
    Iec603093pE9h,
    #[serde(rename = "iec-60309-3p-n-e-4h")]
    Iec603093pNE4h,
    #[serde(rename = "iec-60309-3p-n-e-6h")]
    Iec603093pNE6h,
    #[serde(rename = "iec-60309-3p-n-e-9h")]
    Iec603093pNE9h,
    #[serde(rename = "nema-5-15r")]
    Nema515r,
    #[serde(rename = "nema-5-20r")]
    Nema520r,
    #[serde(rename = "nema-5-30r")]
    Nema530r,
    #[serde(rename = "nema-5-50r")]
    Nema550r,
    #[serde(rename = "nema-6-15r")]
    Nema615r,
    #[serde(rename = "nema-6-20r")]
    Nema620r,
    #[serde(rename = "nema-6-30r")]
    Nema630r,
    #[serde(rename = "nema-6-50r")]
    Nema650r,
    #[serde(rename = "nema-l5-15r")]
    NemaL515r,
    #[serde(rename = "nema-l5-20r")]
    NemaL520r,
    #[serde(rename = "nema-l5-30r")]
    NemaL530r,
    #[serde(rename = "nema-l5-50r")]
    NemaL550r,
    #[serde(rename = "nema-l6-20r")]
    NemaL620r,
    #[serde(rename = "nema-l6-30r")]
    NemaL630r,
    #[serde(rename = "nema-l6-50r")]
    NemaL650r,
    #[serde(rename = "CS6360C")]
    CS6360C,
    #[serde(rename = "CS6364C")]
    CS6364C,
    #[serde(rename = "CS8164C")]
    CS8164C,
    #[serde(rename = "CS8264C")]
    CS8264C,
    #[serde(rename = "CS8364C")]
    CS8364C,
    #[serde(rename = "CS8464C")]
    CS8464C,
    #[serde(rename = "ita-e")]
    ItaE,
    #[serde(rename = "ita-f")]
    ItaF,
    #[serde(rename = "ita-g")]
    ItaG,
    #[serde(rename = "ita-h")]
    ItaH,
    #[serde(rename = "ita-i")]
    ItaI,
    #[serde(rename = "ita-j")]
    ItaJ,
    #[serde(rename = "ita-k")]
    ItaK,
    #[serde(rename = "ita-l")]
    ItaL,
    #[serde(rename = "ita-m")]
    ItaM,
    #[serde(rename = "ita-n")]
    ItaN,
    #[serde(rename = "ita-o")]
    ItaO,
}
/// Phase (for three-phase feeds)
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum FeedLeg {
    #[serde(rename = "A")]
    A,
    #[serde(rename = "B")]
    B,
    #[serde(rename = "C")]
    C,
}

